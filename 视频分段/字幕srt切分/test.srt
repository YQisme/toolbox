1
00:00:00,240 --> 00:00:04,080
python is the world's most popular programming language and that is for a
python是世界上最流行的编程语言，这是一个

2
00:00:04,080 --> 00:00:09,040
reason you can use it to make games and apps run databases build robots and
你可以用它来制作游戏的原因应用程序运行数据库构建机器人

3
00:00:09,040 --> 00:00:14,000
create artificial intelligence with ease the example you see right now is an ai
轻松创造人工智能你现在看到的例子是一个人工智能

4
00:00:14,000 --> 00:00:17,840
program that tracks my face it took me about five minutes to write
追踪我脸部的程序大约五分钟写

5
00:00:17,840 --> 00:00:22,080
and that is a general theme for python it is incredibly easy to learn while
这是 python 的一般主题它非常容易学习，同时

6
00:00:22,080 --> 00:00:26,240
also giving you a ton of power for more advanced functionalities and all of this
还为您提供更多动力先进的功能和所有这一切

7
00:00:26,240 --> 00:00:29,599
you're going to learn in this video starting from scratch
你将在这个视频中学到从头开始

8
00:00:29,599 --> 00:00:33,760
i am assuming that you have never used any kind of programming language before
我假设你从未使用过之前任何一种编程语言

9
00:00:33,760 --> 00:00:38,399
so we are starting all the way from the bottom and over the next 10 or so hours
所以我们一路从底部以及接下来的 10 个小时左右

10
00:00:38,399 --> 00:00:41,840
you are going to learn basically everything you need to know about python
你基本上会学到关于 python 你需要知道的一切

11
00:00:41,840 --> 00:00:45,840
and after that you can learn pretty much whatever you want in the language and it
之后你可以学到很多东西无论你想要什么语言和它

12
00:00:45,840 --> 00:00:50,239
should be fairly straightforward as a matter of fact this video is part
应该相当简单事实上这个视频是一部分

13
00:00:50,239 --> 00:00:54,559
of a larger paid course and this one is going to use all of the stuff you're
一个更大的付费课程，这个是将使用你所有的东西

14
00:00:54,559 --> 00:00:59,440
learning about python and uses it to make four games and that way you are
学习Python并使用它制作四款游戏，这样你就可以了

15
00:00:59,440 --> 00:01:03,840
learning in much more detail how to actually use all of this in practice
更详细地学习如何在实践中实际使用所有这些

16
00:01:03,840 --> 00:01:07,439
so check this one out if you're interested although this entire video
所以如果你是的话，请检查一下这个虽然整个视频很感兴趣

17
00:01:07,439 --> 00:01:11,439
works by itself and you can use it for any other non-gaming purpose as well
可以单独工作，您可以将其用于以及任何其他非游戏目的

18
00:01:11,439 --> 00:01:15,920
it's a general introduction to python before we start the program we need to
这是对 python 的一般介绍在我们开始程序之前我们需要

19
00:01:15,920 --> 00:01:20,400
cover some fundamentals first of all if you are just getting into programming
首先涵盖一些基础知识如果你刚刚开始编程

20
00:01:20,400 --> 00:01:25,759
you are probably overwhelmed by choice besides python you could learn a few
你可能对选择不知所措除了python之外你还可以学一些

21
00:01:25,759 --> 00:01:31,759
hundred other programming languages some have clear names like html5 or java
一百种其他编程语言 一些有明确的名称，例如 html5 或 java

22
00:01:31,759 --> 00:01:37,680
while others are much more difficult to separate like c c sharp and c plus plus
而其他的则困难得多像 c c Sharp 和 c plus plus 一样分开

23
00:01:37,680 --> 00:01:42,399
so what makes each language different and where should you start
那么是什么让每种语言有所不同你应该从哪里开始

24
00:01:42,399 --> 00:01:46,320
also how does python compare to these other languages
python 与这些相比如何其他语言

25
00:01:46,320 --> 00:01:50,479
one good way to separate these languages is by using two axes
分离这些语言的一种好方法是通过使用两个轴

26
00:01:50,479 --> 00:01:54,479
the first one is about the language being made for a specific purpose or if
第一个是关于语言的是为了特定目的而制造的，或者如果

27
00:01:54,479 --> 00:01:59,600
it is more open-ended for example sql and r are programming languages for
它更加开放，例如 sql和 r 是编程语言

28
00:01:59,600 --> 00:02:05,439
highly specific purposes databases and data analysis respectively
高度特定的目的分别是数据库和数据分析

29
00:02:05,439 --> 00:02:09,920
on the other side you have languages like python that can also analyze data
另一边你有语言像python一样也可以分析数据

30
00:02:09,920 --> 00:02:14,480
and run databases but can do a lot more besides that
并运行数据库，但可以做更多的事情除此之外

31
00:02:14,480 --> 00:02:19,120
this flexibility is one of the reasons why python is so popular it just can do
这种灵活性是原因之一为什么Python如此受欢迎，它就可以做到

32
00:02:19,120 --> 00:02:24,080
a ton of different things although this line is not static the
有很多不同的东西虽然这条线不是静态的

33
00:02:24,080 --> 00:02:29,360
best example for that is html initially it was purely a language to make
最好的例子最初是 html它纯粹是一种语言

34
00:02:29,360 --> 00:02:35,760
websites it was very much designed for a single purpose however over time people
它的网站很大程度上是为目的单一但随着时间的推移人们

35
00:02:35,760 --> 00:02:41,360
kept on adding more to it and nowadays you can make apps and games with html
不断添加更多内容，如今你可以用 html 制作应用程序和游戏

36
00:02:41,360 --> 00:02:46,239
it became much more flexible and that is the main reason why modern websites are
它变得更加灵活，那就是现代网站的主要原因

37
00:02:46,239 --> 00:02:50,080
as powerful as they are the other axis is the level of
和他们一样强大另一个轴是水平

38
00:02:50,080 --> 00:02:53,040
abstraction now when i say a language is more
抽象现在当我说语言更重要时

39
00:02:53,040 --> 00:02:57,840
abstract than another i don't mean to say it's more complex instead
比另一个抽象，我不是故意的说它更复杂

40
00:02:57,840 --> 00:03:02,319
abstraction refers to how far removed a language is from physical computer
抽象指的是距离多远语言来自物理计算机

41
00:03:02,319 --> 00:03:05,519
hardware let's use html again
硬件让我们再次使用 html

42
00:03:05,519 --> 00:03:10,239
to see a website written in html5 you first need a browser like chrome or
看到一个用 html5 编写的网站首先需要一个浏览器，例如 chrome 或

43
00:03:10,239 --> 00:03:16,080
safari that browser in turn runs on an operating system and only that operating
Safari 浏览器又运行在操作系统并且仅该操作系统

44
00:03:16,080 --> 00:03:20,560
system has access to actual physical computer hardware there is a huge
系统可以访问实际物理计算机硬件有一个巨大的

45
00:03:20,560 --> 00:03:24,959
distance between the html code and the computer it runs on
html 代码与 html 代码之间的距离它运行的计算机

46
00:03:24,959 --> 00:03:29,200
that means html is a very abstract language
这意味着 html 是一个非常抽象的语言

47
00:03:29,200 --> 00:03:34,080
this however does not mean that html is more difficult than a less abstract
但这并不意味着 html 是比不那么抽象的更困难

48
00:03:34,080 --> 00:03:39,519
language quite the opposite actually in broad terms the more abstract a language
语言实际上恰恰相反语言越抽象，术语就越宽泛

49
00:03:39,519 --> 00:03:44,799
is the easier it is to use that is because a less abstract language
是越容易使用那是因为一种不太抽象的语言

50
00:03:44,799 --> 00:03:49,280
needs to work with computer hardware it needs to be very specific about memory
需要与计算机硬件配合使用需要非常具体地了解记忆

51
00:03:49,280 --> 00:03:54,000
management you sometimes have to write for different kinds of computer hardware
管理你有时必须写适用于不同类型的计算机硬件

52
00:03:54,000 --> 00:03:57,360
and generally it is very easy to break things
而且一般很容易坏事物

53
00:03:57,360 --> 00:04:04,159
now in this axis python like html is a very abstract language in fact python
现在在这个轴上 python 像 html 是实际上是非常抽象的语言 python

54
00:04:04,159 --> 00:04:08,159
itself was created using another programming languages that one is called
本身是使用另一个创建的一种称为的编程语言

55
00:04:08,159 --> 00:04:12,959
c and this language is much less abstract
C这种语言不那么抽象

56
00:04:12,959 --> 00:04:17,199
generally in the bottom right of this graph you have all of the c languages
一般在这个的右下角图表你拥有所有的c语言

57
00:04:17,199 --> 00:04:22,400
like c c sharp and c plus plus you also have java down there the differences
像 c c Sharp 和 c plus plus 你也有java下面的差异

58
00:04:22,400 --> 00:04:25,759
between them are mostly technical and you don't really have to worry about
他们之间主要是技术性的你真的不必担心

59
00:04:25,759 --> 00:04:30,560
them at least for now that being said c-sharp was only created because
至少目前来说c-sharp 的创建只是因为

60
00:04:30,560 --> 00:04:34,960
microsoft didn't want to pay license fees to the creators of java these two
微软不想支付许可费向 java 这两个的创建者收费

61
00:04:34,960 --> 00:04:39,919
languages are very similar so there can be a ton of overlap between these
语言非常相似，所以可以这些之间有很多重叠

62
00:04:39,919 --> 00:04:43,120
different languages they are not entirely unique
它们不是不同的语言完全独特

63
00:04:43,120 --> 00:04:47,600
now when you are just getting started you want to begin in the top right of
现在当你刚刚开始时你想从右上角开始

64
00:04:47,600 --> 00:04:51,759
this graph with more abstract general purpose languages
该图具有更抽象的一般性目的语言

65
00:04:51,759 --> 00:04:56,479
these are easy to learn work everywhere there's a huge community for support and
这些都是很容易学习的工作，随处可见有一个庞大的社区提供支持和

66
00:04:56,479 --> 00:04:59,759
resources and you can use them for a huge variety
资源你可以将它们用于各种各样的用途

67
00:04:59,759 --> 00:05:03,039
of projects what you also want to be aware of is
项目数你还想知道的是

68
00:05:03,039 --> 00:05:07,360
that all programming languages are somewhat similar if you know python for
所有编程语言都是如果你了解 python 的话有点类似

69
00:05:07,360 --> 00:05:12,160
example you can learn c or sql much more easily
例如，您可以学习更多 c 或 sql容易地

70
00:05:12,160 --> 00:05:16,400
this is actually a really common pattern people start programming in python and
这实际上是一种非常常见的模式人们开始用 python 编程

71
00:05:16,400 --> 00:05:20,880
then migrate to another language python was actually designed to be a
然后迁移到另一种语言python 实际上被设计成

72
00:05:20,880 --> 00:05:25,440
tool to learn programming itself and it just happened to expand over time to
学习编程本身及其的工具只是随着时间的推移而扩大到

73
00:05:25,440 --> 00:05:28,800
become a really popular languages by itself
成为一种真正流行的语言本身

74
00:05:28,800 --> 00:05:32,240
although that doesn't mean that you couldn't stick with python
虽然这并不意味着你无法坚持使用Python

75
00:05:32,240 --> 00:05:36,400
especially for data science think of artificial intelligence databases and
特别是对于数据科学来说人工智能数据库和

76
00:05:36,400 --> 00:05:41,840
data analysis python very often is the default choice and these are fields
数据分析Python经常是默认选择，这些是字段

77
00:05:41,840 --> 00:05:45,840
where you can earn a lot of money it is totally fine to stick with python by
在那里你可以赚很多钱完全可以坚持使用 python

78
00:05:45,840 --> 00:05:50,720
itself entirely for your entire career lots of people do that
完全为了你的整个职业生涯很多人都这么做

79
00:05:50,720 --> 00:05:54,960
but generally if you are not sure yet what language you want to go for don't
但一般来说如果你还不确定你想选择什么语言而不是

80
00:05:54,960 --> 00:05:59,600
worry about it what you're learning in python can very easily be migrated to
担心你正在学什么python 可以很容易地迁移到

81
00:05:59,600 --> 00:06:03,680
another language what you want to do is just get started
另一种语言你想做的只是开始

82
00:06:03,680 --> 00:06:07,680
somewhere and work on projects you like and see how far you get
在某个地方从事你喜欢的项目看看你能走多远

83
00:06:07,680 --> 00:06:11,600
and if you feel like changing you can totally do that and not start from
如果你想改变你可以完全这样做而不是从

84
00:06:11,600 --> 00:06:15,919
scratch a lot of things you are going to learn you can use in other languages as
刮掉很多你要去的东西学习您可以使用其他语言作为

85
00:06:15,919 --> 00:06:18,560
well you are always going to make some
出色地你总是会做一些

86
00:06:18,560 --> 00:06:23,759
progress even if you are switching alright in this video we are going to
即使您正在切换，也会取得进展好吧，在这个视频中我们将

87
00:06:23,759 --> 00:06:28,880
install python and the main target of this session is to write hello world
安装 python 和主要目标这次会话是写hello world

88
00:06:28,880 --> 00:06:32,800
using python now this task you can approach in two
使用Python现在这个任务你可以分两次完成

89
00:06:32,800 --> 00:06:36,080
ways number one you can do all of this on
方法第一，你可以做这一切

90
00:06:36,080 --> 00:06:40,240
your computer and this is going to be the main way if you want to use python
你的电脑，这将是如果你想使用 python 的主要方法

91
00:06:40,240 --> 00:06:45,120
normally you want it to be installed on your computer now that being said you
通常你希望它安装在话虽这么说，你的电脑

92
00:06:45,120 --> 00:06:50,240
can also run python online and for that you don't have to install anything
还可以在线运行 python你不需要安装任何东西

93
00:06:50,240 --> 00:06:54,400
if you just want to have a quick look at python and check if you like it i would
如果您只是想快速浏览一下python 并检查你是否喜欢它我会

94
00:06:54,400 --> 00:06:58,880
recommend to just run python online for now and then if you decide that you do
建议在线运行 python时不时如果你决定这样做

95
00:06:58,880 --> 00:07:03,360
like it you can install it properly so let's start with some websites that let
喜欢它就可以正确安装它让我们从一些网站开始

96
00:07:03,360 --> 00:07:08,000
you run python code there are quite a few actually
你运行 python 代码有相当多的实际上很少

97
00:07:08,000 --> 00:07:13,759
here for example we have one website called programmist.com and this one lets
例如，我们有一个网站叫做programmist.com，这个让

98
00:07:13,759 --> 00:07:18,479
you run python code online besides that you could also use other languages like
除此之外，你还可以在线运行 python 代码您还可以使用其他语言，例如

99
00:07:18,479 --> 00:07:24,800
c c plus javascript and quite a few more but in our case i want to get rid of all
c c 加上 javascript 以及更多但在我们的例子中我想摆脱所有

100
00:07:24,800 --> 00:07:29,440
the code in here and to print anything in python
代码在这里并用 python 打印任何内容

101
00:07:29,440 --> 00:07:34,080
remember we want to write the word hello world
记住我们要写“你好”这个词世界

102
00:07:34,080 --> 00:07:38,880
and to print this you have to do a couple of things first of all you have
要打印这个你必须做首先你有几件事

103
00:07:38,880 --> 00:07:43,520
to put this entire phrase into quotation marks could either
把这整个短语放入引号可以

104
00:07:43,520 --> 00:07:48,319
be single or double quotation marks and for now just follow along i will explain
是单引号或双引号并且现在就跟着我来解释一下

105
00:07:48,319 --> 00:07:53,199
all of this in much more detail later on but now that you have this word it
稍后将详细介绍所有这些内容但现在你有了这个词

106
00:07:53,199 --> 00:07:56,800
should be green and what you have to do now is write
应该是绿色的你现在要做的就是写

107
00:07:56,800 --> 00:08:00,639
print and then put the quotation mark phrase
打印然后将短语放在引号中

108
00:08:00,639 --> 00:08:06,400
inside of brackets which means we first of all have the word print then we have
括号内这意味着我们首先全部都有印刷字，那么我们就有

109
00:08:06,400 --> 00:08:09,919
a bracket then we have hello world in quotation
一个括号然后我们在引用中有 hello world

110
00:08:09,919 --> 00:08:13,840
marks and then we have a closing bracket
标记然后我们有一个右括号

111
00:08:14,479 --> 00:08:17,840
and if you have all of this you can click on run
如果你拥有这一切你就可以单击运行

112
00:08:17,840 --> 00:08:21,759
and now you get hello world if you could follow along so far you have written
现在你会得到 hello world 如果可以的话到目前为止你已经写了

113
00:08:21,759 --> 00:08:25,440
your first python code and if you don't want to install anything on your
你的第一个 python 代码，如果你不这样做想要在你的电脑上安装任何东西

114
00:08:25,440 --> 00:08:30,720
computer or register for anything this website here would be really really good
计算机或注册任何东西这里的网站真的非常好

115
00:08:30,720 --> 00:08:33,760
so this is definitely something i would recommend you can also make it a bit
所以这绝对是我想要的建议你也可以做一点

116
00:08:33,760 --> 00:08:39,200
larger that's a bit easier to read besides that there is also a website
更大一点更容易阅读除此之外还有一个网站

117
00:08:39,200 --> 00:08:43,519
called rapple.8 or replit i'm never sure how to pronounce it
叫 rapple.8 或 replit 我不确定怎么发音

118
00:08:43,519 --> 00:08:48,080
in here you also have an online editor that you can use for python here we
在这里你还有一个在线编辑器你可以在这里使用 python

119
00:08:48,080 --> 00:08:52,720
already have print hello world if i run this we get hello world for this one to
如果我运行，已经打印出 hello world这是我们为这个人打招呼的世界

120
00:08:52,720 --> 00:08:57,600
use it properly you do have to register although it is a bit more powerful but
正确使用它你必须注册虽然它的威力有点大但是

121
00:08:57,600 --> 00:09:01,839
both of these are really good to get started using python although keep in
这两个都非常好得到开始使用 python，尽管保持在

122
00:09:01,839 --> 00:09:07,120
mind you are running all of this in a browser which is somewhat limiting what
请注意，您正在运行所有这些浏览器这在一定程度上限制了

123
00:09:07,120 --> 00:09:12,240
you ultimately want to do is run python on your own computer that way you have
你最终想做的是运行 python在你自己的电脑上这样你就可以

124
00:09:12,240 --> 00:09:17,360
significantly more power and you also have more flexibility so this is what we
显着增加功率，并且您还有更多的灵活性，所以这就是我们

125
00:09:17,360 --> 00:09:22,320
want to do now for that we have to install python on your computer and the
我们现在想做的就是在你的电脑上安装 python 并

126
00:09:22,320 --> 00:09:26,640
important thing to understand here is that python is just another program that
这里要理解的重要一点是python 只是另一个程序

127
00:09:26,640 --> 00:09:31,360
you have to install on your computer it's working basically like word or
你必须安装在你的电脑上它的工作原理基本上就像单词或

128
00:09:31,360 --> 00:09:36,240
excel or literally any video game and the file you have to install you get
excel 或任何电子游戏以及您必须安装的文件

129
00:09:36,240 --> 00:09:39,680
from python.org so let's have a look at this one
来自 python.org 所以让我们看一下这个

130
00:09:39,680 --> 00:09:45,200
here we have the python website and what you have to do is click on downloads and
这里我们有 python 网站以及什么你所要做的就是点击下载并

131
00:09:45,200 --> 00:09:49,440
in here you want to download python and then the latest version right now this
在这里你想下载 python 并那么现在最新的版本是这个

132
00:09:49,440 --> 00:09:52,720
is 3.10.5 by the time you are watching this
是3.10.5 当你看到这个的时候

133
00:09:52,720 --> 00:09:56,480
there's probably a higher number but that isn't going to make much of a
可能有更高的数字但是这不会有多大作用

134
00:09:56,480 --> 00:10:01,440
difference so click on download and then you get the file downloaded and this is
差异所以点击下载然后你得到下载的文件，这是

135
00:10:01,440 --> 00:10:05,839
going to work with your specific operating system in my case i have
将根据您的具体情况进行工作就我而言，我有操作系统

136
00:10:05,839 --> 00:10:09,200
windows but if you have a mac this would also work although you would get a
Windows 但如果你有 Mac，这会也可以工作，尽管你会得到一个

137
00:10:09,200 --> 00:10:13,600
slightly different file and once you have that you click on open
文件略有不同完成后，单击“打开”

138
00:10:13,600 --> 00:10:17,680
file and now you get either install now or
文件现在您可以立即安装或

139
00:10:17,680 --> 00:10:23,600
customize installation however before you do anything in here there is
但是自定义安装在你在这里做任何事情之前

140
00:10:23,600 --> 00:10:28,800
one incredibly important thing and that you can see down here it says add python
一件非常重要的事情你可以在这里看到它说添加 python

141
00:10:28,800 --> 00:10:33,920
3.10 to path this is an incredibly important option
3.10 路径这是一个非常重要的选择

142
00:10:33,920 --> 00:10:39,040
that you absolutely have to take this one you really want to add i will
你绝对必须接受你真的想添加这个，我会的

143
00:10:39,040 --> 00:10:43,680
explain later why this is important but do keep in mind this is incredibly
稍后解释为什么这很重要但是请记住，这是令人难以置信的

144
00:10:43,680 --> 00:10:48,240
important if you don't add this you are going to run into a ton of problems
重要的是如果你不添加这个你就是会遇到很多问题

145
00:10:48,240 --> 00:10:51,920
but besides that you can leave everything as it is and then click on
但除此之外你可以离开一切保持原样，然后单击

146
00:10:51,920 --> 00:10:58,720
install now then you get an installation
现在安装然后你就得到了安装

147
00:10:58,720 --> 00:11:03,120
and this one is going to work like literally any other program so just wait
这个的工作原理就像几乎任何其他程序，所以只需等待

148
00:11:03,120 --> 00:11:07,760
until it finishes and you should be good to go
直到它完成，你应该很好去

149
00:11:08,079 --> 00:11:13,440
there we go the setup was successful now we can close it and
现在设置成功了我们可以关闭它

150
00:11:13,440 --> 00:11:17,279
nothing changed however now what you can do if you press
没有改变但是现在如果你按下你可以做什么

151
00:11:17,279 --> 00:11:22,399
the windows key you can type python and you have python 3.10 installed on your
windows 键你可以输入 python 并你已经安装了 python 3.10

152
00:11:22,399 --> 00:11:26,800
computer if you run this you get something like
电脑如果你运行这个你会得到类似的东西

153
00:11:26,800 --> 00:11:31,680
this in here you can write whatever you want for example what you could be
在这里你可以写任何你想写的东西例如你想要成为什么样的人

154
00:11:31,680 --> 00:11:35,519
writing is what we have already seen you can write
写作是我们已经看到的可以写

155
00:11:35,519 --> 00:11:41,200
print then in quotation marks hello world
打印然后用引号括起来 hello world

156
00:11:41,200 --> 00:11:46,240
close the bracket and now if you press enter you get hello world and this was
合上支架，现在如果你按输入你好世界，这是

157
00:11:46,240 --> 00:11:49,600
done using python in here you could also write something
使用Python完成在这里你还可以写一些东西

158
00:11:49,600 --> 00:11:52,880
like one plus two you would get the result
就像一加二你会得到结果

159
00:11:52,880 --> 00:11:58,079
and you can do quite a bit more but this is basically valid python
你还可以做更多的事情，但是这个基本上是有效的 python

160
00:11:58,079 --> 00:12:03,600
so with that we have basic python code although the limitation here is that we
这样我们就有了基本的Python代码尽管这里的限制是我们

161
00:12:03,600 --> 00:12:09,200
can only ever write a single line of code which well isn't great what we need
只能写一行代码不太符合我们的需要

162
00:12:09,200 --> 00:12:13,680
is some kind of code editor and that we are going to cover in the next video
是某种代码编辑器，我们将在下一个视频中介绍

163
00:12:13,680 --> 00:12:16,560
because this is a slightly larger section
因为这是一个稍微大一点的部分

164
00:12:16,560 --> 00:12:20,800
and just to make sure that everybody can follow here i have mac os
只是为了确保每个人都能关注这里 我有 mac 操作系统

165
00:12:20,800 --> 00:12:25,279
in there i still have to click on download python and now i'm downloading
在那里我仍然需要点击下载 python，现在我正在下载

166
00:12:25,279 --> 00:12:31,760
a pkg file other than that i can click on open file
一个 pkg 文件除此之外我可以点击打开文件

167
00:12:31,760 --> 00:12:35,920
and now we're getting a python installer that messed with my window sorry about
现在我们得到了一个 python 安装程序弄乱了我的窗户，抱歉

168
00:12:35,920 --> 00:12:41,680
that but in here you click on continue you click on continue continue more
但在这里你点击继续您点击“继续”继续更多

169
00:12:41,680 --> 00:12:45,600
you click on agree and then you click on install
您点击同意，然后点击安装

170
00:12:45,600 --> 00:12:50,320
now you need your password as always install software
现在你需要密码一如既往地安装软件

171
00:12:50,320 --> 00:12:55,360
and then you're just installing anything for mac os you don't have to worry about
然后你只需安装任何东西对于 mac os 你不必担心

172
00:12:55,360 --> 00:12:58,079
a path and now here you can see all of my
一条路径现在你可以在这里看到我的全部

173
00:12:58,079 --> 00:13:02,680
programs and i have python 3.10
程序，我有 python 3.10

174
00:13:03,279 --> 00:13:07,279
although just wait a second and there we go now the entire thing finished i can
虽然等一下，我们就在那里现在走吧，一切都完成了，我可以

175
00:13:07,279 --> 00:13:12,399
click on close and move this thing to the bin and now i have python installed
单击关闭并将此内容移至bin 现在我已经安装了 python

176
00:13:12,399 --> 00:13:17,279
now to actually use it on macos i need my launcher and you have a program
现在要在我需要的 macOS 上实际使用它我的启动器和你有一个程序

177
00:13:17,279 --> 00:13:23,680
called python launcher although this one does look a bit weird in here you can't
称为 python 启动器，虽然这个这里看起来确实有点奇怪，你不能

178
00:13:23,680 --> 00:13:28,959
do very much although you have a tick box that says run in terminal window or
尽管你有蜱虫，但还是做了很多事框显示在终端窗口中运行或

179
00:13:28,959 --> 00:13:33,519
at least i hope you do a terminal is another program inside of
至少我希望你这样做终端是其中的另一个程序

180
00:13:33,519 --> 00:13:36,480
mac os if you open the launcher again and type
苹果系统如果您再次打开启动器并输入

181
00:13:36,480 --> 00:13:40,079
terminal there you have a terminal
终端那里有一个终端

182
00:13:40,079 --> 00:13:43,920
and let me increase the font size here a bit so this is easier to read
让我增加这里的字体大小有点这样更容易阅读

183
00:13:43,920 --> 00:13:50,000
now what you want to do in here is you want to type python 3
现在你想做的就是你想要输入 python 3

184
00:13:50,000 --> 00:13:54,959
and then press enter and now you can write python code for example you could
然后按 Enter 键，现在您可以编写 python 代码，例如你可以

185
00:13:54,959 --> 00:13:59,760
write print brackets open then quotation mark hello
写打印括号打开然后引号 hello

186
00:13:59,760 --> 00:14:02,959
world and then closing quotation mark closing
世界然后用右引号结束

187
00:14:02,959 --> 00:14:07,199
bracket and now if you print this you get hello world and like we have done on
括号，现在如果你打印这个你打个招呼，就像我们之前所做的那样

188
00:14:07,199 --> 00:14:11,440
windows you could type one plus two and you're getting free
windows 你可以输入一加二和你获得自由了

189
00:14:11,440 --> 00:14:16,800
and this is valid python code but once again you're only writing a single line
这是有效的 python 代码，但一次再说一遍，你只写了一行

190
00:14:16,800 --> 00:14:19,760
of code but for that again we're going to work
代码的但为此我们将再次努力

191
00:14:19,760 --> 00:14:23,760
on the code editor in this part we are going to install a
在代码编辑器上在这部分我们将安装一个

192
00:14:23,760 --> 00:14:28,959
code editor and let's first talk about why we are going to need that
我们先来谈谈代码编辑器为什么我们需要它

193
00:14:28,959 --> 00:14:34,720
right now we can run python code which is a really good start but we cannot use
现在我们可以运行 python 代码是一个非常好的开始，但我们不能使用

194
00:14:34,720 --> 00:14:38,720
python comfortably right now we can write single lines of
蟒蛇舒适现在我们可以写单行

195
00:14:38,720 --> 00:14:43,040
code but later on we want to write hundreds if not thousands of lines of
代码，但稍后我们想写数百甚至数千行

196
00:14:43,040 --> 00:14:48,079
code and right now we just cannot do that for that we are going to need some
代码，现在我们做不到为此我们需要一些

197
00:14:48,079 --> 00:14:53,360
kind of text editor for our code think of this like word or pages it's simply a
我们的代码认为的一种文本编辑器像单词或页面一样，它只是一个

198
00:14:53,360 --> 00:14:57,680
text editor except now we are writing code instead of sentences
文本编辑器，除了现在我们正在写代码而不是句子

199
00:14:57,680 --> 00:15:02,720
and there are a ton of popular code editors here's the list of the really
并且有大量流行的代码编辑这里是真正的名单

200
00:15:02,720 --> 00:15:07,600
famous one we have visual studio code pycharm atom and sublime
著名的我们有 Visual Studio 代码pycharm Atom 和 Sublime

201
00:15:07,600 --> 00:15:13,279
although there are a lot more there basically is no end to code editors the
虽然还有很多基本上代码编辑器是没有尽头的

202
00:15:13,279 --> 00:15:18,320
one that i am going to use is called sublime this is a really straightforward
我要使用的一个叫做太棒了，这真的很简单

203
00:15:18,320 --> 00:15:22,320
and simple code editor that you can also customize quite a bit which i really
和简单的代码编辑器，您也可以定制相当多，我真的

204
00:15:22,320 --> 00:15:25,680
enjoy but basically all of those would be fine
享受但基本上所有这些都可以

205
00:15:25,680 --> 00:15:30,160
if you have a strong preference although i would recommend just to follow along
如果你有强烈的偏好我建议只是跟随

206
00:15:30,160 --> 00:15:35,120
to also use sublime and this is going to be just another program that we have to
也可以使用 sublime，这将是只是我们必须执行的另一个程序

207
00:15:35,120 --> 00:15:38,959
install oh i should mention all of them are completely free you don't have to
安装哦，我应该提到所有这些完全免费，您不必这样做

208
00:15:38,959 --> 00:15:44,320
pay anything but let's install it alright here we are on the website of
支付任何费用，但让我们安装它好的，我们现在在以下网站上

209
00:15:44,320 --> 00:15:49,120
sublime and the url is sublimetext.com the full name of the code editor is
sublime 且 url 为 sublimetext.com代码编辑器的全名是

210
00:15:49,120 --> 00:15:53,440
sublime text but nobody really calls it that and then here you can go to
崇高的文字，但没有人真正称呼它然后你可以去这里

211
00:15:53,440 --> 00:15:58,639
download and download the entire thing now you can see it already probably
下载并下载整个内容现在你可能已经看到了

212
00:15:58,639 --> 00:16:03,839
there is also a buy option you can purchase sublime it costs about 80 i
您还可以选择购买购买sublime大约需要80i

213
00:16:03,839 --> 00:16:07,600
think but you don't have to do it the free version has exactly the same
想，但你不必这么做免费版本完全相同

214
00:16:07,600 --> 00:16:10,880
features and this is what we are going to use
功能，这就是我们要做的使用

215
00:16:10,880 --> 00:16:13,920
basically when you are buying it you are supporting the creators but you don't
基本上当你购买它时支持创作者，但你不支持

216
00:16:13,920 --> 00:16:18,560
have to do it so in download you can download the version you need either mac
必须这样做，所以在下载时你可以下载您需要的 Mac 版本

217
00:16:18,560 --> 00:16:23,920
os windows or linux in my case i need windows so i'm clicking on that and now
我需要的操作系统是 windows 或 linuxwindows 所以我现在点击它

218
00:16:23,920 --> 00:16:28,000
i have a download for my specific version
我有一个针对我的具体情况的下载版本

219
00:16:28,000 --> 00:16:31,120
obviously if you have a different operating system this would look a bit
显然如果你有不同的操作系统这看起来有点

220
00:16:31,120 --> 00:16:38,240
different but now you click on open file and then you get this kind of menu in
不同，但现在您单击打开文件然后你会得到这样的菜单

221
00:16:38,240 --> 00:16:42,800
here you just click on next and you install it
在这里你只需点击下一步然后你安装它

222
00:16:42,800 --> 00:16:47,360
like anything else and finish there we go now you have
像其他任何事情一样完成那里，我们现在就可以了

223
00:16:47,360 --> 00:16:50,959
installed sublime on mac os the installer might look
安装崇高在 Mac 操作系统上，安装程序可能看起来像

224
00:16:50,959 --> 00:16:54,320
slightly different but that is minor details
略有不同，但很小细节

225
00:16:54,320 --> 00:16:58,560
but once you have all of that you can type sublime text
但一旦你拥有了所有这些你就可以输入崇高的文字

226
00:16:58,560 --> 00:17:05,679
and now you should be seeing something like this this is our code editor
现在你应该看到一些东西这是我们的代码编辑器

227
00:17:05,679 --> 00:17:11,120
and in here you can write any kind of text whatever you want to write
在这里你可以写任何任何你想写的文字

228
00:17:11,120 --> 00:17:15,439
in my case what i want to write in here is print
就我而言，我想在这里写下什么正在打印

229
00:17:15,439 --> 00:17:20,240
and brackets and now quotation marks hello
和括号现在引号你好

230
00:17:20,240 --> 00:17:23,839
world and this is going to be the python code
世界这将是 python 代码

231
00:17:23,839 --> 00:17:28,720
we want to execute now to execute all of this we need two
我们想要执行现在要执行所有这一切，我们需要两个

232
00:17:28,720 --> 00:17:32,480
major steps number one this is the easy one we have
主要步骤第一，这是我们拥有的最简单的一个

233
00:17:32,480 --> 00:17:40,000
to save our file this we do under file and save or controller command s
为了保存我们的文件，我们在文件下执行此操作并保存或控制器命令

234
00:17:40,000 --> 00:17:43,919
if i do that i end up somewhere in my file system in
如果我这样做我最终在我的文件系统中的某个地方

235
00:17:43,919 --> 00:17:47,840
my case i have the folder here already you can save it wherever you want it
我的情况是这里已经有文件夹了你可以将其保存在任何你想要的地方

236
00:17:47,840 --> 00:17:52,000
really doesn't make any difference although what does make a difference is
真的没有什么区别尽管真正重要的是

237
00:17:52,000 --> 00:17:55,760
the naming of the file let me call this one test
文件的命名让我称之为一个测试

238
00:17:55,760 --> 00:18:02,000
but you do have to specify an ending so you want dodge and then add p y short
但你必须指定一个结局你想要闪避，然后添加 y 短

239
00:18:02,000 --> 00:18:06,960
for python this is telling your computer that you have a python file
对于Python来说，这是告诉你的计算机你有一个 python 文件

240
00:18:06,960 --> 00:18:12,080
you could compare all of this to word which always needs a docx ending or a
你可以将所有这些与文字进行比较总是需要 docx 结尾或

241
00:18:12,080 --> 00:18:17,760
text file which always has a txt ending but in our case we want dot pi and now i
始终以 txt 结尾的文本文件但在我们的例子中，我们想要点 pi，现在我

242
00:18:17,760 --> 00:18:21,760
want to save and what you should be seeing now is
想要保存你现在应该看到的是

243
00:18:21,760 --> 00:18:26,720
that the colors of our text changed if they didn't don't worry too much
我们文本的颜色改变了如果他们没有，别太担心

244
00:18:26,720 --> 00:18:31,120
about it but now what you want to do let me show my mouse
关于它但现在你想做的让我展示一下我的鼠标

245
00:18:31,120 --> 00:18:36,960
and i want to go to tools and in here we have build and build with
我想去工具在这里我们已经构建并构建了

246
00:18:36,960 --> 00:18:40,480
this basically means you want to execute your code
这基本上意味着你想执行你的代码

247
00:18:40,480 --> 00:18:46,080
i want to click on build and now i can see hello world down here
我想点击构建现在我可以在这里看到你好世界

248
00:18:46,080 --> 00:18:51,919
now you might be seeing something else what you might be seeing is
现在你可能会看到别的东西你可能会看到的是

249
00:18:51,919 --> 00:18:56,720
a dialog that looks something like this in here you want to select python so if
一个看起来像这样的对话框在这里你想选择 python 所以如果

250
00:18:56,720 --> 00:19:00,799
i click on this one you're getting the same result
我点击这个你会得到相同的结果

251
00:19:00,799 --> 00:19:05,039
the reason here is when you're running python for the first time sublime does
原因是当你跑步时python sublime 第一次做

252
00:19:05,039 --> 00:19:09,120
want to double check that you do indeed want to run python but if you have done
想再次确认你确实这样做了想要运行 python 但如果你已经完成了

253
00:19:09,120 --> 00:19:14,160
that once sublime does remember and most of the time what i am going to
曾经的崇高确实记得大多数时候我要做的事

254
00:19:14,160 --> 00:19:17,520
do is instead of up here clicking on build
做不是在这里点击构建

255
00:19:17,520 --> 00:19:22,559
i am pressing ctrl or command b this one is going to give you the same
我按 ctrl 或 command b这个会给你同样的

256
00:19:22,559 --> 00:19:28,559
result and if you want to close this dialog down here you press on escape
结果，如果你想关闭它对话框在此处，您按“退出”

257
00:19:28,559 --> 00:19:32,480
although there is a really important topic i do want to cover
虽然有一个非常重要的我确实想讨论的主题

258
00:19:32,480 --> 00:19:36,320
and that is when we are running any kind of code in
那就是当我们运行任何类型的代码时

259
00:19:36,320 --> 00:19:41,440
sublime what essentially happens is that sublime inserts all of the code into the
崇高本质上发生的是sublime 将所有代码插入到

260
00:19:41,440 --> 00:19:47,840
python app however sublime doesn't know by default where that python app is
python 应用程序但是 sublime 不知道默认情况下，python 应用程序在哪里

261
00:19:47,840 --> 00:19:52,720
because remember python is just another program on our computer it's nothing
因为记住 python 只是另一个我们计算机上的程序没什么

262
00:19:52,720 --> 00:19:56,160
special the only reason sublime right now can
特别的现在崇高的唯一原因是

263
00:19:56,160 --> 00:20:00,640
find the python app is because of the path files
找到python应用程序是因为路径文件

264
00:20:00,640 --> 00:20:04,720
these path files are basically a directory inside of windows that makes
这些路径文件基本上是windows 内的目录使

265
00:20:04,720 --> 00:20:08,880
it easier for programs to find other programs
程序更容易找到其他程式

266
00:20:08,880 --> 00:20:13,840
and because of that sublime can find python very easily if we didn't add
正因为如此，崇高才能找到如果我们不添加的话 python 很容易

267
00:20:13,840 --> 00:20:18,400
python to the path though sublime would not be able to find it and you would
python 到路径虽然 sublime 会找不到它，你会

268
00:20:18,400 --> 00:20:23,280
have to add quite a bit more yourself to make it all work which fortunately we
必须自己添加更多内容使一切顺利，幸运的是我们

269
00:20:23,280 --> 00:20:27,600
didn't need because we did add python to the path files
不需要，因为我们确实添加了 python路径文件

270
00:20:27,600 --> 00:20:31,840
if you forgot that for some reason just uninstall python and reinstall it with
如果你因为某种原因忘记了卸载 python 并重新安装

271
00:20:31,840 --> 00:20:35,840
the pathfire selected that's the easiest way to go on about it
选择最简单的路径火继续下去的方法

272
00:20:35,840 --> 00:20:41,760
but alright what you can do now you could for example copy this line here
但好吧你现在能做什么例如可以在这里复制这一行

273
00:20:41,760 --> 00:20:45,760
and paste it multiple times run all of this
并粘贴多次运行所有这

274
00:20:45,760 --> 00:20:48,720
and you can see hello world multiple times
你可以看到 hello world multiple次

275
00:20:48,720 --> 00:20:53,440
once again how all of this works in detail i will cover in the next well 10
再次说明这一切是如何运作的我将在下一个井 10 中介绍详细信息

276
00:20:53,440 --> 00:20:57,200
hours or so but in here what you can also do
小时左右但在这里你还可以做什么

277
00:20:57,200 --> 00:21:03,679
is inside of print add a math operation like 5 10 and now run all of this again
在 print 里面添加一个数学运算就像 5 10 现在再次运行所有这些

278
00:21:03,679 --> 00:21:09,679
under tools and build and you get 15 all the way at the end
在工具和构建下，你会得到 15 个尽头的路

279
00:21:09,679 --> 00:21:14,320
and with that we can run python code over multiple lines
这样我们就可以运行 python 代码了多行

280
00:21:14,320 --> 00:21:19,679
so with this we can basically start the actual python tutorial
所以我们基本上可以开始实际的Python教程

281
00:21:19,679 --> 00:21:23,760
although before we get started on that there's one more thing i do want to do
尽管在我们开始之前我还有一件事想做

282
00:21:23,760 --> 00:21:28,080
that you don't necessarily have to follow because i think all of this is
你不一定必须这样做关注因为我认为这一切都是

283
00:21:28,080 --> 00:21:31,280
looking kind of ugly and a bit hard to read
看起来有点丑而且有点难读

284
00:21:31,280 --> 00:21:34,880
as a consequence i want to change the styling
因此我想改变造型

285
00:21:34,880 --> 00:21:38,799
but i am literally only going to change the look of sublime in terms of
但我实际上只会改变崇高的外观

286
00:21:38,799 --> 00:21:44,400
functionality nothing is going to change so if you want to skip this part you can
功能不会改变所以如果你想跳过这一部分你可以

287
00:21:44,400 --> 00:21:48,640
totally do so let me show my mouse what i want to do
完全这样做让我向我的鼠标展示我想做什么

288
00:21:48,640 --> 00:21:54,000
most importantly under view i can hide a couple of things that we don't need for
最重要的是在视图下我可以隐藏一个一些我们不需要的东西

289
00:21:54,000 --> 00:21:58,400
example all the way in the bottom you can see a couple of bits of
示例一直在底部你可以看到一些

290
00:21:58,400 --> 00:22:02,640
information that we don't need so i want to hide all of this
我们不需要的信息，所以我想要隐藏这一切

291
00:22:02,640 --> 00:22:07,120
this is the status bar and i want to hide the status bar
这是状态栏，我想要隐藏状态栏

292
00:22:07,120 --> 00:22:12,400
already looking better besides that up here you can see the
看起来已经好多了除此之外，你还可以看到

293
00:22:12,400 --> 00:22:15,600
tabs if you have multiple python files this
选项卡如果你有多个 python 文件

294
00:22:15,600 --> 00:22:19,760
can be really useful each tab would be one python file
每个选项卡都非常有用一个Python文件

295
00:22:19,760 --> 00:22:25,120
but for a long time we are only ever going to have a single python file later
但很长一段时间我们只是永远稍后会有一个 python 文件

296
00:22:25,120 --> 00:22:30,240
on we are going to use these tabs though but for now i want to go to view and
不过我们将使用这些选项卡但现在我想去看看

297
00:22:30,240 --> 00:22:34,720
hide tabs already looking much cleaner
隐藏标签看起来已经干净多了

298
00:22:34,720 --> 00:22:40,080
besides that what you can also do is hide the menu and this is making
除此之外你还可以做的是隐藏菜单，这就是

299
00:22:40,080 --> 00:22:43,440
everything look even cleaner if you want the menu back you are
一切看起来更加干净如果你想要菜单回来你就是

300
00:22:43,440 --> 00:22:47,600
clicking on alt and now you can see it until you click outside of it but then
单击 alt，现在您可以看到它直到你点击它的外面，然后

301
00:22:47,600 --> 00:22:51,440
you can bring it back and all of this is already looking
你可以把它带回来而这一切都已经在寻找

302
00:22:51,440 --> 00:22:56,720
significantly cleaner now if you want to get rid of this top bar here you have to
如果你想的话，现在明显更干净了你必须去掉这里的顶部栏

303
00:22:56,720 --> 00:23:01,520
click on f11 and now you have a full screen app
点击 f11 现在你就有了完整的屏幕应用程序

304
00:23:01,520 --> 00:23:07,360
which i think is much nicer to work in now what you can also do is change the
我认为在那里工作要好得多现在你还可以做的是改变

305
00:23:07,360 --> 00:23:10,320
text size what you do with controller command and
字体大小你用控制器命令做什么

306
00:23:10,320 --> 00:23:15,280
then either the equal or the minus sign equal makes the text larger minus makes
然后是等号或减号equal 使文本变大 minus 使文本变大

307
00:23:15,280 --> 00:23:19,760
the text smaller and in here just choose whatever you can
文字变小在这里你可以选择任何你能选择的

308
00:23:19,760 --> 00:23:25,840
see best in my case i usually aim for having 30 lines of code on one screen
在我的情况下看到最好的我通常的目标一个屏幕上有 30 行代码

309
00:23:25,840 --> 00:23:32,640
so in my case the font size i usually choose if i copy this a couple of times
所以就我而言，我通常使用字体大小选择是否复制此几次

310
00:23:32,640 --> 00:23:37,760
is something like this i have 30 lines of code on one window
是这样的我在一个窗口上有 30 行代码

311
00:23:37,760 --> 00:23:42,640
but this is entirely subjective you probably want to have something smaller
但这完全是主观的可能想要更小的东西

312
00:23:42,640 --> 00:23:48,720
and finally what we can do is change the color scheme and the theming of this
最后我们能做的是改变配色方案和主题

313
00:23:48,720 --> 00:23:53,520
and for this you can install external themes this you do with control or
为此，您可以安装外部您可以通过控制或

314
00:23:53,520 --> 00:23:57,279
command shift and p if you click all of them
命令 Shift 和 P如果你点击全部

315
00:23:57,279 --> 00:24:03,279
you get a couple of options that you can use inside of sublime in here you want
你有几个选择在你想要的地方使用 sublime 内部

316
00:24:03,279 --> 00:24:07,679
to click on install package now click on enter
点击现在安装包点击进入

317
00:24:07,679 --> 00:24:11,840
now sublime is going to think for a second and now you can install external
现在 Sublime 会考虑一个第二，现在你可以安装外部

318
00:24:11,840 --> 00:24:14,799
modules some of these change the functionality
模块其中一些改变了功能

319
00:24:14,799 --> 00:24:18,960
of sublime but most of them are just different color schemes
崇高但大多数只是不同的配色方案

320
00:24:18,960 --> 00:24:24,480
and in my case what i want to install is the agila theme so if you type agila
就我而言，我想要安装的是agila 主题，所以如果您输入 agila

321
00:24:24,480 --> 00:24:30,480
this should be the first result and now just press enter
这应该是第一个结果，现在只需按回车键

322
00:24:30,480 --> 00:24:36,000
and there you can see the nodes for the argila theme but we
在那里你可以看到argila 主题的节点，但我们

323
00:24:36,000 --> 00:24:40,080
don't care about that now to get back to our code you want to press alt for the
现在不关心这个，回去吧我们的代码你想按alt键

324
00:24:40,080 --> 00:24:43,200
menu and at least for now i do want to show
菜单至少现在我确实想展示

325
00:24:43,200 --> 00:24:48,480
tabs so we can navigate around here although this package control message
选项卡，以便我们可以在此处导航虽然这个包控制消息

326
00:24:48,480 --> 00:24:53,440
you can close by clicking on the x here and now we are back in the code but
您可以点击此处的 x 关闭现在我们回到了代码但是

327
00:24:53,440 --> 00:24:58,000
nothing has changed now to actually apply the changes you have to go to
现在实际上什么都没有改变应用您必须执行的更改

328
00:24:58,000 --> 00:25:01,760
preferences and in here you have select a color
优先在这里你可以选择一种颜色

329
00:25:01,760 --> 00:25:06,960
scheme and select a theme let's start with the theme in here you
方案并选择主题让我们从这里的主题开始吧

330
00:25:06,960 --> 00:25:11,279
have a bunch of different themes if you click on down you can see what is
有很多不同的主题，如果你点击向下你可以看到是什么

331
00:25:11,279 --> 00:25:14,279
changing
改变

332
00:25:15,200 --> 00:25:19,520
so if i click on a couple you see what the difference is in my
所以如果我点击几个你看我的有什么不同

333
00:25:19,520 --> 00:25:23,919
case i just want to use the agile theme so if i click on this we already have a
案例我只想使用敏捷主题所以如果我点击这个我们已经有了

334
00:25:23,919 --> 00:25:28,640
couple of changes what you can also do now if you click on preferences again
你还可以做一些改变现在如果你再次点击首选项

335
00:25:28,640 --> 00:25:33,200
you can select the color scheme this one changes the actual code in terms of what
你可以选择这个配色方案更改实际代码的内容

336
00:25:33,200 --> 00:25:38,640
you see and in here once again you can select a lot of different things i don't
你看，再次在这里你可以选择很多我没有选择的东西

337
00:25:38,640 --> 00:25:43,200
want to go over this too fast because it might be a ton of colors and well i
想要过快地回顾这个因为它可能有很多颜色，我

338
00:25:43,200 --> 00:25:48,240
don't overwhelm you but in here you can search for different color schemes
不要让你不知所措，但在这里你可以搜索不同的配色方案

339
00:25:48,240 --> 00:25:53,679
depending on what you have installed in my case i'm gonna look for agila and
取决于您安装的内容就我而言，我要寻找阿吉拉

340
00:25:53,679 --> 00:25:57,840
then oceanic next
然后是海洋

341
00:25:57,919 --> 00:26:02,400
if i select this one all of this is looking significantly nicer
如果我选择这个，所有这些都是看起来好多了

342
00:26:02,400 --> 00:26:06,159
if i now go to view and
如果我现在去查看并

343
00:26:06,159 --> 00:26:09,200
hide the tabs this is basically what you're going to
隐藏选项卡这基本上就是你要做的

344
00:26:09,200 --> 00:26:14,240
see most of the time and i think this is much easier to read although you might
大多数时候都会看到，我认为这是尽管您可能会更容易阅读

345
00:26:14,240 --> 00:26:18,880
be wondering what is this line here on the left and
想知道这条线是什么左边和

346
00:26:18,880 --> 00:26:22,799
well for now you really don't have to worry about it it's something much more
好吧，现在你真的不需要担心它还有更多的事情

347
00:26:22,799 --> 00:26:28,000
advanced you can entirely ignore it as a consequence since it is not going to be
高级你可以完全忽略它作为后果，因为它不会

348
00:26:28,000 --> 00:26:31,760
relevant for this entire tutorial i have hidden it
与我的整个教程相关隐藏它

349
00:26:31,760 --> 00:26:36,240
which is bringing us to some more optionality inside of sublime so if i go
这给我们带来了更多崇高内部的可选性所以如果我去

350
00:26:36,240 --> 00:26:43,840
to preferences and here i go to settings we get another window and in here you
到首选项，我在这里进入设置我们有另一个窗口，你就在这里

351
00:26:43,840 --> 00:26:47,440
can see the settings now you might be used to other programs
可以看到设置现在您可能已经习惯了其他程序

352
00:26:47,440 --> 00:26:52,320
you just have checkboxes in sublime this is working a bit different you are
你只是在 sublime 中有复选框你的工作有点不同

353
00:26:52,320 --> 00:26:55,679
basically having on the left here all of the
基本上左边有所有的

354
00:26:55,679 --> 00:26:59,760
different options you could be changing for example you could change the margin
您可以更改的不同选项例如，您可以更改边距

355
00:26:59,760 --> 00:27:04,799
size to a four and to change this you would have to copy this one here and
大小为四并更改此你必须在这里复制这个

356
00:27:04,799 --> 00:27:09,360
paste it on the right side like this and now you can change the
将其粘贴到右侧像这样，现在你可以改变

357
00:27:09,360 --> 00:27:13,840
margin to whatever you want although my case i don't want to do this
尽管我的如果我不想这样做

358
00:27:13,840 --> 00:27:17,520
and i don't want to add too many complications in here because all of
我不想添加太多这里的并发症是因为所有

359
00:27:17,520 --> 00:27:22,559
this is getting a bit more advanced so what i'm going to do is i have a text
这变得更先进了所以我要做的是我有一条短信

360
00:27:22,559 --> 00:27:25,919
file let me increase the size of the right one
文件让我增加大小正确对象，真爱

361
00:27:25,919 --> 00:27:29,600
i have a text file that you can just copy if you want to have the exact same
我有一个文本文件，你可以如果你想要完全相同的复制

362
00:27:29,600 --> 00:27:32,559
styling that i do you just paste it in here
我做的样式你只需将其粘贴进去这里

363
00:27:32,559 --> 00:27:36,159
and now if you click on control s to save everything
现在如果你点击control s保存一切

364
00:27:36,159 --> 00:27:40,240
you should see not much of a difference although the yellow bar for example
你应该看到没有太大区别虽然例如黄色条

365
00:27:40,240 --> 00:27:43,760
disappeared and all of these options here you can
消失了所有这些选项都可以在这里

366
00:27:43,760 --> 00:27:47,679
find in the description so with that you can minimize all of
在描述中找到这样你就可以最小化所有

367
00:27:47,679 --> 00:27:53,039
this and now all of this looks as clean as it can be at least i think so
现在这一切看起来都很干净至少我是这么认为的

368
00:27:53,039 --> 00:27:58,799
so with that we have python installed and we can get started i want to start
这样我们就安装了python我们可以开始了 我想开始

369
00:27:58,799 --> 00:28:04,240
by talking about how code in python or in basically any programming language is
通过谈论 python 中的代码或基本上任何编程语言都是

370
00:28:04,240 --> 00:28:07,760
being executed and there are a couple of things you
被处决有几件事你

371
00:28:07,760 --> 00:28:12,159
have to understand the most important concept is that code
必须明白最重要的概念是代码

372
00:28:12,159 --> 00:28:17,279
will always be executed from the first to the last line for example if we have
总是从第一个开始执行到最后一行例如如果我们有

373
00:28:17,279 --> 00:28:22,559
these three lines of code python is going to start from the top so line one
这三行代码python是将从顶部开始，所以第一行

374
00:28:22,559 --> 00:28:26,399
this one here then we do line two line three
这里这个然后我们做第二行第三行

375
00:28:26,399 --> 00:28:31,279
and then we continue until we reach the end of the code
然后我们继续直到到达代码末尾

376
00:28:31,279 --> 00:28:36,240
and later on we are going to learn some tools to make this more flexible
稍后我们将学习一些使这更加灵活的工具

377
00:28:36,240 --> 00:28:40,880
for example if we want to repeat code or only run code if a certain condition is
例如，如果我们想重复代码或仅在满足特定条件时运行代码

378
00:28:40,880 --> 00:28:47,440
true but for now i just want to execute some basic code so we can get started
是的，但现在我只想执行一些基本代码，以便我们可以开始

379
00:28:47,440 --> 00:28:51,120
and let's have a look at all of this in some actual python file
让我们看看这一切一些实际的 python 文件

380
00:28:51,120 --> 00:28:57,760
and here we have a completely empty one and something we have seen already is to
这里我们有一个完全空的我们已经看到的是

381
00:28:57,760 --> 00:29:02,799
use the print statement and in here you can just write a random word
使用 print 语句，在这里你可以随便写一个词

382
00:29:02,799 --> 00:29:08,320
so a random word and now if i execute the code
所以一个随机词现在如果我执行代码

383
00:29:08,320 --> 00:29:12,960
which again i do with ctrl b or if i press alt
我再次使用 ctrl b 执行此操作，或者如果我按 alt

384
00:29:12,960 --> 00:29:19,120
i can go to tools and build same thing if i click on it i get a
我可以转到工具并构建同样的事情，如果我点击它，我会得到一个

385
00:29:19,120 --> 00:29:23,679
random word and just to be a bit more specific here
随机词在这里更具体一点

386
00:29:23,679 --> 00:29:28,480
let me change this word to first line of code
让我把这个词改为第一行代码

387
00:29:28,480 --> 00:29:33,840
and now if i add another print statement let me duplicate this line which i by
现在如果我添加另一个打印语句让我复制这行

388
00:29:33,840 --> 00:29:38,320
the way do with ctrl shift and d that way you can duplicate lines and sublime
使用 ctrl、shift 和 d 的方式复制线条和崇高的方式

389
00:29:38,320 --> 00:29:42,080
very easily now what i want to do for the second
非常简单地现在我想做什么

390
00:29:42,080 --> 00:29:46,559
line of code i want to rename this to second line of code
我想将其重命名为的代码行第二行代码

391
00:29:46,559 --> 00:29:50,640
and now if i run this we get the second line of code
现在如果我运行这个我们会得到第二个代码行

392
00:29:50,640 --> 00:29:54,799
meaning this line here was run first then we have number two and this would
意味着这里的这条线是首先运行的那么我们有第二个，这将

393
00:29:54,799 --> 00:30:00,080
then continue forever we are essentially executing code downwards in this
然后永远继续我们本质上是在此向下执行代码

394
00:30:00,080 --> 00:30:03,360
direction and this would work with any other data
方向这适用于任何其他数据

395
00:30:03,360 --> 00:30:09,279
type as well for example i could print some numbers and now we will get one two
也可以输入，例如我可以打印一些数字，现在我们将得到一二

396
00:30:09,279 --> 00:30:13,200
and three and that is then giving us the most
和三个这就是给我们最大的

397
00:30:13,200 --> 00:30:18,159
basic thing you have to understand that now we can execute some lines of code
你必须明白的基本事情现在我们可以执行一些代码行

398
00:30:18,159 --> 00:30:22,399
and i suppose there's one more important thing when we are talking about words
我想还有一个更重要的当我们谈论文字时的事情

399
00:30:22,399 --> 00:30:26,799
and print and that is let me copy this again
然后打印，让我复制这个再次

400
00:30:26,799 --> 00:30:32,399
a space in here would also show up meaning if i add a ton of white space
这里也会出现一个空格意思是如果我添加大量空白

401
00:30:32,399 --> 00:30:36,880
and run this again we now get this line of code here let me
并再次运行我们现在在这里得到这行代码让我

402
00:30:36,880 --> 00:30:40,399
rename it really quick third line of code
重命名它真的很快第三行代码

403
00:30:40,399 --> 00:30:44,399
all of this white space here is still showing up
这里所有的空白仍然是出现

404
00:30:44,399 --> 00:30:49,760
so just keep that in mind and well with that we have covered all
所以请记住这一点至此，我们已经涵盖了所有内容

405
00:30:49,760 --> 00:30:53,440
of the basics of really basic code execution
真正基本代码的基础知识执行

406
00:30:53,440 --> 00:30:57,279
and i guess with that let's do an exercise
我想我们可以做一个锻炼

407
00:30:57,279 --> 00:31:03,360
i want you guys to use these print statements to print some kind of tree
我希望你们使用这些印​​刷品打印某种树的语句

408
00:31:03,360 --> 00:31:09,120
looking shape and for that you want to use basic characters and white space and
寻找形状和你想要的使用基本字符和空白

409
00:31:09,120 --> 00:31:14,240
then combine these two and create that shape so pause the video now and see how
然后将这两者结合起来并创建形状所以现在暂停视频看看如何

410
00:31:14,240 --> 00:31:17,640
far you get
你能走多远

411
00:31:18,240 --> 00:31:23,360
the way you have to think about it i want to print again and i want to write
你必须考虑的方式我想再次打印并且我想写

412
00:31:23,360 --> 00:31:28,320
five axes and if i run the code now we can see
五轴如果我现在运行代码我们可以看到

413
00:31:28,320 --> 00:31:34,080
these five axes if i now print these five axes again one
这五个轴如果我现在再次打印这五个轴

414
00:31:34,080 --> 00:31:36,559
two three four five but
二三四五但

415
00:31:36,559 --> 00:31:41,200
remove the first two and replace them with a space
删除前两个并替换它们有一个空格

416
00:31:41,200 --> 00:31:46,799
if i now do this i get the three axis on top of the five axes
如果我现在这样做，我就会得到三轴五个轴的顶部

417
00:31:46,799 --> 00:31:51,679
and before the first x we have a white space so we start to have some kind of
在第一个 x 之前我们有一个白色空间所以我们开始有某种

418
00:31:51,679 --> 00:31:55,440
pyramid shape i just want to continue
金字塔形状我只想继续

419
00:31:55,440 --> 00:32:01,760
i want to print two spaces and an x and if i run the code now
我想打印两个空格和一个 x 和如果我现在运行代码

420
00:32:01,760 --> 00:32:07,440
we can see we have a proper triangle and this would be the top of my tree
我们可以看到我们有一个正确的三角形这将是我的树顶

421
00:32:07,440 --> 00:32:13,120
and now i can copy this line and at the bottom of the tree i can add
现在我可以复制这一行在树的底部我可以添加

422
00:32:13,120 --> 00:32:19,120
it 3 times if i run this now we have a tree this is looking pretty
如果我现在运行这个，它会运行 3 次我们有一棵树，看起来很漂亮

423
00:32:19,120 --> 00:32:23,120
good granted it doesn't look too nice but it
好的当然它看起来不太好但是它

424
00:32:23,120 --> 00:32:26,080
is what it is i suppose
就是这样我想

425
00:32:26,080 --> 00:32:31,519
what we can also do i can just print empty strings with no word inside if i
我们还能做什么 我可以打印空字符串，里面没有单词 if i

426
00:32:31,519 --> 00:32:35,279
do that we have one line of space between the
去做我们之间有一行空间

427
00:32:35,279 --> 00:32:39,840
words we have covered earlier and our tree although one important thing really
我们之前介绍过的单词和我们的树虽然确实是一件重要的事情

428
00:32:39,840 --> 00:32:44,720
quick there is one line in here that i left intentionally empty to
快点，这里有一行我故意留空

429
00:32:44,720 --> 00:32:49,120
organize my code for python this line does not exist if i
组织我的代码对于Python来说，如果我不存在这一行

430
00:32:49,120 --> 00:32:56,159
run the code the empty line we have here is because of this empty statement this
运行我们这里的空行代码是因为这个空语句

431
00:32:56,159 --> 00:33:01,519
one comes right below the one two three this one to three this line for python
一位于一二三的正下方对于Python来说这一行是一到三

432
00:33:01,519 --> 00:33:04,880
is just being ignored meaning if you don't write a line of
只是被忽视意思是如果你不写一行

433
00:33:04,880 --> 00:33:09,519
code python is just going to ignore it which is really helpful to keep your
python 代码会忽略它这对于保持你的

434
00:33:09,519 --> 00:33:14,559
code organized so alright this is then the most fundamental thing you have to
代码组织得很好，然后就是这样你必须做的最基本的事情

435
00:33:14,559 --> 00:33:19,679
understand and it's pretty simple we are just executing code from the top to the
理解，这很简单只是从上到下执行代码

436
00:33:19,679 --> 00:33:22,799
bottom in this part we are going to learn about
底部在这一部分我们将学习

437
00:33:22,799 --> 00:33:28,640
math operations and those are in python fairly similar because you probably
数学运算和那些在Python中相当相似，因为你可能

438
00:33:28,640 --> 00:33:32,320
already know them from basic math classes that you learned when you were
已经从基础数学中了解了它们你小时候学过的课程

439
00:33:32,320 --> 00:33:38,720
something like 5 or 6 it's really basic we have plus minus multiply and divide
5 或 6 之类的东西，这是非常基本的我们有加减乘除

440
00:33:38,720 --> 00:33:43,279
and besides that we also have power floor divide and remainder i guess the
除此之外我们还有力量我猜地板除法和余数

441
00:33:43,279 --> 00:33:48,480
letter 3 are a tiny bit more advanced but not that much
字母 3 稍微高级一些但没那么多

442
00:33:48,480 --> 00:33:52,559
besides that you can also use brackets perfectly fine
除此之外你也可以使用括号，非常好

443
00:33:52,559 --> 00:33:56,880
like in any kind of computer calculator you ever used
就像任何类型的计算机计算器一样你曾经用过

444
00:33:56,880 --> 00:34:01,919
there are also comparison operators like smaller than or smaller equal then
还有比较运算符，例如小于或小于等于然后

445
00:34:01,919 --> 00:34:06,080
but those we will cover later because they work ever so slightly differently i
但我们稍后会介绍这些，因为他们的工作方式略有不同我

446
00:34:06,080 --> 00:34:10,560
guess i can talk about them for a tiny bit but don't worry about those too much
我想我可以稍微谈谈他们有点，但不用担心太多

447
00:34:10,560 --> 00:34:13,440
yet let's have a look at all of this
然而让我们看看这一切

448
00:34:13,440 --> 00:34:17,040
here again i have a completely empty python file
我再次有一个完全空的蟒蛇文件

449
00:34:17,040 --> 00:34:23,679
and i want to start by printing a math operation and this i just do by typing
我想从打印一个数学开始操作，我只需输入即可

450
00:34:23,679 --> 00:34:28,560
the math operation in here for example 10 plus 5
例如这里的数学运算10加5

451
00:34:28,560 --> 00:34:34,639
is going to give me 15. and that is literally it it's quite
会给我 15。这就是字面上的意思，它相当

452
00:34:34,639 --> 00:34:37,919
simple if i duplicate this line
简单的如果我复制这一行

453
00:34:37,919 --> 00:34:43,119
i can change this to a minus and now we get 5.
我可以把它改为减号现在我们得到了 5 个。

454
00:34:43,119 --> 00:34:47,440
i could duplicate this again change this to multiply and duplicate it
我可以再重复一次将其更改为相乘并复制它

455
00:34:47,440 --> 00:34:51,359
once more and change this to divide and that way
再一次并将其更改为除法

456
00:34:51,359 --> 00:34:58,160
we have all the basic operators so if i run this we get 15 5 50 and 2. i
我们拥有所有基本操作员所以如果我运行这个我们会得到 15 5 50 和 2.i

457
00:34:58,160 --> 00:35:02,000
guess the one thing you do want to notice here is that when we're using
猜猜你确实想做的一件事这里要注意的是，当我们使用

458
00:35:02,000 --> 00:35:07,040
division this operation here python is giving us 2.0
除法这里的操作python是给我们2.0

459
00:35:07,040 --> 00:35:12,480
it happens to add a point zero even though we wouldn't need it
它甚至还添加了一个零点虽然我们不需要它

460
00:35:12,480 --> 00:35:17,359
it's really not a big deal but just keep it in mind besides that we have slightly
这真的不是什么大不了的事，但只要保持除此之外，我们还有一点

461
00:35:17,359 --> 00:35:21,280
more advanced math operators let me print
更高级的数学运算符让我打印

462
00:35:21,280 --> 00:35:26,320
10 star star and 5 and this is giving us a
10星星和 5 这给了我们一个

463
00:35:26,320 --> 00:35:30,880
fairly large number because we are taking the power here i
相当大的数量因为我们正在夺取这里的权力

464
00:35:30,880 --> 00:35:35,680
guess if i do a 2 we have the equivalent of 10 to the
猜猜我是否做2我们有相当于 10 的

465
00:35:35,680 --> 00:35:43,040
power of 2 which is 10 multiplied by 10 which is 100
2 的幂，即 10 乘以 10这是 100

466
00:35:43,040 --> 00:35:45,920
and this is what we are getting down here
这就是我们要了解的这里

467
00:35:45,920 --> 00:35:50,400
besides that we also have what is called a floor divide
除此之外我们还有所谓的地板鸿沟

468
00:35:50,400 --> 00:35:56,960
and to understand what that means let me divide 10 by 3. if i do this we
并理解这意味着什么让我将 10 除以 3。如果我这样做，我们

469
00:35:56,960 --> 00:36:02,000
get 3.333 and it continues basically forever
得到3.333并且它基本上永远持续下去

470
00:36:02,000 --> 00:36:07,599
if floor divide essentially gets rid of all of the stuff after the decimal point
如果楼层划分基本上消除了小数点后的所有内容

471
00:36:07,599 --> 00:36:12,400
and this floor divide you get with two divide symbols
这个楼层分为两个除法符号

472
00:36:12,400 --> 00:36:16,960
meaning if i run the code now we are only getting three
意思是如果我现在运行代码只得到三个

473
00:36:16,960 --> 00:36:21,839
you are essentially rounding the result of whatever you are getting in here
你基本上是在四舍五入结果无论你在这里得到什么

474
00:36:21,839 --> 00:36:25,280
although keep in mind this value
尽管请记住这个值

475
00:36:25,280 --> 00:36:29,359
is not rounding the result what we're doing is truncating the
没有对结果进行四舍五入我们正在做的是截断

476
00:36:29,359 --> 00:36:34,079
result which is a fancy word for saying we are cutting off anything after the
结果，这是一个很奇特的词我们将在之后切断任何东西

477
00:36:34,079 --> 00:36:39,359
decimal point i can demonstrate this by dividing 7
小数点我可以通过除 7 来证明这一点

478
00:36:39,359 --> 00:36:43,520
over 2. if you do this in your head you are
超过 2.如果你在脑子里这样做，你就是

479
00:36:43,520 --> 00:36:47,680
going to get 3.5 with a normal division
要拿到3.5 正常除法

480
00:36:47,680 --> 00:36:53,760
and if we were to round this number it should be 4 because 0.5 is closer to 4
如果我们要四舍五入这个数字应该是 4，因为 0.5 更接近 4

481
00:36:53,760 --> 00:36:58,079
than it is to 3 but if i run the code again i am getting
比 3但如果我再次运行代码我得到

482
00:36:58,079 --> 00:37:01,359
3. and just be careful here this can
3.请小心，这可以

483
00:37:01,359 --> 00:37:04,800
sometimes cause you some errors where you're losing decimal points and then
有时会导致一些错误你失去了小数点然后

484
00:37:04,800 --> 00:37:08,480
end up thinking you're rounding when you're not actually doing that
最终认为你正在四舍五入你实际上并没有这样做

485
00:37:08,480 --> 00:37:12,800
there's one more math operation we need and that is done with the percentage
我们还需要一项数学运算这是用百分比来完成的

486
00:37:12,800 --> 00:37:16,240
sign for example this could look like seven
符号例如，这可能看起来像七个

487
00:37:16,240 --> 00:37:20,640
percentage two and if i run this let's see what we get
百分比二如果我运行这个让我们看看我们会得到什么

488
00:37:20,640 --> 00:37:26,640
we are getting one and this one here is the remainder
我们正在得到一个这是剩下的

489
00:37:26,640 --> 00:37:32,960
the best way to think about it is we have seven units in total
最好的思考方式是我们一共有七个单位

490
00:37:32,960 --> 00:37:38,720
we have one two three four five six and seven
我们有一二三四五六七

491
00:37:38,720 --> 00:37:43,200
and when we are dividing seven by two we are basically looking for two whole
当我们将七除以二时我们基本上是在寻找两个完整的

492
00:37:43,200 --> 00:37:47,359
units to get a full number meaning here is one
单位以获得完整的数字这里的意思是一个

493
00:37:47,359 --> 00:37:51,599
there is two and here is 3.
有两个这里是 3。

494
00:37:51,599 --> 00:37:55,839
and that is giving us the result we got from this operation
这就是我们得到的结果从这个操作

495
00:37:55,839 --> 00:37:58,000
and this
和这

496
00:37:58,000 --> 00:38:02,960
percentage symbol is giving us whatever remains at the end which is this one
百分比符号给了我们任何东西留在最后，就是这个

497
00:38:02,960 --> 00:38:09,520
here and since this is one the one we're getting down here is well a one
在这里，因为这就是我们的到这里来是很好的一件事

498
00:38:09,520 --> 00:38:14,079
you don't see this symbol too often but it can be really useful to figure out if
你不会经常看到这个符号，但是弄清楚是否真的很有用

499
00:38:14,079 --> 00:38:18,720
a number is even or odd something you do surprisingly often we're going to have a
数字是偶数还是奇数 你所做的事情令人惊讶的是，我们经常会遇到

500
00:38:18,720 --> 00:38:22,640
look at that later there's one more thing i do want to
稍后看看我还想做一件事

501
00:38:22,640 --> 00:38:27,520
cover and that is brackets for example i could print
盖，即括号例如我可以打印

502
00:38:27,520 --> 00:38:31,119
5 times 2 and the result
5 次 2和结果

503
00:38:31,119 --> 00:38:34,960
is going to be 10 this should be fairly simple
将会是 10 这应该是相当的简单的

504
00:38:34,960 --> 00:38:40,880
but now if i do 5 plus 5 multiplied by 2 think about it for a second and see what
但现在如果我做 5 加 5 乘以 2想一想，看看会发生什么

505
00:38:40,880 --> 00:38:48,960
you should be getting the result is 15 and it is 15 because we
你应该得到结果是 15，它是 15 因为我们

506
00:38:48,960 --> 00:38:54,960
always do multiplication first and then we are doing addition and subtraction
总是先做乘法，然后再做乘法我们正在做加法和减法

507
00:38:54,960 --> 00:39:02,240
meaning this operation is basically 5 plus 10 which gets us 15.
意思是这个操作基本上是5加 10 就得到 15。

508
00:39:02,240 --> 00:39:07,280
if i don't want to do that and add 5 plus 5 first of all i have to put both
如果我不想这样做并添加 5加 5 首先我必须把两者都加上

509
00:39:07,280 --> 00:39:11,599
of those into brackets and now i'm getting 20.
将那些放入括号中，现在我是得到20。

510
00:39:11,599 --> 00:39:17,280
what we're doing now is 5 plus 5 is 10 and this we multiply with 2 which is
我们现在做的是 5 加 5 等于 10我们将其乘以 2，即

511
00:39:17,280 --> 00:39:22,880
getting us 20. i guess the one thing we can also cover
给我们20个。我想我们还可以讨论一件事

512
00:39:22,880 --> 00:39:29,280
is very simple comparison operators and those do work in the same way that
非常简单的比较运算符这些的工作原理与

513
00:39:29,280 --> 00:39:34,160
you would expect them to work to be honest for example i could type 10
你会期望他们能够工作老实说，例如我可以输入 10

514
00:39:34,160 --> 00:39:39,280
is greater than 5. the difference here is the result we are
大于5。这里的区别就是我们的结果

515
00:39:39,280 --> 00:39:43,520
getting because the result we're getting is true
得到因为我们得到的结果是真的

516
00:39:43,520 --> 00:39:48,160
which i guess doesn't make sense because 10 indeed is greater than 5.
我想这没有意义，因为10确实大于5。

517
00:39:48,160 --> 00:39:52,400
if i flip this around that 10 is smaller than 5 and run the
如果我翻转这个10 小于 5 并运行

518
00:39:52,400 --> 00:39:55,920
code again we are getting false
再次编码我们变得虚假了

519
00:39:55,920 --> 00:40:01,119
and how we can use these values we will see later on but for now don't worry too
以及我们将如何使用这些价值观稍后见，但现在也不必担心

520
00:40:01,119 --> 00:40:05,200
much about this one now with that we have covered the basic
关于这个的很多现在我们已经介绍了基本的

521
00:40:05,200 --> 00:40:08,960
operations and let's do an exercise
运营让我们做一个练习

522
00:40:08,960 --> 00:40:13,920
what i want you guys to do is to get the average of the numbers from one to seven
我希望你们做的是得到从 1 到 7 的数字的平均值

523
00:40:13,920 --> 00:40:17,920
so one plus two plus three plus four plus five plus six plus seven all
所以一加二加三加四加五加六加七全部

524
00:40:17,920 --> 00:40:22,480
divided by seven and see how far you
除以七看看你有多远

525
00:40:22,839 --> 00:40:30,000
get once again i have to type print and now in here i want one plus two plus
我必须再次输入 print 并现在在这里我想要一加二加

526
00:40:30,000 --> 00:40:37,359
three plus four plus five plus six plus seven
三加四加五加六加七

527
00:40:37,359 --> 00:40:42,480
and all of this has to be inside of brackets because what we're going to do
所有这些都必须在里面括号里是因为我们要做的

528
00:40:42,480 --> 00:40:49,280
afterwards is divide all of this by 7. and the issue is in terms of math if we
然后将所有这些除以 7。问题在于数学，如果我们

529
00:40:49,280 --> 00:40:53,760
left it like this we would first divide seven by seven which would be one and
像这样我们首先要分开七乘七，即一和

530
00:40:53,760 --> 00:40:58,560
then we are adding all of these numbers but what we want to do instead
然后我们将所有这些数字相加但我们想做的是

531
00:40:58,560 --> 00:41:04,400
is do all of this here first and then divide it by seven
首先在这里完成所有这一切然后除以七

532
00:41:04,400 --> 00:41:08,880
for this sort of thing sublime is quite intelligent i can just select the entire
对于这种事情来说，崇高是相当的聪明的我可以选择整个

533
00:41:08,880 --> 00:41:12,640
text create and open brackets and then
文本创建并打开括号，然后

534
00:41:12,640 --> 00:41:16,640
sublime automatically adds the closing bracket afterwards
sublime自动添加结束语之后括号

535
00:41:16,640 --> 00:41:23,839
and with that we are done if i execute the code now we get 4.0
如果我执行的话我们就完成了现在我们得到的代码是 4.0

536
00:41:23,839 --> 00:41:29,200
although looking at the result here i realized for this entire part so far i
虽然在这里看结果我到目前为止我已经实现了整个部分

537
00:41:29,200 --> 00:41:34,560
have only ever used full numbers which you don't have to it is perfectly fine
只使用过完整的数字你不必这样做，完全没问题

538
00:41:34,560 --> 00:41:38,160
to write something like one plus one plus five
写一加一之类的东西加五

539
00:41:38,160 --> 00:41:42,880
you would still get the appropriate result any number in here is going to be
你仍然会得到适当的结果这里的任何数字都会是

540
00:41:42,880 --> 00:41:48,480
fine this is working like any math operation you have ever seen
很好，这就像任何数学一样你见过的操作

541
00:41:48,480 --> 00:41:53,680
in this part we are going to talk about how to connect different lines of code
在这一部分我们将讨论如何连接不同行的代码

542
00:41:53,680 --> 00:41:58,000
and let me explain the problem let's say we have some kind of math
让我解释一下问题假设我们有某种数学知识

543
00:41:58,000 --> 00:42:01,359
operation and we want to print the result of that
手术我们想要打印结果

544
00:42:01,359 --> 00:42:06,160
map operation on the next line the issue we have now is how can we
下一行的映射操作我们现在面临的问题是我们怎样才能

545
00:42:06,160 --> 00:42:11,680
connect these two lines and the answer here is we are going to
连接这两行答案是我们要

546
00:42:11,680 --> 00:42:15,359
need variables and variables are an incredibly
需要变量变量是一个令人难以置信的

547
00:42:15,359 --> 00:42:18,720
important topic in any programming language
任何编程中的重要主题语言

548
00:42:18,720 --> 00:42:24,319
so let's talk about it all that variables essentially are is a
那么我们来谈谈吧所有变量本质上都是

549
00:42:24,319 --> 00:42:30,560
simple container for any kind of data we could for example put a word a number
适用于任何类型数据的简单容器例如，我们可以把一个词放在一个数字上

550
00:42:30,560 --> 00:42:34,000
or really anything we have a python in there
或者任何我们有Python的东西那里

551
00:42:34,000 --> 00:42:39,359
and once you have created this container you can reuse it over and over again
一旦你创建了这个容器你可以一遍又一遍地重复使用它

552
00:42:39,359 --> 00:42:44,720
and this variable you create like this we have the variable name
你像这样创建这个变量我们有变量名

553
00:42:44,720 --> 00:42:49,119
then we have the assign operator and that is just an equal sign and then we
然后我们有赋值运算符和这只是一个等号然后我们

554
00:42:49,119 --> 00:42:52,720
have the actual data or the value we want to assign
有实际数据或我们的值想要分配

555
00:42:52,720 --> 00:42:57,440
and that is basically it this instead of a word could also be a
基本上就是这样这个代替单词也可以是

556
00:42:57,440 --> 00:43:01,359
number like one and it could be anything else
像一这样的数字，它可以是任何东西别的

557
00:43:01,359 --> 00:43:06,000
but how you would solve the earlier problem is you would first store the
但你会如何解决之前的问题问题是你首先要存储

558
00:43:06,000 --> 00:43:09,839
math operation result in a variable called result
数学运算结果为变量调用结果

559
00:43:09,839 --> 00:43:14,160
and then this result you would print on the next line
然后你将打印这个结果下一行

560
00:43:14,160 --> 00:43:18,000
and i suppose let's actually try all of this
我想我们应该尝试一下所有的这

561
00:43:18,000 --> 00:43:23,200
once more completely empty python file and in here i want to do a map operation
再次完全空的 python 文件在这里我想做一个地图操作

562
00:43:23,200 --> 00:43:29,040
again and so far we always used print and then did some math in here let's say
到目前为止我们总是使用打印然后在这里做了一些数学假设

563
00:43:29,040 --> 00:43:34,800
ten plus five but this print we don't need
十加五但我们不需要这个印刷品

564
00:43:34,800 --> 00:43:39,520
we could just have lines like this although if i execute the code now again
我们可以有这样的行虽然如果我现在再次执行代码

565
00:43:39,520 --> 00:43:43,359
by pressing ctrl b nothing would happen
按 ctrl b什么都不会发生

566
00:43:43,359 --> 00:43:46,800
although something did happen python did
虽然确实发生了一些事情 python 确实发生了

567
00:43:46,800 --> 00:43:50,800
calculate the result here we just didn't tell to print the result
在这里计算结果我们只是没有告诉打印结果

568
00:43:50,800 --> 00:43:55,040
so it doesn't print a result and we can't see anything but something did
所以它不会打印结果，我们看不到任何东西，但有一些东西发生了

569
00:43:55,040 --> 00:43:59,280
indeed happen instead of printing this result i want to store it in the
确实发生了而不是打印这个结果我想将它存储在

570
00:43:59,280 --> 00:44:03,920
variable and this variable i called result
多变的这个变量我称之为结果

571
00:44:03,920 --> 00:44:07,119
and this is going to be the name of my variable now
这将是我的名字现在可变

572
00:44:07,119 --> 00:44:11,599
and now to assign this value here to this result
现在将此值分配给这个结果

573
00:44:11,599 --> 00:44:16,400
we are going to need the equals sign
我们需要等号

574
00:44:16,400 --> 00:44:20,800
which is telling python that the result of this operation should be assigned to
这告诉 python 结果此操作应分配给

575
00:44:20,800 --> 00:44:25,280
this variable and now on the next line we can just
这个变量现在在下一行我们可以

576
00:44:25,280 --> 00:44:31,040
print that result and if i run the code now we are getting
打印该结果如果我现在运行代码我们会得到

577
00:44:31,040 --> 00:44:36,720
15 or the result of this operation here and
15或此处操作的结果和

578
00:44:36,720 --> 00:44:40,800
what is even better we could use this result for further
还有什么更好的我们可以利用这个结果进行进一步的研究

579
00:44:40,800 --> 00:44:45,839
operations and we would use it like the actual value
操作，我们会像使用它一样实际价值

580
00:44:45,839 --> 00:44:50,960
for example what i could be doing i could have another variable let's call
例如我可以做什么我可以有另一个变量让我们调用

581
00:44:50,960 --> 00:44:56,319
it result 2 and the value here should be the original result
结果是 2，这里的值应该是原始结果

582
00:44:56,319 --> 00:45:02,079
divided by 2. and if i now print result 2
除以 2。如果我现在打印结果 2

583
00:45:02,079 --> 00:45:09,680
we can see we get 15 and 7.5 which is this result divided by 2.
我们可以看到我们得到 15 和 7.5就是这个结果除以 2。

584
00:45:09,680 --> 00:45:15,760
and this we could do forever this result is basically a stand in for the value we
我们可以永远这样做这个结果基本上代表了我们的价值

585
00:45:15,760 --> 00:45:20,160
have created here although there's one thing you do want
在这里创建了虽然有一件事你确实想要

586
00:45:20,160 --> 00:45:25,200
to be careful about and that is variable naming let's talk about this one really
要小心，这是可变的命名让我们真正谈谈这个

587
00:45:25,200 --> 00:45:30,720
quick there are two variable naming parts the first one is the mandatory
快速有两个变量命名第一个部分是强制性的

588
00:45:30,720 --> 00:45:34,880
parts that you have to follow if you do not follow these naming conventions
如果您这样做，则必须遵循的部分不遵循这些命名约定

589
00:45:34,880 --> 00:45:40,240
python is going to throw an error and fortunately they are fairly simple
python 会抛出一个错误幸运的是它们相当简单

590
00:45:40,240 --> 00:45:45,280
the most important one is that variable names can only contain letters numbers
最重要的是这个变量名称只能包含字母数字

591
00:45:45,280 --> 00:45:48,720
and the underscore symbol you couldn't use something like the
和下划线符号你不能使用类似的东西

592
00:45:48,720 --> 00:45:54,000
dollar sign percentage space something like this space in particular should
美元符号百分比空间某物特别喜欢这个空间

593
00:45:54,000 --> 00:45:59,200
make sense quite intuitively if there's a space in a variable name it's really a
如果有的话，很直观地有意义变量名中的空格实际上是一个

594
00:45:59,200 --> 00:46:04,880
python to tell if we have one variable or two variables it just gets messy
python 判断我们是否有一个变量或两个变量，它只会变得混乱

595
00:46:04,880 --> 00:46:09,119
and if you have a longer variable name and you want to add multiple words
如果你有一个更长的变量名并且您想添加多个单词

596
00:46:09,119 --> 00:46:13,520
together you would use an underscore and that is quite a common thing to do i
一起使用下划线和这是我经常做的事情

597
00:46:13,520 --> 00:46:18,240
will show you in a second the second rule is a variable name must
稍后会向您展示第二条规则是变量名必须

598
00:46:18,240 --> 00:46:23,200
start with a letter or an underscore the important thing here is numbers are not
以字母或下划线开头重要的是数字不是

599
00:46:23,200 --> 00:46:28,880
allowed a variable name cannot start with a number finally variable names
允许变量名无法启动最后带有数字变量名

600
00:46:28,880 --> 00:46:33,440
must be different from the inbuilt python tools for example we couldn't
必须与内置的不同例如，我们不能使用 python 工具

601
00:46:33,440 --> 00:46:37,520
name a variable print i hope this one makes sense as well it
命名变量 print我希望这个也有意义

602
00:46:37,520 --> 00:46:42,560
would just be confusing and i guess let's have a look at all of
只会让人困惑我想让我们看一下所有的

603
00:46:42,560 --> 00:46:46,319
these rules and see if we can play around with them
这些规则，看看我们是否可以玩和他们在一起

604
00:46:46,319 --> 00:46:50,560
i want to create a new variable let me call it test
我想创建一个新变量让我称之为测试

605
00:46:50,560 --> 00:46:55,839
and then here we can just add a word test it doesn't really matter
然后在这里我们可以添加一个词测试一下其实并不重要

606
00:46:55,839 --> 00:47:00,000
if i run this code now we are not getting an error because this
如果我现在运行这段代码我们没有收到错误，因为这个

607
00:47:00,000 --> 00:47:06,319
variable name here is perfectly fine and i could also add an underscore add
这里的变量名完全没问题我还可以添加下划线

608
00:47:06,319 --> 00:47:12,400
some numbers add another underscore and add some capital
有些数字添加另一个下划线并且添加一些资本

609
00:47:13,280 --> 00:47:17,599
letters all of this for python totally fine
字母所有这些对于 python 来说都很好

610
00:47:17,599 --> 00:47:21,839
although this name here probably really confusing
虽然这个名字在这里可能真的很令人困惑

611
00:47:21,839 --> 00:47:27,119
what python doesn't like let me put this on the next line is if we for example
python 不喜欢什么让我把这个下一行是如果我们例如

612
00:47:27,119 --> 00:47:32,079
start with a number for the variable let's say to test
以变​​量的数字开头假设要测试

613
00:47:32,079 --> 00:47:36,079
and the value here could be test again it doesn't matter
这里的值可以再次测试没关系

614
00:47:36,079 --> 00:47:40,400
if i run this now we are getting a syntax error
如果我现在运行这个我们收到语法错误

615
00:47:40,400 --> 00:47:44,480
oh well we are getting quite a bit let's actually go through this error message
哦，好吧，我们已经得到了很多让我们实际上查看这个错误消息

616
00:47:44,480 --> 00:47:47,359
here first of all python is telling me which
这里首先 python 告诉我哪个

617
00:47:47,359 --> 00:47:51,680
file has caused the error and also it's telling me on what line
文件导致了错误它还告诉我在哪一行

618
00:47:51,680 --> 00:47:58,079
the error occurred line 8 in this case which you can see here on the left side
在这种情况下，错误发生在第 8 行你可以在左侧看到

619
00:47:58,079 --> 00:48:03,200
besides that i also get the actual line that caused the error so 2 test is equal
除此之外我还得到了实际的线路这导致了错误，所以 2 个测试是相等的

620
00:48:03,200 --> 00:48:07,119
to test and below that we have the really
去测试下面我们有真正的

621
00:48:07,119 --> 00:48:10,480
important information and that is
重要信息那就是

622
00:48:10,480 --> 00:48:15,200
this syntax error invalid decimal literal it sounds
这个语法错误听起来无效的十进制文字

623
00:48:15,200 --> 00:48:19,520
somewhat cryptic but what python is complaining about here is that we are
有点神秘，但是 python 是什么这里抱怨的是我们

624
00:48:19,520 --> 00:48:24,559
starting a variable name with a letter however if i change this to
以字母开头的变量名但是如果我将其更改为

625
00:48:24,559 --> 00:48:29,440
2 test everything is working just fine again
2 测试一切又恢复正常了

626
00:48:29,440 --> 00:48:34,079
and on top of that adding a number anywhere else inside of the variable
并在此基础上添加一个数字变量内的其他任何地方

627
00:48:34,079 --> 00:48:38,160
name is perfectly fine i could for example add the two at the end this
名字很好我可以例如在最后添加两个

628
00:48:38,160 --> 00:48:42,000
would also work just fine the other thing that you are really not
也会工作得很好另一件你其实不是的事

629
00:48:42,000 --> 00:48:45,680
allowed to do is to add spaces in your variable name
允许做的就是在你的变量名

630
00:48:45,680 --> 00:48:50,800
and if i run this one now we are getting invalid syntax again
如果我现在运行这个，我们会得到语法再次无效

631
00:48:50,800 --> 00:48:55,839
and here python is giving me a ton more information although it really doesn't
python 给了我更多信息虽然实际上没有

632
00:48:55,839 --> 00:48:59,599
tell me all that much this line here is the really important
告诉我这么多这行非常重要

633
00:48:59,599 --> 00:49:04,000
one and i think it does make sense why
一我认为这确实有道理

634
00:49:04,000 --> 00:49:08,000
there's no space allowed if we have something like this it looks
没有空间允许如果我们有这样的东西看起来

635
00:49:08,000 --> 00:49:12,400
like we have two separate variables which obviously would be kind of
就像我们有两个独立的变量这显然是一种

636
00:49:12,400 --> 00:49:17,920
confusing so what programmers i usually do in basically any programming language
我通常对程序员感到困惑基本上可以用任何编程语言进行

637
00:49:17,920 --> 00:49:23,040
is they always add underscore signs to show that we want to add a space
他们总是添加下划线符号表明我们要添加一个空格

638
00:49:23,040 --> 00:49:27,200
but with that we have all of the basics for variable naming or at the very least
但这样我们就具备了所有基础知识用于变量命名或至少

639
00:49:27,200 --> 00:49:30,880
the mandatory parts there are some more that are more
强制性部分还有一些更多的

640
00:49:30,880 --> 00:49:35,920
optional let's talk about those the most common rule that you are going
可选的让我们来谈谈那些你要去的最常见的规则

641
00:49:35,920 --> 00:49:42,079
to see is that you should use snake case and snake case just means
看到的是你应该使用蛇盒蛇的情况只是意味着

642
00:49:42,079 --> 00:49:46,960
that when you are starting a new word you always start with lowercase
当你开始一个新单词时你总是以小写开头

643
00:49:46,960 --> 00:49:51,280
and every additional word always is lowercase you basically only use
每一个额外的词总是你基本上只使用小写

644
00:49:51,280 --> 00:49:55,040
lowercase letters and then to connect words you're using
小写字母然后连接你正在使用的单词

645
00:49:55,040 --> 00:50:00,800
the underscore and this one you have to use anyway since this is a python rule
下划线和这个你必须无论如何使用，因为这是一个Python规则

646
00:50:00,800 --> 00:50:05,040
what snare case basically means is you are always going to use lowercase
军鼓盒基本上意味着你总是会使用小写

647
00:50:05,040 --> 00:50:09,839
letters and space is replaced with an underscore that's all it means
字母和空格被替换为下划线就是这个意思

648
00:50:09,839 --> 00:50:15,599
besides that the other rule is that variable names should make sense
除此之外，另一条规则是变量名应该有意义

649
00:50:15,599 --> 00:50:20,480
this sounds very obvious but i can show you a couple of examples in just a
这听起来很明显，但我可以证明举几个例子

650
00:50:20,480 --> 00:50:25,520
second that might get very confusing generally it's fine to have longer
第二个可能会变得非常混乱一般来说，时间长一点就好了

651
00:50:25,520 --> 00:50:30,960
variable names but make sure that the variable name expresses its content
变量名，但请确保变量名表达其内容

652
00:50:30,960 --> 00:50:34,880
it's very easy to not do that and end up with code that you do not understand
很容易不这样做并最终结束用你不理解的代码

653
00:50:34,880 --> 00:50:38,800
anymore so always write long names that express
不再所以总是写长名字来表达

654
00:50:38,800 --> 00:50:43,119
what the variable actually does and finally variable names should be
变量实际上做了什么以及最后变量名应该是

655
00:50:43,119 --> 00:50:48,480
consistent i suppose this one is pretty obvious
持续的我想这很明显

656
00:50:48,480 --> 00:50:53,040
and i guess the really important one is this one here because this one is
我想真正重要的是这个在这里，因为这个是

657
00:50:53,040 --> 00:50:56,480
looking terrible if you were working with other people
看起来很糟糕如果你和其他人一起工作

658
00:50:56,480 --> 00:51:01,760
and try to name a variable like this you would have some questions about your
并尝试像这样命名一个变量你会对你的问题有一些疑问

659
00:51:01,760 --> 00:51:07,920
mental wellness i suppose something better would be more like test
我认为心理健康更好的东西更像是测试

660
00:51:07,920 --> 00:51:11,599
variable and let's call it practice
多变的我们称之为练习

661
00:51:11,599 --> 00:51:17,520
this one here would be a perfectly fine variable name it isn't a snake case
这里的这个就很好了变量名不是蛇形的

662
00:51:17,520 --> 00:51:21,040
because we have lowercase letters and we are connecting the words with an
因为我们有小写字母将单词与

663
00:51:21,040 --> 00:51:27,040
underscore and this one here would also be at least a valid python name but we
下划线，这里的这个也会至少是一个有效的 python 名称，但我们

664
00:51:27,040 --> 00:51:31,280
are kind of inconsistent we are first writing a word with letters and then the
有点不一致，我们是第一用字母写一个单词，然后

665
00:51:31,280 --> 00:51:35,040
actual number so what you might want to do here is
实际数量所以你可能想要在这里做的是

666
00:51:35,040 --> 00:51:40,559
write 2 a bit more consistently or don't use any numbers when variable names
写 2 更加一致，或者不写变量名时使用任意数字

667
00:51:40,559 --> 00:51:45,680
begin and always stick with numbers whatever you prefer just be consistent
开始并始终坚持数字无论你喜欢什么，只要保持一致

668
00:51:45,680 --> 00:51:49,839
it really helps the final thing i really want to mention
这确实有帮助我真正想提的最后一件事

669
00:51:49,839 --> 00:51:55,520
what i see a lot of beginners do is do something like x equals i don't know
我看到很多初学者所做的就是像 x 等于我不知道

670
00:51:55,520 --> 00:51:57,920
some words
一些字

671
00:51:57,920 --> 00:52:03,200
and this is fine for shorter programs but once you have longer ones it can be
这对于较短的程序来说很好但一旦你有更长的

672
00:52:03,200 --> 00:52:06,720
really confusing meaning you want to replace this with
真的很混乱意思是你想用它替换它

673
00:52:06,720 --> 00:52:11,440
something that actually means something it is a really common thing that you
真正有意义的东西这是很常见的事情

674
00:52:11,440 --> 00:52:14,880
write a program you don't look at the program for half a year then you come
写一个你不看的程序计划半年然后你来

675
00:52:14,880 --> 00:52:19,200
back to the program and you have no idea what you did half a year ago
回到程序，你不知道半年前你做了什么

676
00:52:19,200 --> 00:52:24,240
happens to literally every programmer and naming your variables properly makes
几乎每个程序员都会遇到这样的情况并正确命名你的变量使得

677
00:52:24,240 --> 00:52:28,000
it a lot easier to read what your code actually does
更容易阅读你的代码实际上确实如此

678
00:52:28,000 --> 00:52:32,160
so name your variables properly there's one more thing that i really
所以正确命名你的变量还有一件事我真的

679
00:52:32,160 --> 00:52:36,240
want to do because now that we have variables we get a few more math
想做，因为现在我们有了变量我们得到更多的数学

680
00:52:36,240 --> 00:52:41,839
operations although those math operations are going
运营尽管那些数学运算正在进行

681
00:52:41,839 --> 00:52:46,079
to look a bit weird they are looking like this we have plus
看起来有点奇怪他们看起来像这样，我们有加号

682
00:52:46,079 --> 00:52:50,400
equal minus equal divide equal and multiply equal
等于减等于除等于并且乘以相等

683
00:52:50,400 --> 00:52:54,880
i think to explain what they do let's do an example
我想解释一下他们做了什么让我们做吧一个例子

684
00:52:54,880 --> 00:53:00,960
let's say i have num one is equal to one a really basic variable and i want to
假设我有 num 一等于 1一个非常基本的变量，我想要

685
00:53:00,960 --> 00:53:06,480
increase the value of this num by a certain amount for example let's say by
将此 num 的值增加 a一定数量例如让我们说

686
00:53:06,480 --> 00:53:09,440
5. to do that
5.要做到这一点

687
00:53:09,440 --> 00:53:15,680
i could write some code like this that num1 is itself plus 5.
我可以写一些这样的代码num1 本身加 5。

688
00:53:15,680 --> 00:53:19,839
and this would be fine but this also feels kind of clumsy
这很好，但这也感觉有点笨拙

689
00:53:19,839 --> 00:53:23,440
and for that we have these operators here
为此我们有这些运算符这里

690
00:53:23,440 --> 00:53:26,880
what you would do instead in python is something like this
在 python 中你会做的是像这样的东西

691
00:53:26,880 --> 00:53:31,599
we have num itself then plus equal 5
我们有 num 本身然后加上等于 5

692
00:53:31,599 --> 00:53:36,160
and those two code snippets here do exactly the same
和那两个这里的代码片段的作用完全相同

693
00:53:36,160 --> 00:53:41,200
thing they take the original variable and then add a certain value to it
他们采用原始变量然后给它加上一定的值

694
00:53:41,200 --> 00:53:44,400
let's do this in code actually i think that's going to make more sense
实际上我认为让我们在代码中做到这一点这会更有意义

695
00:53:44,400 --> 00:53:49,520
i want to create another variable let me call it num1 and by default this one is
我想创建另一个变量让我称之为 num1，默认情况下这个是

696
00:53:49,520 --> 00:53:54,319
10. and now this 10 i want to increase by 5
10.现在这个 10 我想增加 5

697
00:53:54,319 --> 00:53:56,400
again and
再次和

698
00:53:56,400 --> 00:54:00,559
this could look like this i want to get my original num1 and then
这可能看起来像这样我想得到我原来的 num1 然后

699
00:54:00,559 --> 00:54:03,119
add 5 to it
添加5 到它

700
00:54:03,119 --> 00:54:06,960
if i now print num 1
如果我现在打印数字 1

701
00:54:06,960 --> 00:54:10,400
we are getting the value all the way at the end which is 15 again
我们一直在获得价值结局又是15

702
00:54:10,400 --> 00:54:15,359
i guess let me use different numbers so we get some different results
我想让我使用不同的数字我们得到一些不同的结果

703
00:54:15,359 --> 00:54:20,400
now we get 20 which is 10 the value of num1 plus 10.
现在我们得到 20，即 10 的值num1 加 10。

704
00:54:20,400 --> 00:54:28,000
but again this here is kind of clumsy and python gets around this biting plus
但这又有点笨拙python 绕过了这个棘手的问题

705
00:54:28,000 --> 00:54:34,559
equal and then we are adding 10 meaning now we are taking the original
等于然后我们加上 10意思是现在我们正在采用原始的

706
00:54:34,559 --> 00:54:41,040
value of num1 and adding 10 towards it and assigning all of this again to num1
num1 的值并加 10并将所有这些再次分配给 num1

707
00:54:41,040 --> 00:54:44,880
and if i run this we are getting the same result
如果我运行这个我们会得到相同的结果

708
00:54:44,880 --> 00:54:47,839
so if i spell this out
所以如果我把这个拼出来

709
00:54:47,839 --> 00:54:53,280
a bit better these two lines here are doing the exact
好一些这两行在这里做的正是

710
00:54:53,280 --> 00:54:56,160
same thing and this is working with the other math
一样这是与其他数学一起工作的

711
00:54:56,160 --> 00:55:02,160
operators as well for example we could have minus equal and we are getting zero
运营商以及例如我们可以负数等于，我们得到零

712
00:55:02,160 --> 00:55:06,720
we could add multiply equal which is getting us a hundred and we
我们可以加上乘法等于这让我们得到了一百，我们

713
00:55:06,720 --> 00:55:10,640
have divide equal which is getting us one
平分秋色，这让我们一

714
00:55:10,640 --> 00:55:15,280
and if you just want to update a variable this is how you would do it
如果您只想更新变量 这就是你要做的

715
00:55:15,280 --> 00:55:20,880
and this is now bringing us to the exercise for this part and what i want
现在我们就到了这部分的练习以及我想要的

716
00:55:20,880 --> 00:55:26,640
you guys to do is to create a variable that has some kind of snake case and try
你们要做的就是创建一个变量有某种蛇盒并尝试

717
00:55:26,640 --> 00:55:31,200
to use a bit of a longer word assign a value to it and on the next
使用更长一点的词为其分配一个值并在下一个

718
00:55:31,200 --> 00:55:36,880
line increase this value by 20 and then on the third line print the
行将该值增加 20然后在第三行打印

719
00:55:36,880 --> 00:55:39,440
variable
多变的

720
00:55:41,040 --> 00:55:45,839
let's get started by creating a really long
让我们开始创建一个真的很长

721
00:55:45,839 --> 00:55:48,799
variable name
多变的姓名

722
00:55:48,799 --> 00:55:50,960
that is
那是

723
00:55:50,960 --> 00:55:53,440
a bit
A少量

724
00:55:53,440 --> 00:55:57,920
annoying obviously you would never use something
恼人的显然你永远不会使用某些东西

725
00:55:57,920 --> 00:56:01,280
like this in practice but i hope you get the idea
在实践中就像这样，但我希望你能得到这个想法

726
00:56:01,280 --> 00:56:05,920
and the value i want to assign is let's go with 10.
我想要分配的值是让我们和 10 一起去。

727
00:56:05,920 --> 00:56:09,760
on the next line i want to get my really long variable
在下一行我想得到我的很长的变量

728
00:56:09,760 --> 00:56:14,480
name that is a bit annoying and i realized i do have a typo let me fix it
名字有点烦人，我意识到我确实有一个拼写错误，让我修复它

729
00:56:14,480 --> 00:56:21,200
really quick and i want to increase this value so i want plus equal and i think i
真的很快，我想增加这个值所以我想要加等于并且我想我

730
00:56:21,200 --> 00:56:26,400
said 20. and now finally i want to print my
说20。现在我终于想打印我的

731
00:56:26,400 --> 00:56:29,280
really long variable name that is a bit annoying
变量名真的有点长恼人的

732
00:56:29,280 --> 00:56:34,799
and if i print this we are getting 30. and with that we have variables which is
如果我打印这个我们会得到 30。这样我们就有了变量

733
00:56:34,799 --> 00:56:39,920
an incredibly important concept in this part we are going to talk about
一个极其重要的概念在这一部分我们将讨论

734
00:56:39,920 --> 00:56:43,920
functions and all that functions are are special
功能所有的功能都是特殊的

735
00:56:43,920 --> 00:56:49,839
commands in python we have actually seen one already and that is print which is
我们实际见过的Python命令已经有一个了，那就是打印

736
00:56:49,839 --> 00:56:53,920
printing a certain kind of text this one you should be really familiar with at
打印某种文本你应该非常熟悉

737
00:56:53,920 --> 00:56:57,599
this point but there are quite a few more for
这点但还有很多

738
00:56:57,599 --> 00:57:01,599
example len gives you the amount of characters in a word
例如 len 给出的数量单词中的字符

739
00:57:01,599 --> 00:57:07,680
and another one would be abs or absolute which is giving you the absolute number
另一种是abs 或absolute这给了你绝对数字

740
00:57:07,680 --> 00:57:14,160
which in practice just means if we have a negative one and we're using apps this
这实际上意味着如果我们有负面的，我们正在使用这个应用程序

741
00:57:14,160 --> 00:57:18,640
is turning into a one although to understand functions we need
正在变成一个尽管为了理解我们需要的功能

742
00:57:18,640 --> 00:57:23,040
one really important concept and that is brackets
一个非常重要的概念，那就是括号

743
00:57:23,040 --> 00:57:26,400
meaning when we're adding brackets after the name of the function
意思是当我们在后面添加括号时函数的名称

744
00:57:26,400 --> 00:57:30,160
we are calling it and this we have done multiple times
我们称之为我们已经做过很多次了

745
00:57:30,160 --> 00:57:35,280
already anytime we use print we have called a function by adding brackets
每当我们使用印刷品时，我们就有通过添加括号来调用函数

746
00:57:35,280 --> 00:57:40,640
afterwards and inside of the brackets we are adding what is called arguments
之后在括号内我们添加所谓的参数

747
00:57:40,640 --> 00:57:45,280
for example for print we can add any kind of argument and this is then what
例如对于打印我们可以添加任何一种争论，这就是

748
00:57:45,280 --> 00:57:48,880
we are going to print in the case of well print
我们将在以下情况下打印印刷得好

749
00:57:48,880 --> 00:57:54,480
and let's have a look at all of this in code i want to once again start with
让我们看看这一切我想再次开始的代码

750
00:57:54,480 --> 00:57:57,520
print and this is the name of the function
打印，这是的名称功能

751
00:57:57,520 --> 00:58:03,200
and to call it i need brackets and what we're adding in here is the
为了称呼它，我需要括号我们在这里添加的是

752
00:58:03,200 --> 00:58:06,799
argument which right now is the word which
现在这个词的争论哪个

753
00:58:06,799 --> 00:58:12,960
that's called test and what this function does is it prints the word so
这就是所谓的测试，这是什么函数的作用是打印单词 so

754
00:58:12,960 --> 00:58:19,119
we can see it another function that we can use is called len and in here
我们可以看到它的另一个函数可以使用叫做 len 的东西，在这里

755
00:58:19,119 --> 00:58:24,240
we could add another word if i run the code now we can't see
我们可以添加另一个如果我现在运行代码我们就看不到

756
00:58:24,240 --> 00:58:29,520
any result because this is only giving us a value but we're not doing anything
任何结果，因为这只是给出我们有一个价值观，但我们什么也没做

757
00:58:29,520 --> 00:58:34,720
with that value and to overcome that we have to print the result
具有这种价值并克服我们必须打印结果

758
00:58:34,720 --> 00:58:41,920
and now if we run this we are getting 12 and this 12 means that inside of this
现在如果我们运行这个我们会得到 12这个 12 意味着在这个里面

759
00:58:41,920 --> 00:58:51,680
word we have 12 characters we have 1 2 3 4 5 6 7 8 9 10 11 and 12.
单词 我们有 12 个字符 我们有 1 2 34 5 6 7 8 9 10 11 和 12。

760
00:58:51,680 --> 00:58:55,440
notice here that python is counting a space as well
注意这里 python 正在计算空间也是如此

761
00:58:55,440 --> 00:58:59,920
and all of this could also be used with variables for example this len
所有这些也可以与变量例如 this len

762
00:58:59,920 --> 00:59:05,440
i could assign to the variable word length and then on the next line i want
我可以分配给变量单词长度然后在我想要的下一行

763
00:59:05,440 --> 00:59:09,599
to print my word length and i get 12 again
打印我的字长，我得到 12再次

764
00:59:09,599 --> 00:59:13,760
and this would be a slightly cleaner way of doing this although the previous one
这将是一个稍微干净的方式这样做虽然前一个

765
00:59:13,760 --> 00:59:18,400
would also be perfectly fine and another function we can also work
也很好还有另一个我们也可以使用的函数

766
00:59:18,400 --> 00:59:25,119
with is absolute or abs and in here i can add negative 50 and
with 是绝对或abs在这里我可以添加负 50 和

767
00:59:25,119 --> 00:59:31,280
for this once again i have to print the result otherwise we wouldn't see it
为此我必须再次打印结果否则我们就看不到它

768
00:59:31,280 --> 00:59:38,640
but now if i run the code we are getting 50 meaning abs removes this negative 50.
但现在如果我运行我们得到的代码50 意味着abs 消除了这个负数50。

769
00:59:38,640 --> 00:59:42,319
and there's one more really important thing that you can also do with
还有一点非常重要你也可以做的事情

770
00:59:42,319 --> 00:59:46,720
functions that right now we always only added a
功能现在我们总是只添加一个

771
00:59:46,720 --> 00:59:52,640
single argument but for some functions you could add more than that print is
单个参数但对于某些函数你可以添加比打印更多的内容

772
00:59:52,640 --> 00:59:56,880
actually one example of that let's put this on a separate line
实际上就是一个例子让我们把它放在单独的一行上

773
00:59:56,880 --> 01:00:02,160
so far for print i always added one argument
到目前为止，对于打印我总是添加一个争论

774
01:00:02,160 --> 01:00:06,720
but what i can do i can add a comma and then add
但我能做什么我可以添加一个逗号然后添加

775
01:00:06,720 --> 01:00:09,440
another argument
其他争论

776
01:00:09,440 --> 01:00:13,520
and now i have two arguments if i run the code
现在如果我跑步我有两个论点代码

777
01:00:13,520 --> 01:00:19,680
i get one argument and then print adds the other argument and print
我得到一个参数，然后打印添加另一个参数并打印

778
01:00:19,680 --> 01:00:23,119
accepts an unlimited number of other arguments
接受无限数量的其他论据

779
01:00:23,119 --> 01:00:28,000
meaning if i run this now we are getting more and more arguments
意思是如果我现在运行这个我们收到越来越多的争论

780
01:00:28,000 --> 01:00:33,599
the important thing here is you always add one argument then a comma and then
这里最重要的是你永远添加一个参数，然后添加一个逗号，然后

781
01:00:33,599 --> 01:00:39,920
another argument another comma and so on depending on what the function accepts
另一个参数另一个逗号等等取决于函数接受的内容

782
01:00:39,920 --> 01:00:45,920
and some functions only accept a single argument for example absolute only takes
有些函数只接受一个例如绝对参数只需要

783
01:00:45,920 --> 01:00:51,119
one if i added another we will get an error and that is abs
如果我添加另一个我们会得到一个错误，那就是abs

784
01:00:51,119 --> 01:00:57,359
takes exactly one argument and we have given two python here is very clear
只需要一个参数，我们就有这里给出两个 python 非常清楚

785
01:00:57,359 --> 01:01:03,680
apps only gets one argument but that is essentially the basic concept of calling
应用程序只得到一个参数，但那就是本质上是调用的基本概念

786
01:01:03,680 --> 01:01:07,119
functions now for the exercise i want you guys to
功能现在我希望你们进行练习

787
01:01:07,119 --> 01:01:11,359
do some research online and i want you guys to look up the
在线做一些研究我希望你们查一下

788
01:01:11,359 --> 01:01:15,839
function called max and try to figure out what it does and
称为 max 的函数并尝试弄清楚它的作用

789
01:01:15,839 --> 01:01:20,000
call it inside of this code
在这段代码中调用它

790
01:01:21,119 --> 01:01:25,760
here i have google open although you could use any search engine
这里我有谷歌打开虽然你可以使用任何搜索引擎

791
01:01:25,760 --> 01:01:30,720
and to learn coding you have to do a ton of research so it's a really good idea
要学习编码，你必须做很多事情研究所以这是一个非常好的主意

792
01:01:30,720 --> 01:01:35,200
to start early and what we want to do right now is look
早点开始我们现在想做的是看看

793
01:01:35,200 --> 01:01:38,799
at the python function max
在Python函数中最大限度

794
01:01:38,799 --> 01:01:43,839
and let's just see what we get in here we can see a bunch of websites
让我们看看我们得到了什么在这里我们可以看到一堆网站

795
01:01:43,839 --> 01:01:47,480
and for python all of them are basically fine
对于 python 来说，所有这些基本上都是美好的

796
01:01:47,480 --> 01:01:52,480
w3schools program is are really big ones geeks for geeks is
w3schools 计划是对于极客而言，极客确实是个大人物

797
01:01:52,480 --> 01:01:57,520
also really big but the one you probably want to use the most is
也很大，但你可能会最想用的是

798
01:01:57,520 --> 01:02:01,280
docs.python.org this is the official python
docs.python.org这是官方的Python

799
01:02:01,280 --> 01:02:04,319
documentation if i click on this one
文档如果我点击这个

800
01:02:04,319 --> 01:02:08,160
we can see all of the built-in functions for python
我们可以看到所有的内置函数对于蟒蛇

801
01:02:08,160 --> 01:02:11,680
and the one i'm looking for is called max
我正在寻找的那个叫做最大限度

802
01:02:11,680 --> 01:02:16,799
if i click on this i get a ton of information the most important one is
如果我点击这个我会得到很多信息中最重要的是

803
01:02:16,799 --> 01:02:20,480
right in the beginning it's returning the largest item in an
就在一开始它返回最大的项目

804
01:02:20,480 --> 01:02:25,280
iterable or the largest of two or more arguments
可迭代的或两个或多个参数中最大的一个

805
01:02:25,280 --> 01:02:31,359
what an iterable is we have no idea so far but what we do know is the largest
我们不知道什么是可迭代的很远，但我们所知道的是最大的

806
01:02:31,359 --> 01:02:36,799
of two or more arguments so let's have a look at that one
两个或多个参数让我们看一下那个

807
01:02:36,799 --> 01:02:43,200
once again we are in the code and i want to use my max function and in here i
我们再次进入代码，我想要使用我的 max 函数，在这里我

808
01:02:43,200 --> 01:02:48,359
want to just add a couple of random numbers
只想添加几个随机的数字

809
01:02:48,480 --> 01:02:52,880
now i once again have to print the result
现在我必须再次打印结果

810
01:02:52,880 --> 01:02:57,520
and if i run this i get 10.
如果我运行这个我得到10.

811
01:02:57,520 --> 01:03:04,319
and well we get 10 because max is selecting the largest argument that we
我们得到 10 因为 max 是选择我们认为最大的参数

812
01:03:04,319 --> 01:03:08,400
are passing into it which right now is 10.
正在进入它，现在是10.

813
01:03:08,400 --> 01:03:13,760
and well that is basically what it does if you understand this one you also
这基本上就是它的作用如果你明白这一点，你也

814
01:03:13,760 --> 01:03:19,520
understand min which is taking the lowest number which in our case is 2.
了解正在采取的分钟最小的数字，在我们的例子中是 2。

815
01:03:19,520 --> 01:03:26,319
and with that we have covered functions besides functions we also have methods
这样我们就涵盖了函数除了函数之外我们还有方法

816
01:03:26,319 --> 01:03:31,920
and especially for beginners methods and functions can be very similar so let's
特别是对于初学者的方法和功能可能非常相似，所以让我们

817
01:03:31,920 --> 01:03:35,839
compare the two in the most basic sense a method does
比较两者从最基本的意义上讲，方法的作用是

818
01:03:35,839 --> 01:03:39,599
the same as a function the only difference being that the method is
与函数相同唯一区别在于该方法是

819
01:03:39,599 --> 01:03:43,520
always attached to an object which means
总是附着在一个物体上意思是

820
01:03:43,520 --> 01:03:48,000
we are still calling a method with the name of the method followed by brackets
我们仍在调用一个方法方法名称，后跟方括号

821
01:03:48,000 --> 01:03:52,160
and this is still called calling a method just like a function
这仍然称为调用方法就像函数一样

822
01:03:52,160 --> 01:03:57,359
we can also still pass an argument in here this works in exactly the same way
我们仍然可以传递一个参数这里的工作方式完全相同

823
01:03:57,359 --> 01:04:02,319
the difference is that methods always are connected to an object and this
区别在于方法总是连接到一个对象并且这个

824
01:04:02,319 --> 01:04:06,559
happens with a dot which in practice looks like this
发生在实践中的一个点看起来像这样

825
01:04:06,559 --> 01:04:10,880
we always start with some kind of object in this case it's a word it could also
我们总是从某种物体开始在这种情况下，它也可以是一个词

826
01:04:10,880 --> 01:04:14,319
be a number or any other data type in python
是数字或任何其他数据类型Python

827
01:04:14,319 --> 01:04:18,400
this is then followed by a dot and this is really important then we have the
然后是一个点，然后是真的很重要，那么我们就有了

828
01:04:18,400 --> 01:04:22,720
method name and then we have brackets with whatever argument you want to put
方法名称，然后我们有括号无论你想提出什么论点

829
01:04:22,720 --> 01:04:25,599
in and then all of this does a certain
在然后所有这一切都会产生一定的影响

830
01:04:25,599 --> 01:04:30,319
thing just like a function what this thing could be is for example
就像函数一样例如，这件事可能是什么

831
01:04:30,319 --> 01:04:35,280
we can use the upper method and this one takes a word and returns the same word
我们可以使用上面的方法和这个接受一个单词并返回相同的单词

832
01:04:35,280 --> 01:04:39,200
all in uppercase letters and i think this example also
全部大写字母我认为这个例子也是

833
01:04:39,200 --> 01:04:42,960
illustrates why we have functions and methods
说明了为什么我们有函数和方法

834
01:04:42,960 --> 01:04:47,520
sometimes functionality only makes sense for a certain kind of data type or for
有时只有功能才有意义对于某种数据类型或

835
01:04:47,520 --> 01:04:51,200
certain objects with a certain data type and
具有特定数据类型的特定对象和

836
01:04:51,200 --> 01:04:56,319
here the upper case really only makes sense for a word there's no uppercase
这里的大写字母实际上只能使单词的意义没有大写

837
01:04:56,319 --> 01:05:01,599
for a number for example and this is why we have methods
例如对于一个数字这就是为什么我们有方法

838
01:05:01,599 --> 01:05:06,000
and i suppose we can implement all of this a bit more practically so let's
我想我们可以实现所有这更实际一些，所以让我们

839
01:05:06,000 --> 01:05:11,039
have a look at all of this in code once again i have a completely empty python
在代码中看一下所有这些我又得到了一条完全空的蟒蛇

840
01:05:11,039 --> 01:05:15,280
file and i want to create a new variable let's call it test
文件，我想创建一个新变量我们称之为测试

841
01:05:15,280 --> 01:05:19,839
and the value for this test is going to be a word
这个测试的值是是一个词

842
01:05:19,839 --> 01:05:24,400
to get started i want to print my test variable
首先我想打印我的测试多变的

843
01:05:24,400 --> 01:05:28,960
and if i print it we are getting a word so far all of this should be very
如果我打印它，我们会得到一个词到目前为止，这一切应该是非常

844
01:05:28,960 --> 01:05:32,160
familiar and the method we have seen we are
熟悉的我们所看到的方法是

845
01:05:32,160 --> 01:05:37,920
calling with a dot after the word and then the name is upper and don't forget
在单词 and 后面加一个点来调用那么名字就在上面，别忘了

846
01:05:37,920 --> 01:05:44,319
the brackets if i run this now we can see a word all in uppercase letters
如果我现在运行这个括号，我们可以查看全部为大写字母的单词

847
01:05:44,319 --> 01:05:49,520
and with that we have called a method what we can also do let me demonstrate
我们调用了一个方法我们还可以做什么让我演示一下

848
01:05:49,520 --> 01:05:53,680
it first and then explain i can cut out this upper here
先解释一下我可以删掉上面这个这里

849
01:05:53,680 --> 01:05:58,400
and run it on this variable if i run all of this now we are getting
并在这个变量上运行它如果我现在运行所有这些，我们会得到

850
01:05:58,400 --> 01:06:02,319
the same outcome and why this happened i will explain in
同样的结果为什么会发生这种情况我将在

851
01:06:02,319 --> 01:06:07,200
the next section but in the most basic sense
下一节但在最基本的部分感觉

852
01:06:07,200 --> 01:06:12,640
methods always change a value where you change that value is really up
方法总是改变一个值你改变的地方这个值真的上升了

853
01:06:12,640 --> 01:06:15,599
to you in the first example
给你在第一个例子中

854
01:06:15,599 --> 01:06:19,520
we created the word and then when we are creating the word we are calling the
我们创造了这个词，然后当我们创建我们称之为的词

855
01:06:19,520 --> 01:06:23,440
upper method and this is returning
上法这正在回归

856
01:06:23,440 --> 01:06:27,839
the uppercase letters and storing them in the test variable and once we have
大写字母并存储它们在测试变量中，一旦我们有

857
01:06:27,839 --> 01:06:32,480
that we are printing the test variable that's all that's happening here
我们正在打印测试变量这就是这里发生的一切

858
01:06:32,480 --> 01:06:36,160
and then the second example looked like this
然后是第二个例子看起来像这样

859
01:06:36,160 --> 01:06:40,640
and in here we first created the word and saved the
在这里我们首先创建了这个词并保存了

860
01:06:40,640 --> 01:06:45,920
word inside of the test variable after that we are still printing the
测试变量内的单词之后我们仍然打印

861
01:06:45,920 --> 01:06:50,640
test variable but now when we are printing it we are modifying it with the
测试变量，但现在当我们打印它，我们正在修改它

862
01:06:50,640 --> 01:06:55,359
upper method which is giving us the uppercase word the result for both of
上面的方法给了我们大写单词的结果

863
01:06:55,359 --> 01:06:59,280
these examples is the same how this works in detail you are going
这些例子是相同的这具体是如何运作的

864
01:06:59,280 --> 01:07:02,799
to understand very soon for now i'm going to call the upper
很快就能明白现在我要打电话给上层

865
01:07:02,799 --> 01:07:08,640
method when i create this value now obviously this example really isn't
当我创建这个值时的方法现在显然这个例子确实不是

866
01:07:08,640 --> 01:07:12,240
all that useful let's do something more relevant
所有有用的让我们做一些更相关的事情

867
01:07:12,240 --> 01:07:17,440
let's say we have some kind of user name
假设我们有某种用户姓名

868
01:07:17,440 --> 01:07:22,400
and we are expecting something like john smith
我们期待着像约翰这样的人史密斯

869
01:07:22,400 --> 01:07:27,359
where we have a first name and a surname but since you are allowing user input
我们有名字和姓氏但由于您允许用户输入

870
01:07:27,359 --> 01:07:32,240
this might instead look something like this we have a typo and maybe we have
这可能看起来像这是我们有一个错字，也许我们有

871
01:07:32,240 --> 01:07:37,599
some access at the end and let me add another typo in here
最后有一些访问权限，让我添加这里还有一个错字

872
01:07:37,599 --> 01:07:40,880
this would still be valid user input but
这仍然是有效的用户输入，但是

873
01:07:40,880 --> 01:07:45,119
obviously it would look terrible which is something we couldn't use for
显然它看起来会很糟糕这是我们不能用的东西

874
01:07:45,119 --> 01:07:50,160
our purposes and methods are really good to clean all of this up
我们的目的和方法真的很好清理这一切

875
01:07:50,160 --> 01:07:54,400
and the one method we could start with is called title
我们可以从第一种方法开始被称为标题

876
01:07:54,400 --> 01:07:58,720
and let me print the username and see what that one does
让我打印用户名看看那人做什么

877
01:07:58,720 --> 01:08:04,000
now we get always let's expand this a tiny bit
现在我们总是让我们扩展这个一点点

878
01:08:04,000 --> 01:08:08,240
we are always getting the first letters uppercase and then every other letter is
我们总是收到第一个字母大写，然后所有其他字母都是

879
01:08:08,240 --> 01:08:13,920
lowercase meaning now we have john smith in the proper spelling at least for
小写意味着现在我们有约翰·史密斯至少以正确的拼写

880
01:08:13,920 --> 01:08:17,279
names meaning with this we get rid of this o
名字这意味着我们摆脱了这个o

881
01:08:17,279 --> 01:08:20,640
and this i what you can also do is combine
而这个我你还可以做的是结合

882
01:08:20,640 --> 01:08:24,719
different methods what you do by adding another dot after
不同的方法在后面添加另一个点可以做什么

883
01:08:24,719 --> 01:08:29,279
whatever value you want to change and then calling the other method in my case
无论你想改变什么值然后在我的例子中调用另一个方法

884
01:08:29,279 --> 01:08:33,839
for this one i want to get rid of these two axes
对于这个我想摆脱这两个轴

885
01:08:33,839 --> 01:08:40,960
and for that i need this strip method and what this one does is it looks at
为此我需要这种剥离方法这个所做的就是它看着

886
01:08:40,960 --> 01:08:47,040
the right and the left side of any word and removes a certain kind of value
任何单词的右侧和左侧并删除某种价值

887
01:08:47,040 --> 01:08:51,440
whatever we specify inside of the arguments
无论我们在里面指定什么论据

888
01:08:51,440 --> 01:08:55,920
and in my case i want to get rid of these two axes
就我而言，我想摆脱这两个轴

889
01:08:55,920 --> 01:08:59,600
which means i want to add the string
意思是我想添加字符串

890
01:08:59,600 --> 01:09:03,520
x in here and if i run this now
x在这里如果我现在运行这个

891
01:09:03,520 --> 01:09:09,359
we can see there is no difference so what went wrong here and i think you can
我们可以看到没有区别所以这里出了什么问题，我想你可以

892
01:09:09,359 --> 01:09:15,040
already tell what the problem might be in the original word the two axes were
已经告诉了问题可能是什么在原文中，两个轴是

893
01:09:15,040 --> 01:09:18,719
uppercase and this is what we are trying to remove
大写，这就是我们正在尝试的去除

894
01:09:18,719 --> 01:09:24,159
but what this strip method here sees is this string
但是这里的剥离方法看到了什么是这个字符串

895
01:09:24,159 --> 01:09:30,239
changed by this title meaning strip doesn't see a capital x it
被这个标题改变了意思是 strip 看不到大写 x 它

896
01:09:30,239 --> 01:09:35,440
sees a lowercase x and for python again remember
看到一个小写的 x对于 python 再次记住

897
01:09:35,440 --> 01:09:39,440
capitalization really matters an uppercase and the lowercase letter are
大小写确实很重要大写和小写字母分别是

898
01:09:39,440 --> 01:09:42,080
two completely different things for python
两个完全不同的东西Python

899
01:09:42,080 --> 01:09:47,279
to fix that all we need is a lowercase letter and if i run this now we have
为了解决这个问题，我们只需要一个小写字母信如果我现在运行这个我们有

900
01:09:47,279 --> 01:09:51,279
removed the two values you might be asking yourself what
删除了两个值你可能会问自己什么

901
01:09:51,279 --> 01:09:56,159
methods are available and there are a couple of ways to achieve that
方法是可用的，并且有一个有几种方法可以实现这一目标

902
01:09:56,159 --> 01:10:01,440
if you want to stay inside of a code editor you would use the dir function
如果你想留在代码中编辑器你会使用 dir 函数

903
01:10:01,440 --> 01:10:06,320
and in here you can pass in any value to figure out what methods it has
在这里你可以将任何值传递给弄清楚它有什么方法

904
01:10:06,320 --> 01:10:10,480
for example i could pass in the user name in here and if i run the code now
例如我可以传入用户名称在这里，如果我现在运行代码

905
01:10:10,480 --> 01:10:14,880
nothing happens the reason is that this function only
什么都没发生原因是这个功能仅

906
01:10:14,880 --> 01:10:20,400
returns all of the methods it doesn't print them for that we again need the
返回所有它不返回的方法打印它们，我们再次需要

907
01:10:20,400 --> 01:10:24,320
print function now if we run this we get something that
打印功能现在如果我们运行这个我们会得到一些东西

908
01:10:24,320 --> 01:10:30,560
looks a fair bit more technical and you have two main things in here
看起来更有技术含量这里有两件主要的事情

909
01:10:30,560 --> 01:10:36,320
you start with all of this stuff here a lot of names with double underscores
你从这里开始所有这些东西很多名字带有双下划线

910
01:10:36,320 --> 01:10:40,800
before and after the word like this lte here we have two
在单词之前和之后就像这个LTE，我们有两个

911
01:10:40,800 --> 01:10:45,920
underscores before and two underscores afterwards what these mean we're going
前面有一个下划线和两个下划线之后这些意味着我们要去

912
01:10:45,920 --> 01:10:51,120
to cover much later what you want to focus on for now is all the stuff down
稍后再介绍您想要的内容现在的重点是所有的东西都下来了

913
01:10:51,120 --> 01:10:54,239
here these are the methods that you could be
这里这些是你可以采用的方法

914
01:10:54,239 --> 01:10:59,840
using and we have actually used a couple of them already for example strip we
使用并且我们实际上已经使用了几个例如，我们已经剥离了其中的一些

915
01:10:59,840 --> 01:11:05,920
have used title and we have used upper i guess we can do one more method and
已经使用了标题，我们已经使用了上部我想我们可以再做一种方法

916
01:11:05,920 --> 01:11:12,400
let's use is alpha what this method does is it checks if the values inside of a
让我们使用 is alpha 这个方法的作用它检查 a 内的值是否

917
01:11:12,400 --> 01:11:16,800
word are in the alphabet meaning they are not numbers
这个词在字母表中意味着它们不是数字

918
01:11:16,800 --> 01:11:21,360
let me close this one and instead of the dir function
让我关闭这个，而不是目录函数

919
01:11:21,360 --> 01:11:26,400
i want to print user name and then dot is alpha
我想打印用户名然后点是阿尔法

920
01:11:26,400 --> 01:11:30,640
and don't forget to call it and now if i run this
并且不要忘记调用它现在如果我运行这个

921
01:11:30,640 --> 01:11:34,960
this is saying false the reason for that is that inside of
这是假的其原因在于

922
01:11:34,960 --> 01:11:40,239
this word we have one value that isn't inside of the alphabet and that is this
这个词我们有一个值，但不是在字母表里面，就是这个

923
01:11:40,239 --> 01:11:44,480
space here if i remove it and run out of this again
这里有空间如果我删除它并再次用完

924
01:11:44,480 --> 01:11:48,480
now it says true meaning every letter inside of the word
现在它说的是真的表示单词中的每个字母

925
01:11:48,480 --> 01:11:52,960
is inside of the alphabet if i added any kind of number in here
在字母表里面如果我在这里添加任何类型的数字

926
01:11:52,960 --> 01:11:58,159
this would go back to false although i don't really want to do that
这会回到 false虽然我真的不想那么做

927
01:11:58,159 --> 01:12:02,800
but this would be another way to check something in your word that may become
但这将是另一种检查方式你的话中的某些东西可能会变成

928
01:12:02,800 --> 01:12:06,719
useful especially when you work with something like user input you might want
特别是当你与您可能想要的诸如用户输入之类的东西

929
01:12:06,719 --> 01:12:10,159
to check if there are numbers inside of the name
检查里面是否有数字名字

930
01:12:10,159 --> 01:12:16,080
however if i go back to the dir function run this again
但是如果我回到 dir 函数再次运行这个

931
01:12:16,080 --> 01:12:20,400
this list here still isn't that useful because you have a name but you don't
这个列表仍然没有那么有用因为你有名字但你没有

932
01:12:20,400 --> 01:12:24,880
really have an explanation of what the specific method does
确实有一个解释具体方法是

933
01:12:24,880 --> 01:12:30,960
and well to really understand what a method does you do want to use google
并很好地真正理解什么是你想使用谷歌的方法吗

934
01:12:30,960 --> 01:12:33,360
and if you want to google for specific
和如果你想谷歌具体

935
01:12:33,360 --> 01:12:38,400
things you need to know their names for example in python or in really any
你需要知道它们的名字的东西python 中的示例或任何其他示例

936
01:12:38,400 --> 01:12:43,280
programming language a word is always called a string
编程语言总是一个词称为字符串

937
01:12:43,280 --> 01:12:47,600
we're going to cover that in much more detail in the next major section
我们将在更多内容中介绍这一点下一个主要部分详细介绍

938
01:12:47,600 --> 01:12:52,080
just remember for now a word in programming is always called a string
暂时记住一句话编程总是称为字符串

939
01:12:52,080 --> 01:13:00,000
and with that let's do some googling in here i want to look for python string
然后我们用谷歌搜索一下在这里我想寻找 python 字符串

940
01:13:00,000 --> 01:13:04,159
methods and then i am getting a ton of different
方法然后我得到了很多不同的

941
01:13:04,159 --> 01:13:09,040
results and again all of these websites here work quite well
结果以及所有这些网站这里工作得很好

942
01:13:09,040 --> 01:13:12,920
the one that is the official documentation by python is called
那个是官方的python 的文档称为

943
01:13:12,920 --> 01:13:17,040
docs.python.org and this one says built in types python something something
docs.python.org ，这个说已构建在类型中 python 某事某事

944
01:13:17,040 --> 01:13:21,760
documentation and in here on the left side you can see
文档在左边你可以看到

945
01:13:21,760 --> 01:13:26,320
all of the data types again we're going to cover those in a lot more detail very
我们再次讨论所有数据类型非常详细地介绍这些内容

946
01:13:26,320 --> 01:13:30,239
soon for example here you have numeric types
很快例如这里你有数字类型

947
01:13:30,239 --> 01:13:36,800
we have sequence types and then we have text sequence type str which stands for
我们有序列类型，然后我们有文本序列类型 str 代表

948
01:13:36,800 --> 01:13:40,320
string methods this is the one i want to look at
字符串方法，这是我想要的看着

949
01:13:40,320 --> 01:13:45,520
and in here you have a very long list let me minimize this part you have a
这里有一个很长的清单让我最小化这部分你有一个

950
01:13:45,520 --> 01:13:49,120
very long list of methods that you could be using
你可以使用的方法清单很长正在使用

951
01:13:49,120 --> 01:13:54,960
along with a fair bit of text explaining what they do
以及相当多的文字解释他们做什么

952
01:13:57,679 --> 01:14:04,000
for example here is is alpha the one we have just looked at
例如这里是 alpha我们刚刚看过的那个

953
01:14:04,000 --> 01:14:08,000
and if you have any kind of problem yourself you would probably read through
如果您有任何问题你自己可能会通读

954
01:14:08,000 --> 01:14:13,120
this list and try to figure out what method works for your purpose
这个列表并尝试找出什么方法适合您的目的

955
01:14:13,120 --> 01:14:18,159
and i suppose let's have a look at another website for example w3schools is
我想让我们看一下另一个网站，例如 w3schools 是

956
01:14:18,159 --> 01:14:23,280
also really good and in here we also have a long list of all of the
也很好，在这里我们还有一长串所有的

957
01:14:23,280 --> 01:14:28,000
methods the list contains the same number of methods and in here let's say
列表包含相同的方法方法的数量，在这里让我们说

958
01:14:28,000 --> 01:14:32,320
if i click on is alpha we get to another website we have an
如果我点击是阿尔法我们访问另一个网站，我们有一个

959
01:14:32,320 --> 01:14:37,600
explanation along with an example you honestly can use any of these
解释和例子老实说你可以使用其中任何一个

960
01:14:37,600 --> 01:14:40,960
websites they all cover basically the same thing
他们基本上都涵盖了网站一样

961
01:14:40,960 --> 01:14:44,159
all right with that we can do an exercise
好吧，我们可以做一个锻炼

962
01:14:44,159 --> 01:14:50,560
and in my case i want you guys to do some research because i have an exercise
就我而言，我希望你们这样做一些研究，因为我有一个练习

963
01:14:50,560 --> 01:14:54,320
string that is saying i like
细绳这就是说我喜欢

964
01:14:54,320 --> 01:14:57,679
puppies and what i want you guys to do is to
小狗我希望你们做的是

965
01:14:57,679 --> 01:15:02,640
find a method that replaces the word puppies with let's say kitties or any
找到一个方法来替换这个单词小狗和小猫或任何

966
01:15:02,640 --> 01:15:07,199
other animal that you really like so pause the video now and try to figure
您真正喜欢的其他动物所以现在暂停视频并尝试弄清楚

967
01:15:07,199 --> 01:15:10,679
this one out yourself
这个你自己出

968
01:15:11,679 --> 01:15:17,040
in my case i want to look for python a string remember this is just a word and
就我而言，我想寻找 python a字符串记住这只是一个单词并且

969
01:15:17,040 --> 01:15:24,080
i want to replace a let's say a value if i do this i already get one answer
我想替换一个值如果我这样做我已经得到一个答案

970
01:15:24,080 --> 01:15:27,040
predicted by google that is called replace
谷歌预测称为代替

971
01:15:27,040 --> 01:15:32,960
although if i go down i see replace a bunch more times and well
虽然如果我下去我会看到更换多聚几次就好了

972
01:15:32,960 --> 01:15:37,440
i just had to look at one of them doesn't really matter which one it is
我只需要看看其中的一个哪一个并不重要

973
01:15:37,440 --> 01:15:42,640
let's choose program miss this time this one is really good and then here we
我们选择这次错过的节目吧这个真的很好，然后我们就在这里

974
01:15:42,640 --> 01:15:47,440
have an explanation of what this one does we have an example
对此有一个解释我们有例子吗

975
01:15:47,440 --> 01:15:52,800
and then we have the syntax so how we would use it and in here
然后我们有了语法，那么我们如何会使用它并在这里

976
01:15:52,800 --> 01:15:57,600
we have a string so any kind of word then the replace method then we have an
我们有一个字符串，所以任何类型的单词然后是替换方法然后我们有一个

977
01:15:57,600 --> 01:16:04,080
old value a new value and a count and down here then we can see how we
旧值、新值和计数在这里我们可以看到我们如何

978
01:16:04,080 --> 01:16:09,440
would use these values the old value here means the value we want to replace
将使用这些值旧值这里的意思是我们要替换的值

979
01:16:09,440 --> 01:16:12,640
the new value is what we want to replace it with
新值就是我们要替换的值它与

980
01:16:12,640 --> 01:16:16,480
and then the count basically means if we have the
进而计数基本上意味着如果我们有

981
01:16:16,480 --> 01:16:20,640
old value multiple times how many times we want to replace it
旧值乘以多少倍我们想更换它

982
01:16:20,640 --> 01:16:25,520
and this one is optional so you could leave it out entirely and with that we
这是可选的，所以你可以完全忽略它，这样我们

983
01:16:25,520 --> 01:16:30,159
can implement all of this back in my code i want to add a dot and
可以实现这一切回到我的代码中，我想添加一个点和

984
01:16:30,159 --> 01:16:35,280
then the replace method and in here we first of all need the old
然后是替换方法在这里我们首先需要旧的

985
01:16:35,280 --> 01:16:41,600
word which in my case is puppies after that we need the new word and this
在我的例子中是小狗这个词之后我们需要新词和这个

986
01:16:41,600 --> 01:16:45,600
in my case is going to be kittens although any kind of word would be fine
就我而言将是小猫虽然任何词都可以

987
01:16:45,600 --> 01:16:49,840
in here and these two values would be mandatory
在这里这两个值是强制性的

988
01:16:49,840 --> 01:16:53,440
so we have to have them but once we have them
所以我们必须拥有它们但一旦我们拥有它们

989
01:16:53,440 --> 01:17:00,640
we can print the result and run this now and all the way at the bottom we get i
我们可以打印结果并立即运行一直到底部我们得到 i

990
01:17:00,640 --> 01:17:05,280
like kittens we have successfully replaced puppies with kittens we could
像小猫一样，我们已经成功我们可以用小猫代替小狗

991
01:17:05,280 --> 01:17:10,560
also add a third value and this one determines how many times we would want
还添加第三个值和这个决定了我们想要多少次

992
01:17:10,560 --> 01:17:16,239
to replace this value let me actually paste it in a few times
替换这个值让我实际粘贴几次

993
01:17:16,239 --> 01:17:19,600
here now we have puppies four times
这里现在我们已经养了四只小狗了

994
01:17:19,600 --> 01:17:23,280
by default i am replacing all of them with kittens
默认情况下我将替换所有这些与小猫

995
01:17:23,280 --> 01:17:27,280
meaning what i get is i like kittens kittens kittens and kittens
意思是我得到的是我喜欢小猫小猫 小猫和小猫

996
01:17:27,280 --> 01:17:32,320
but if i add another value in here and this has to be a number let's say i want
但如果我在这里添加另一个值并且这必须是一个数字，假设我想要

997
01:17:32,320 --> 01:17:35,520
to add a 2. now if i run this
添加 2。现在如果我运行这个

998
01:17:35,520 --> 01:17:40,640
i am only replacing the first two instances of puppies with kittens but
我只替换前两个小狗和小猫的例子，但是

999
01:17:40,640 --> 01:17:46,080
after that i keep my puppies around and again there are a lot more methods
之后我就把我的小狗留在身边还有很多方法

1000
01:17:46,080 --> 01:17:51,840
far too many to cover them in one video what you basically do as a programmer is
太多了，无法在一个视频中涵盖它们作为一名程序员，你基本上做的是

1001
01:17:51,840 --> 01:17:56,239
you keep on working and you learn more and more methods as you go along but
你继续工作并且学到更多以及更多的方法，但是

1002
01:17:56,239 --> 01:18:00,480
that being said even after a few years you are not going to know all of them
即使在几年后也这么说你不会知道他们所有人

1003
01:18:00,480 --> 01:18:04,000
for that you have google and you just look up different methods
为此，你有谷歌，你只需查找不同的方法

1004
01:18:04,000 --> 01:18:07,679
i have been programming for years and i still forget them all the time it's
我已经编程多年了，而且我仍然总是忘记他们

1005
01:18:07,679 --> 01:18:13,840
really not a major issue and with that we have methods
确实不是一个大问题这样我们就有了方法

1006
01:18:14,400 --> 01:18:20,239
in this part we are going to cover return and return is one of the most
在这一部分我们将介绍退货和退货是最多的之一

1007
01:18:20,239 --> 01:18:25,280
important concepts in all of programming so let's talk about it
所有编程中的重要概念那么我们来谈谈吧

1008
01:18:25,280 --> 01:18:30,640
in the most basic sense return is the glue that connects everything in python
从最基本的意义上来说，回报是连接Python中所有东西的胶水

1009
01:18:30,640 --> 01:18:35,120
what that means is that any operation returns a value
这意味着任何操作返回一个值

1010
01:18:35,120 --> 01:18:40,560
for example if we calculate 2 plus 2 f4 is being returned
例如，如果我们计算 2 加 2 f4正在被退回

1011
01:18:40,560 --> 01:18:45,520
we also have functions and methods and those can also return values for example
我们也有函数和方法例如，它们也可以返回值

1012
01:18:45,520 --> 01:18:48,719
upper returns the uppercase letters of a string
upper 返回 a 的大写字母细绳

1013
01:18:48,719 --> 01:18:54,560
and by combining different return values you are creating more complex logic
并通过组合不同的返回值你正在创建更复杂的逻辑

1014
01:18:54,560 --> 01:18:58,880
and what you are basically going to do in programming is combining different
以及你基本上要做的事情在编程中是将不同的

1015
01:18:58,880 --> 01:19:02,960
return values to create something more complex
返回值以创造更多东西复杂的

1016
01:19:02,960 --> 01:19:06,560
and an example here could look something like this
这里的一个例子可能看起来有些东西像这样

1017
01:19:06,560 --> 01:19:13,120
just read through this and try to think of what the outcome here is going to be
阅读本文并尝试思考这里的结果将会是什么

1018
01:19:13,120 --> 01:19:16,239
and let's go through this line step by step
让我们逐步完成这一行步

1019
01:19:16,239 --> 01:19:21,120
we are always starting with the innermost part in this case it is a word
我们总是从在这种情况下，最里面的部分是一个单词

1020
01:19:21,120 --> 01:19:26,480
and then we are applying right now the first function which is len this is
然后我们现在正在申请第一个函数是 len 这是

1021
01:19:26,480 --> 01:19:32,080
going to return a value and the value it is going to return is 6 or the amount of
将返回一个值及其值将返回 6 或数量

1022
01:19:32,080 --> 01:19:38,000
letters inside of this word and next up this value we are going to
这个单词里面的字母接下来我们将这个值

1023
01:19:38,000 --> 01:19:42,960
multiply with negative 10. this again is going to return another
乘以负10。这又会返回另一个

1024
01:19:42,960 --> 01:19:48,719
value negative 60. this is then going to return 60 because the absolute function
值为负 60。这将是返回 60 因为绝对函数

1025
01:19:48,719 --> 01:19:52,159
always turns a negative number into a positive number
总是把负数变成正数

1026
01:19:52,159 --> 01:19:56,560
and this would be one example of the return statement where we are taking
这就是一个例子return 声明我们正在采取的地方

1027
01:19:56,560 --> 01:20:01,280
specific functionalities like the length function here and then use the value
特定功能，例如长度在这里使用函数，然后使用该值

1028
01:20:01,280 --> 01:20:07,280
they return in another operation like this 6 multiplied by negative 10.
他们在另一次行动中返回，例如这个 6 乘以负 10。

1029
01:20:07,280 --> 01:20:11,679
what you absolutely have to understand is that every operation in python
你绝对必须明白的是 python 中的每个操作

1030
01:20:11,679 --> 01:20:16,880
returns a value and then this value you can combine with other operations like
返回一个值，然后你可以使用这个值可以与其他操作结合使用，例如

1031
01:20:16,880 --> 01:20:21,199
using it in another function or with another method or in a math operation
在另一个函数中使用它或与另一种方法或在数学运算中

1032
01:20:21,199 --> 01:20:26,080
it's really up to you but this is a really powerful system that allows you
这真的取决于你，但这是一个真正强大的系统可以让你

1033
01:20:26,080 --> 01:20:29,600
to add lots of logic on a single line of code
在一行中添加大量逻辑代码

1034
01:20:29,600 --> 01:20:34,159
let's play around with this i think that is going to be really important
让我们玩一下我认为将会非常重要

1035
01:20:34,159 --> 01:20:39,440
once more completely empty python file and let me create a test
再次完全空的 python 文件让我创建一个测试

1036
01:20:39,440 --> 01:20:42,800
variable let's use the example from the previous
多变的让我们使用前面的例子

1037
01:20:42,800 --> 01:20:48,000
part where we had e word and then we used upper
我们有 e 词的部分然后我们二手鞋面

1038
01:20:48,000 --> 01:20:53,920
let me print it as well and we are getting a word all in uppercase letters
让我也打印出来，我们是获取一个全部为大写字母的单词

1039
01:20:53,920 --> 01:20:56,639
and i think i want to have a bit of white
和我想我想要一点白色

1040
01:20:56,639 --> 01:21:00,400
space around it that makes my life a bit easier
它周围的空间这让我的生活变得更轻松

1041
01:21:00,400 --> 01:21:06,159
what happened in here is we have a word and then we're using the
这里发生的事情是我们有一个词，然后我们使用

1042
01:21:06,159 --> 01:21:11,600
upper method to change the word what this combined statement here
上面的方法来改变单词这里的组合语句是什么

1043
01:21:11,600 --> 01:21:15,600
returns is a word all in uppercase letters
返回的是一个全部大写的单词字母

1044
01:21:15,600 --> 01:21:21,040
and once we have that we can add another method to it and the
一旦我们有了这个我们可以向其中添加另一个方法

1045
01:21:21,040 --> 01:21:27,440
method we could be using here the one we have already seen let's use replace
我们可以在这里使用的方法已经看到让我们使用替换

1046
01:21:27,440 --> 01:21:31,280
and what we want to do in here is replace the letter a
我们想要在这里做的是替换字母a

1047
01:21:31,280 --> 01:21:36,400
with the letter let's say x and now if i run this
加上字母 x现在如果我运行这个

1048
01:21:36,400 --> 01:21:41,520
we have x word what happened here is that this
我们有 x 个词这里发生的事情是这样的

1049
01:21:41,520 --> 01:21:46,560
first statement returned e-word this one should be obvious by itself
第一个语句返回 e-word 这个本身应该是显而易见的

1050
01:21:46,560 --> 01:21:50,639
after that we have used the upper method to turn
在那之后我们已经使用了上面的方法来转

1051
01:21:50,639 --> 01:21:58,320
this e-word into e word all in uppercase letters after that
这个 e 词变成 e之后单词全部大写

1052
01:21:58,320 --> 01:22:02,560
we have used the replace method to change this a
我们使用了替换方法改变这个

1053
01:22:02,560 --> 01:22:04,560
to an x
到一个x

1054
01:22:04,560 --> 01:22:10,400
and we could continue this forever for example what we could do for example
我们可以永远继续下去例如我们可以做什么

1055
01:22:10,400 --> 01:22:15,440
what we could be doing is wrap all of this inside of the len
我们可以做什么将所有这些都包裹在镜头内

1056
01:22:15,440 --> 01:22:18,400
function and now if i run this
功能现在如果我运行这个

1057
01:22:18,400 --> 01:22:22,800
we are getting six we start with a word
我们有六个我们从一个词开始

1058
01:22:22,800 --> 01:22:26,159
then we are turning all of this into uppercase letters
然后我们把这一切变成大写字母

1059
01:22:26,159 --> 01:22:30,000
then we are changing the first letter from an a to an x
然后我们改变第一个字母从 a 到 x

1060
01:22:30,000 --> 01:22:34,400
so what we have inside of these brackets is x
所以我们在这些括号内有什么是 x

1061
01:22:34,400 --> 01:22:39,440
word all in uppercase letter and what we do then is use the len
单词全部大写然后我们要做的就是使用 len

1062
01:22:39,440 --> 01:22:44,960
method to count how many characters we have inside of this word
方法来计算我们有多少个字符这个词里面有

1063
01:22:44,960 --> 01:22:50,400
which right now is 6 and this is what we are storing inside of the variable i
现在是 6 这就是我们存储在变量 i 的内部

1064
01:22:50,400 --> 01:22:55,280
hope this makes sense it is a really important concept to understand
希望这是有道理的，这真的是需要理解的重要概念

1065
01:22:55,280 --> 01:22:59,920
all it means is every time you perform some kind of operation a different kind
这意味着每次你表演的时候某种操作 另一种操作

1066
01:22:59,920 --> 01:23:05,120
of value is being returned and then this value is what you are working with next
的值被返回，然后这个价值是你接下来要处理的事情

1067
01:23:05,120 --> 01:23:10,719
you really have to be aware that every operation returns some kind of value
你真的必须意识到每一个操作返回某种值

1068
01:23:10,719 --> 01:23:14,480
although this can be kind of weird sometimes
虽然这可能有点奇怪有时

1069
01:23:14,480 --> 01:23:19,600
one really good example let me remove the white space here
一个非常好的例子让我删除这里的空白

1070
01:23:19,600 --> 01:23:23,440
and then let's play around with the print function
然后让我们玩一下打印功能

1071
01:23:23,440 --> 01:23:28,320
because this one by itself just prints whatever we pass inside
因为这个本身只是打印无论我们在里面传递什么

1072
01:23:28,320 --> 01:23:34,239
so what's going to happen when we print a print function
那么当我们打印时会发生什么打印功能

1073
01:23:34,239 --> 01:23:39,280
and let's see we are getting 6 and none
让我们看看我们得到了 6 个，但没有

1074
01:23:39,280 --> 01:23:43,600
the 6 we are getting from this inner part
我们从这个内在得到的 6部分

1075
01:23:43,600 --> 01:23:49,840
and the none is what gets returned by a print statement and none is an actual
none 是 a 返回的内容print 语句，没有一个是实际的

1076
01:23:49,840 --> 01:23:55,679
data type in python you can work with it but it basically denotes the absence of
python 中的数据类型你可以使用它但它基本上表示不存在

1077
01:23:55,679 --> 01:24:00,080
a value but again print is returning something
一个值但 print 再次返回一些东西

1078
01:24:00,080 --> 01:24:04,320
although in this case what it is returning is the data type none i hope
虽然在这种情况下它是什么返回的是数据类型，我希望没有

1079
01:24:04,320 --> 01:24:08,080
you get the idea here now for this part i am not going to do
你明白了现在对于这部分我不打算做

1080
01:24:08,080 --> 01:24:12,960
an exercise but i would recommend you to play around with this yourself in your
一个练习，但我建议你自己尝试一下

1081
01:24:12,960 --> 01:24:17,280
own time and see what you can do yourself
自己的时间，看看你能做什么你自己

1082
01:24:17,280 --> 01:24:22,239
throughout this series we are going to do a lot of examples so there's plenty
在整个系列中，我们将做了很多例子，所以有很多

1083
01:24:22,239 --> 01:24:25,199
of time for practice a really important thing you have to
练习时间你必须做的一件非常重要的事情

1084
01:24:25,199 --> 01:24:31,360
understand is comments and comments do not influence your code whatsoever they
理解就是评论和评论吗不会影响您的代码

1085
01:24:31,360 --> 01:24:36,239
are just explaining it or well they are commenting what your code does
只是解释它或者他们是评论你的代码的作用

1086
01:24:36,239 --> 01:24:40,880
and you really want to use comments quite extensively because they are
并且你确实想使用评论相当广泛，因为它们是

1087
01:24:40,880 --> 01:24:45,679
really useful to help how you organize your code and to understand what it does
对帮助你如何组织非常有用你的代码并理解它的作用

1088
01:24:45,679 --> 01:24:49,840
especially if you work in a team you want to add lots of comments because
尤其是当你在一个团队中工作时想添加很多评论，因为

1089
01:24:49,840 --> 01:24:54,480
other people would really appreciate it it also works as a really good reminder
其他人会非常感激的它也是一个很好的提醒

1090
01:24:54,480 --> 01:24:58,800
for your own code it's a really common thing for programmers that you write
对于您自己的代码来说，这很常见你写的程序员的东西

1091
01:24:58,800 --> 01:25:02,480
some code you don't look at it for half a year and then you have no idea what it
有些代码你看一半都不看一年之后你就不知道那是什么了

1092
01:25:02,480 --> 01:25:07,280
does anymore and writing comments is a very good way to remind yourself
不再做，写评论是一个提醒自己的好方法

1093
01:25:07,280 --> 01:25:12,080
there are two ways to write comments in python the first one is the hashtag
有两种写评论的方式python 第一个是主题标签

1094
01:25:12,080 --> 01:25:17,760
symbol anything on that line after the symbol is going to be ignored by python
符号该行之后的任何内容符号将被Python忽略

1095
01:25:17,760 --> 01:25:23,600
the other way is a triple quotation mark this one will comment out anything
另一种方式是三引号这个会注释掉任何东西

1096
01:25:23,600 --> 01:25:28,560
inside of these quotation marks this would also work over multiple lines
这些引号内的这个也可以在多行上工作

1097
01:25:28,560 --> 01:25:33,280
although technically it's not a comment we are going to learn later what this is
虽然从技术上来说这不是评论我们稍后会了解这是什么

1098
01:25:33,280 --> 01:25:39,199
but you can use it as a comment and let's say i have again a test variable
但你可以用它作为评论假设我又有一个测试变量

1099
01:25:39,199 --> 01:25:44,320
and this one is a really important value
这是一个非常重要的价值

1100
01:25:44,320 --> 01:25:50,480
i want to add a comment to explain that this is a really important
我想添加一条评论来解释这一点这是一个非常重要的

1101
01:25:50,480 --> 01:25:54,080
value we are just using the hashtag symbol and
价值我们只是使用主题标签符号并且

1102
01:25:54,080 --> 01:25:57,679
anything after that symbol is going to be a comment
该符号之后的任何内容都会成为评论

1103
01:25:57,679 --> 01:26:01,920
you can also add multiple if you want to add some specific kind of
您还可以添加多个如果你想添加一些特定类型的

1104
01:26:01,920 --> 01:26:08,560
styling which is fairly common actually what you see fairly often is programmers
实际上相当常见的样式你经常看到的是程序员

1105
01:26:08,560 --> 01:26:13,920
doing something like this then a comment and then
做这样的事情然后评论然后

1106
01:26:13,920 --> 01:26:18,719
something like this at the end i guess we can close this box as well to make it
我想最后是这样的我们也可以关闭这个框以使其

1107
01:26:18,719 --> 01:26:22,719
look a bit prettier with something like this you have a very clear section
用类似的东西看起来更漂亮一点这是你有一个非常清晰的部分

1108
01:26:22,719 --> 01:26:26,639
inside of your code but the important thing here to understand is that
在你的代码里面，但重要的是这里要理解的是

1109
01:26:26,639 --> 01:26:31,520
anything after hashtag symbol on the line of code is going to be ignored
主题标签符号之后的任何内容该行代码将被忽略

1110
01:26:31,520 --> 01:26:36,960
i guess let me actually run the code by printing the test variable run this now
我想让我实际运行代码打印测试变量立即运行

1111
01:26:36,960 --> 01:26:40,320
and we can only see a really important value
我们只能看到一个非常重要的价值

1112
01:26:40,320 --> 01:26:45,440
anything here and here was ignored by python you could also put
这里和这里的任何东西被 python 忽略你也可以把

1113
01:26:45,440 --> 01:26:49,520
this anywhere else in your code for example here and then this line of code
这在你的代码中的其他地方示例在这里，然后是这行代码

1114
01:26:49,520 --> 01:26:53,920
is going to be ignored entirely and something that would make more sense
将被完全忽略以及一些更有意义的东西

1115
01:26:53,920 --> 01:26:59,280
is you could comment out the entire line and that is basically it for the easiest
你可以注释掉整行吗这基本上是最简单的

1116
01:26:59,280 --> 01:27:02,560
kind of commenting although for this type of comment
某种评论虽然对于这种类型的评论

1117
01:27:02,560 --> 01:27:07,360
sublime has a very neat trick let me duplicate it a couple of times
Sublime 有一个非常巧妙的技巧让我复制几次

1118
01:27:07,360 --> 01:27:12,000
and imagine all of these are different examples of code
想象所有这些都是不同的代码示例

1119
01:27:12,000 --> 01:27:17,280
and you want to comment out all of them it would be really annoying to write a
你想把它们全部注释掉写一个真的很烦人

1120
01:27:17,280 --> 01:27:21,920
hashtag in front of every single line of code it just wouldn't be efficient
每行前面的主题标签编码效率不高

1121
01:27:21,920 --> 01:27:27,199
so what you can do is select all of them and then press ctrl and the forward
所以你能做的就是选择所有这些然后按ctrl键并前进

1122
01:27:27,199 --> 01:27:32,320
slash the one below the question mark if you do that all of them are being
如果是的话，请在问号下方划线你这样做，他们所有人都在

1123
01:27:32,320 --> 01:27:35,760
commented out and if you press it again the comment
注释掉了如果你再按一次评论

1124
01:27:35,760 --> 01:27:40,639
disappears which is what i am using all the time
消失这就是我一直在用的

1125
01:27:40,639 --> 01:27:45,280
and well with that we have the first type of comment what you can also do
这样我们就有了第一个评论类型 您还可以做什么

1126
01:27:45,280 --> 01:27:50,960
i guess let me add something below here let me call it another
我想让我在下面添加一些内容让我再叫它一个

1127
01:27:50,960 --> 01:27:55,920
variable let me just use some numbers
多变的让我用一些数字

1128
01:27:55,920 --> 01:28:02,560
and now duplicate this a few more times and again i want to comment out
现在再复制一些我一次又一次想评论

1129
01:28:02,560 --> 01:28:08,239
multiple lines of code for that i can use three quotation marks
多行代码为此我可以使用三个引号

1130
01:28:08,239 --> 01:28:13,360
at the start and at the end you can already tell the color was
在开始和结束时你已经可以看出颜色是

1131
01:28:13,360 --> 01:28:17,600
changed to gray and this tells us this is going to be a comment
变成灰色，这告诉我们这一点将成为一条评论

1132
01:28:17,600 --> 01:28:21,360
meaning if i run the code now we wouldn't be able to see it okay
意思是如果我现在运行代码我们看不到它，好吧

1133
01:28:21,360 --> 01:28:26,639
granted we wouldn't be able to see this at all so let me add a print statement
当然我们看不到这个无论如何，让我添加一条打印语句

1134
01:28:26,639 --> 01:28:32,000
in here with another variable
和另一个人在这里多变的

1135
01:28:32,000 --> 01:28:36,400
if i run this now we still cannot see the print statement because all of this
如果我现在运行这个我们仍然看不到print 语句因为所有这些

1136
01:28:36,400 --> 01:28:40,480
is a comment now this example here
是一条评论现在这个例子在这里

1137
01:28:40,480 --> 01:28:45,280
isn't exactly great because it's just lots of individual variables that i
并不完全好，因为它只是我有很多单独的变量

1138
01:28:45,280 --> 01:28:48,960
copy-pasted how you would use this kind of comment
复制粘贴你会如何使用这种评论

1139
01:28:48,960 --> 01:28:53,199
most of the time is by adding a couple of lines of code that explains something
大多数时候是添加几个解释某事的代码行

1140
01:28:53,199 --> 01:28:59,600
more complex let's say this is a really important
更复杂假设这是一个非常重要的

1141
01:28:59,600 --> 01:29:05,840
section it does a couple of things
部分它做了几件事

1142
01:29:05,840 --> 01:29:10,400
that we need for the code to work
那我们需要让代码正常工作

1143
01:29:10,400 --> 01:29:14,639
whatever you want to put in here after that you would have the rest of
无论你想在这里放什么之后你就会拥有剩下的

1144
01:29:14,639 --> 01:29:18,560
your code this is what you see fairly often and
你的代码这是你经常看到的情况

1145
01:29:18,560 --> 01:29:22,880
python actually incorporated this into its functionality we're going to see
python 实际上将其合并到我们将看到它的功能

1146
01:29:22,880 --> 01:29:27,199
this later on as well i guess for now the really important
稍后也会这样我想现在真正重要的是

1147
01:29:27,199 --> 01:29:30,880
thing you want to be aware of is this one here the simple kind of comment that
你想要知道的是这个这里有一个简单的评论

1148
01:29:30,880 --> 01:29:34,560
you can just put anywhere and that way you can either add explanations or
你可以把它放在任何地方您可以添加解释或

1149
01:29:34,560 --> 01:29:38,800
sections to your code which really help with the organization before we are
代码中真正有帮助的部分在我们之前与该组织

1150
01:29:38,800 --> 01:29:42,400
finishing off this section i want to talk a bit more about the lines of
我想完成这一部分多谈谈

1151
01:29:42,400 --> 01:29:47,199
execution logic because there are a few things that i haven't covered yet let's
执行逻辑因为有几个我还没有讲到的事情让我们

1152
01:29:47,199 --> 01:29:52,639
go through them the most important part is that how you see lines differs from
浏览其中最重要的部分就是你看待线条的方式与

1153
01:29:52,639 --> 01:29:56,400
how python sees them a really good example here
python 认为它们非常好例子在这里

1154
01:29:56,400 --> 01:30:02,239
is that python does not see empty lines in the code only you do and let me
python看不到空行在代码中只有你做并让我

1155
01:30:02,239 --> 01:30:07,120
illustrate what i mean if i start typing print and let's call
说明我的意思如果我开始输入 print 然后我们打电话

1156
01:30:07,120 --> 01:30:13,199
it first line and then duplicate the line and type in second line if i
它的第一行，然后复制行并在第二行输入 if i

1157
01:30:13,199 --> 01:30:18,320
execute this code i get first line and second line this is the stuff we have
执行这段代码我得到第一行并且第二行这是我们拥有的东西

1158
01:30:18,320 --> 01:30:22,639
already seen quite a lot it should be fairly obvious by this point
已经看过很多了，应该是这样在这一点上相当明显

1159
01:30:22,639 --> 01:30:26,080
however what happens if i add a space in here
但是如果我添加一个空格会发生什么这里

1160
01:30:26,080 --> 01:30:30,960
now we have a line of code nothing and another line of code
现在我们一行代码什么也没有，另一行代码

1161
01:30:30,960 --> 01:30:35,920
if i run all of this now we are still seeing the same result
如果我现在运行这一切，我们仍然看到相同的结果

1162
01:30:35,920 --> 01:30:41,440
the reason being that python ignores a line without any code
原因是 python 忽略了没有任何代码的行

1163
01:30:41,440 --> 01:30:45,760
if there's nothing on the line python is just going to ignore it
如果 python 线上没有任何内容只是会忽略它

1164
01:30:45,760 --> 01:30:51,440
meaning what you could be doing is add a huge amount of white space and it would
这意味着你可以做的是添加一个大量的空白，它会

1165
01:30:51,440 --> 01:30:56,400
not make any difference to your code which is very often something you do
对你的代码没有任何影响这是你经常做的事情

1166
01:30:56,400 --> 01:31:00,960
want to work with quite extensively because this is making it much easier to
想要广泛合作因为这使得更容易

1167
01:31:00,960 --> 01:31:04,639
organize your code especially if you add more comments with
组织你的代码特别是如果您添加更多评论

1168
01:31:04,639 --> 01:31:10,960
something like let's say second line and then this could be
比如第二行然后这可能是

1169
01:31:10,960 --> 01:31:16,400
the first line you could have a setup like this which
第一行你可以有这样的设置

1170
01:31:16,400 --> 01:31:21,440
in your case might make it much easier to read but all that python sees is this
在你的情况下可能会让事情变得更容易阅读但 python 看到的只是这个

1171
01:31:21,440 --> 01:31:26,159
line and this line here which is giving you a ton of work to
这条线和这里的这条线这给你带来了大量的工作

1172
01:31:26,159 --> 01:31:31,440
customize whatever explains your code the best but there are quite a few more
自定义任何解释您的代码的内容最好的，但还有很多

1173
01:31:31,440 --> 01:31:36,639
things that you should be aware of what i have also covered is that python
你应该知道的事情我还介绍了 python

1174
01:31:36,639 --> 01:31:41,600
ignores white space within a line meaning you can add as many spaces as
忽略行内的空白这意味着您可以添加尽可能多的空格

1175
01:31:41,600 --> 01:31:45,520
you want let's have a look at this one as well for example what i could be
你想让我们看一下这个以及例如我可以成为什么

1176
01:31:45,520 --> 01:31:50,560
doing inside of a string i could add as much white space as i want
在字符串内部做我可以添加为我想要多少空白

1177
01:31:50,560 --> 01:31:54,880
and this one is going to be reflected in the code i am running
这将反映在我正在运行的代码

1178
01:31:54,880 --> 01:31:59,120
what i can also do is add white space between the different
我还可以做什么是在不同的之间添加空白

1179
01:31:59,120 --> 01:32:03,040
parts of the code something like this would still work
部分代码像这样的东西仍然有效

1180
01:32:03,040 --> 01:32:06,320
just fine although granted in this case there
正好尽管在这种情况下被授予

1181
01:32:06,320 --> 01:32:09,600
isn't much reason to do something like this
没有太多理由做类似的事情这

1182
01:32:09,600 --> 01:32:13,040
i suppose something slightly more relevant might
我想稍微相关一些的东西可能

1183
01:32:13,040 --> 01:32:15,760
be we could add 1
是我们可以添加 1

1184
01:32:15,760 --> 01:32:20,320
plus 2 plus
加2加

1185
01:32:20,320 --> 01:32:24,320
4 and so on and for this line python would just
4 等等对于这一行，python 只会

1186
01:32:24,320 --> 01:32:28,800
ignore the white space meaning if i run this we are just getting the result
忽略空白意味着如果我运行我们刚刚得到结果

1187
01:32:28,800 --> 01:32:32,320
python doesn't care what you do between these lines
python 不关心你在两者之间做什么这些行

1188
01:32:32,320 --> 01:32:37,920
which i suppose you could be using for something like 5 multiplied by 5
我想你可能会用它类似于 5 乘以 5

1189
01:32:37,920 --> 01:32:41,199
and then plus 10
然后加上10

1190
01:32:41,199 --> 01:32:46,719
so you indicate which operation comes first the 5 multiplied by 5 although
所以你表明哪个操作来了首先是 5 乘以 5 虽然

1191
01:32:46,719 --> 01:32:51,760
still kind of a stretch what you can also do is use tab
仍然有些困难还可以使用选项卡

1192
01:32:51,760 --> 01:32:56,880
you can add this as much as you want python doesn't care it trades tabs like
你可以根据需要添加这个python 不在乎它像这样交换选项卡

1193
01:32:56,880 --> 01:33:00,960
white space that being said there's something really
空白话虽如此，确实有一些东西

1194
01:33:00,960 --> 01:33:04,320
important and that is
重要的那就是

1195
01:33:04,320 --> 01:33:08,080
python really cares about the indentation of an
Python真的很关心一个的缩进

1196
01:33:08,080 --> 01:33:13,040
entire line let me demonstrate this this is going to become incredibly important
整行让我演示一下这个将变得极其重要

1197
01:33:13,040 --> 01:33:16,400
later on what we have seen so far is that these
稍后的到目前为止我们所看到的是这些

1198
01:33:16,400 --> 01:33:22,239
annotations do not matter to python however what python does care about is
注释对 python 来说并不重要然而 python 真正关心的是

1199
01:33:22,239 --> 01:33:28,239
if this entire line is indented if i indent this entire line and run this
如果整行缩进如果我缩进整行并运行

1200
01:33:28,239 --> 01:33:32,880
again python is going to give me an error the error we are getting is called
python 又会给我一个error 我们收到的错误被称为

1201
01:33:32,880 --> 01:33:38,719
indentation error unexpected indent why that is you are going to learn later
缩进错误意外缩进原因那是你稍后会学到的

1202
01:33:38,719 --> 01:33:42,400
what you have to keep in mind for now is that inside of a line you can add as
你现在要记住的是您可以在行内添加为

1203
01:33:42,400 --> 01:33:46,960
much white space as you want but you couldn't add white space when you start
你想要多少空白，但你开始时无法添加空格

1204
01:33:46,960 --> 01:33:52,080
the line like here python is not going to like that but right there's one more
像这里这样的行 python 不会出现喜欢这个，但是还有一个

1205
01:33:52,080 --> 01:33:57,360
topic i do want to cover and that is how to break the line space
我确实想讨论的主题这就是如何打破行空间

1206
01:33:57,360 --> 01:34:02,560
or at least how to make it a bit more flexible because you can create multiple
或者至少如何让它变得更多一点灵活，因为您可以创建多个

1207
01:34:02,560 --> 01:34:06,880
lines of code in one line the reason here again
一行代码行的原因又是在这里

1208
01:34:06,880 --> 01:34:12,000
is what you see as a line and what python sees as a line are two separate
就是你看到的一条线python将一行视为两条独立的线

1209
01:34:12,000 --> 01:34:14,560
things if you want to be a bit more specific
事物如果你想更具体一点

1210
01:34:14,560 --> 01:34:18,880
about it what you see is a physical line
关于它你看到的是一条物理线

1211
01:34:18,880 --> 01:34:23,679
all that really means is whatever is in a single line of code it's as simple as
真正的意思是里面的任何东西一行代码就这么简单

1212
01:34:23,679 --> 01:34:27,440
that but what python sees is a logical line
那但python看到的是一条逻辑线

1213
01:34:27,440 --> 01:34:33,280
and this is what gets executed one step at a time let me demonstrate this one as
这就是一步执行的内容一次让我将其演示为

1214
01:34:33,280 --> 01:34:37,199
well actually let me clean all of this up actually so
实际上让我把这一切都清理干净吧

1215
01:34:37,199 --> 01:34:42,719
things are a bit easier to read we have two physical lines and two
事情更容易阅读我们有两条物理线路和两条

1216
01:34:42,719 --> 01:34:47,520
logical lines meaning what we see and what python sees is identical we have
逻辑线意味着我们所看到的和python 看到的和我们看到的是一样的

1217
01:34:47,520 --> 01:34:53,199
this line and we have this line however what i can do now is put both of
这条线，我们有这条线但是我现在能做的就是把两者都放在

1218
01:34:53,199 --> 01:34:58,239
these print statements on the same line and python isn't going to like this at
这些打印语句在同一行python 不会喜欢这个

1219
01:34:58,239 --> 01:35:02,320
all and the reason here is that for us this
全部原因是对我们来说

1220
01:35:02,320 --> 01:35:06,239
is one physical line and we can i guess read it
是一条物理线，我猜阅读

1221
01:35:06,239 --> 01:35:12,320
but to python this is one logical line now that doesn't make sense python can
但对于 python 来说这是一个逻辑线现在这没有意义 python 可以

1222
01:35:12,320 --> 01:35:15,600
only execute one of these functions at a time
只执行这些函数之一时间

1223
01:35:15,600 --> 01:35:21,119
it has to execute this line first and then this line second it cannot do them
它必须首先执行这一行并且那么这一行第二行就不能做到

1224
01:35:21,119 --> 01:35:24,320
at the same time which is why we are getting an error
同时这就是我们收到错误的原因

1225
01:35:24,320 --> 01:35:28,159
here although this logic you can break to
这里虽然这个逻辑你可以打破

1226
01:35:28,159 --> 01:35:32,400
some extent and there are two ways of doing that the
在一定程度上有两种方法可以做到这一点

1227
01:35:32,400 --> 01:35:37,920
first one is you can use a semicolon and this way you can separate a physical
第一个是你可以使用分号这样你就可以分离物理

1228
01:35:37,920 --> 01:35:42,239
line into logical lines all of this here would be a physical
行转换为逻辑行这里的所有这一切都将是物理上的

1229
01:35:42,239 --> 01:35:48,400
line but because of the semicolon python is going to break this one out into two
行但是因为分号 python将把这个一分为二

1230
01:35:48,400 --> 01:35:54,080
logical lines and is going to keep happy the opposite operation i suppose you
符合逻辑并且会保持快乐相反的操作我想你

1231
01:35:54,080 --> 01:35:59,840
could call it would be a forward slash this one is breaking two physical lines
可以称之为正斜杠这个打破了两条物理线

1232
01:35:59,840 --> 01:36:04,159
into one logical line this is something you are going to use
进入一个逻辑行这是你要使用的东西

1233
01:36:04,159 --> 01:36:07,840
fairly often if you have a really long operation
如果你有很长的一段时间，那么经常手术

1234
01:36:07,840 --> 01:36:11,920
the example here is we're just adding some numbers and at some point we ran
这里的例子是我们刚刚添加一些数字，在某个时刻我们跑了

1235
01:36:11,920 --> 01:36:16,320
out of monitor space as a consequence we wanted to have all of this on the same
由于监视器空间不足，我们想要将所有这些都放在同一个上

1236
01:36:16,320 --> 01:36:20,480
line meaning this is two physical lines but
线这意味着这是两条物理线，但是

1237
01:36:20,480 --> 01:36:25,520
because of the forward slash python turn all of this into one logical line and
因为正斜杠 python 转所有这些都集中在一个逻辑行中

1238
01:36:25,520 --> 01:36:30,159
keeps being happy so all is good and let's have a look at those two and
保持快乐所以一切都好让我们看看这两个

1239
01:36:30,159 --> 01:36:32,560
then we are done with this entire section
然后我们就完成了整个部分

1240
01:36:32,560 --> 01:36:36,239
and i guess we can start with the semicolon
我想我们可以从分号

1241
01:36:36,239 --> 01:36:41,199
if i put print and print on the same line run this again python is going to
如果我把 print 和 print 放在同一个上再次运行 python 行

1242
01:36:41,199 --> 01:36:45,600
be unhappy but if i put a semicolon between the two
不高兴，但如果我加一个分号两者之间

1243
01:36:45,600 --> 01:36:50,639
then python is going to remain happy because this semicolon is breaking a
那么 python 就会保持快乐因为这个分号打破了

1244
01:36:50,639 --> 01:36:56,400
logical line now that being said this semicolon you are probably never going
逻辑线既然这么说分号你可能永远不会去

1245
01:36:56,400 --> 01:37:01,360
to use or at the very least you are very rarely going to use it it really is very
使用或者至少你非常很少会使用它，它真的很

1246
01:37:01,360 --> 01:37:06,320
very uncommon what is however much more common is let
非常罕见然而更常见的是让

1247
01:37:06,320 --> 01:37:09,199
me create another variable let's call it a
我创建另一个变量我们称之为A

1248
01:37:09,199 --> 01:37:13,840
what you do see fairly often is some kind of very long math operation let's
你经常看到的是一些一种很长的数学运算让我们

1249
01:37:13,840 --> 01:37:20,320
say one plus two plus three plus four plus five and this could go on forever
说一加二加三加四加五，这可能会永远持续下去

1250
01:37:20,320 --> 01:37:24,480
and you want to break this up and for that you would use forward slash and
你想要打破这个局面你会使用正斜杠和

1251
01:37:24,480 --> 01:37:29,040
then on the next line you can continue writing the line as you would normally
然后在下一行你可以继续像平常一样写下该行

1252
01:37:29,040 --> 01:37:34,080
do meaning i could add a plus 6 plus 7 plus
做这意味着我可以添加 plus 6 plus 7 plus

1253
01:37:34,080 --> 01:37:38,719
8 and so on if i now print a
8 等等如果我现在打印一个

1254
01:37:38,719 --> 01:37:42,239
and run this we are getting a proper result
运行这个我们得到一个正确的结果

1255
01:37:42,239 --> 01:37:47,040
keeping your code readable is a priority that you want to keep in mind and the
保持代码可读是首要任务您要记住的内容以及

1256
01:37:47,040 --> 01:37:52,000
forward slash is really useful for that but right with that we have all of the
正斜杠对此非常有用但就这样我们就拥有了所有的

1257
01:37:52,000 --> 01:37:56,800
basics covered in this section we are going to cover
涵盖的基础知识在本节中我们将介绍

1258
01:37:56,800 --> 01:38:01,840
data types and this is going to be an incredibly important part because
数据类型，这将是非常重要的部分，因为

1259
01:38:01,840 --> 01:38:06,159
understanding data types is one of the most fundamental things you have to
理解数据类型是其中之一你必须做的最基本的事情

1260
01:38:06,159 --> 01:38:11,520
understand about programming python does have quite a few different data types we
了解 python 编程确实我们有很多不同的数据类型

1261
01:38:11,520 --> 01:38:16,480
have actually seen some already the one that we have used the most is words
实际上已经看到了一些我们用得最多的是词语

1262
01:38:16,480 --> 01:38:21,119
which is just a string it really is just a fancy word that
这只是一个字符串这确实只是一个花哨的词

1263
01:38:21,119 --> 01:38:24,239
programmers use we are just talking about words
程序员使用我们只是在说话关于词语

1264
01:38:24,239 --> 01:38:28,080
besides that we have also used different kind of numbers
除此之外我们还使用了不同的数字的种类

1265
01:38:28,080 --> 01:38:33,119
we have seen integers and we have seen floating point numbers
我们已经看到了整数并且我们已经看到了浮点数字

1266
01:38:33,119 --> 01:38:37,440
the only difference between the two is that floating point numbers has decimal
两者之间唯一的区别是浮点数有小数

1267
01:38:37,440 --> 01:38:41,920
points whereas integers are always full numbers
点，而整数总是满的数字

1268
01:38:41,920 --> 01:38:45,840
the reason why that is is quite technical and you don't have to worry
这是因为技术性的，您不必担心

1269
01:38:45,840 --> 01:38:50,320
about it you can work with them very very easily and they are basically
关于它你可以和他们一起工作很容易，他们基本上是

1270
01:38:50,320 --> 01:38:54,800
interchangeable from your point of view there are only very rare exceptions
从你的角度来看可以互换只有极少数例外

1271
01:38:54,800 --> 01:38:58,639
where that is not the case and those exceptions you probably are
情况并非如此以及你可能属于的例外情况

1272
01:38:58,639 --> 01:39:02,800
not going to come across unless again to some very specific topics
不会遇到除非再次一些非常具体的主题

1273
01:39:02,800 --> 01:39:07,920
besides that there's one more data type that we have seen as well and that is a
除此之外还有一种数据类型我们也看到了，那就是

1274
01:39:07,920 --> 01:39:12,400
boolean and boolean data types can only ever have two values
boolean 和 boolean 数据类型只能曾经有两个值

1275
01:39:12,400 --> 01:39:16,719
they are either true or false and in the context where we have seen
它们要么是真要么是假在我们所看到的背景下

1276
01:39:16,719 --> 01:39:21,600
them is some kind of math operation for example 10 is greater than 5
它们是某种数学运算示例 10 大于 5

1277
01:39:21,600 --> 01:39:27,040
was true these boolean values you are going to work quite a lot later with to
这些布尔值是真的稍后要工作很多

1278
01:39:27,040 --> 01:39:31,679
organize the flow of your code for example you might only want to run some
组织你的代码流程例如你可能只想运行一些

1279
01:39:31,679 --> 01:39:38,400
code if a certain condition is true besides those four data types python has
如果某个条件为真，则代码除了这四种数据类型Python还有

1280
01:39:38,400 --> 01:39:43,520
quite a few more some are more important some are less important but there are
还有很多一些比较重要有些不太重要，但有

1281
01:39:43,520 --> 01:39:48,639
four that you absolutely have to know and let's start with the easiest one a
四个你绝对必须知道的让我们从最简单的开始

1282
01:39:48,639 --> 01:39:51,920
list this is basically just a container to
列表这基本上只是一个容器

1283
01:39:51,920 --> 01:39:58,000
store other data types for example in this list right now we have three values
存储其他数据类型，例如现在这个列表有三个值

1284
01:39:58,000 --> 01:40:03,040
we have one and two and both of those are integers
我们有一个和两个，两个都有是整数

1285
01:40:03,040 --> 01:40:08,080
and besides that we have a string which is just a word you could also
除此之外我们还有一个字符串这只是一个词，你也可以

1286
01:40:08,080 --> 01:40:13,199
store boolean or floating point numbers and you could even store a list inside
存储布尔值或浮点数你甚至可以在里面存储一个列表

1287
01:40:13,199 --> 01:40:17,040
of another list python really is flexible here
另一个列表的python在这里确实很灵活

1288
01:40:17,040 --> 01:40:22,719
besides that we have tuples we have sets and we have dictionaries
除此之外我们还有元组我们还有集合我们有字典

1289
01:40:22,719 --> 01:40:27,840
and all four of those data types are just there to store other values
所有这四种数据类型都是只是用来存储其他值

1290
01:40:27,840 --> 01:40:32,480
the difference between them is that they are storing data slightly differently
他们之间的区别在于他们存储数据略有不同

1291
01:40:32,480 --> 01:40:37,679
a list and a tuple differ because a list can be changed
一个列表和一个元组有所不同，因为列表可以更改

1292
01:40:37,679 --> 01:40:43,840
whereas a tuple cannot be changed a set would be different because every
而元组不能更改一组会有所不同，因为每个

1293
01:40:43,840 --> 01:40:49,040
value inside of it has to be unique and there are a lot of ways to compare
它内部的价值必须是唯一的有很多方法可以比较

1294
01:40:49,040 --> 01:40:53,840
different sets to filter out data and finally a dictionary
不同的集合来过滤数据最后是一本字典

1295
01:40:53,840 --> 01:40:58,880
is a much more organized way to store your data in here we always have a name
是一种更有组织性的存储方式您在这里的数据我们总是有一个名字

1296
01:40:58,880 --> 01:41:02,480
and then a data type i am going to go through all of those in
然后是数据类型我将详细介绍所有这些内容

1297
01:41:02,480 --> 01:41:07,119
detail throughout this section and then we are going to go in quite some detail
本节的详细信息，然后我们将详细介绍

1298
01:41:07,119 --> 01:41:09,840
into all of them besides those
进入他们所有人除了那些

1299
01:41:09,840 --> 01:41:14,400
there are also some data types that are much less common i will cover those at
还有一些数据类型不太常见，我将在以下位置介绍这些内容

1300
01:41:14,400 --> 01:41:18,639
the end of this section they really aren't that important but you do want to
本节结束时他们真的没那么重要，但你确实想要

1301
01:41:18,639 --> 01:41:23,199
be aware of where they appear and why they matter
了解它们出现的位置和原因他们很重要

1302
01:41:23,199 --> 01:41:27,520
but generally python is incredibly relaxed about
但一般来说python 非常轻松

1303
01:41:27,520 --> 01:41:31,600
different data types most of the time you are actually not even going to
大多数时候不同的数据类型实际上你根本不打算

1304
01:41:31,600 --> 01:41:35,760
notice for example if you have an integer and a floating
例如通知如果你有一个整数和一个浮点数

1305
01:41:35,760 --> 01:41:41,679
point number for example this could be 1 plus 1.2
点数例如这可能是 1 加 1.2

1306
01:41:41,679 --> 01:41:46,239
and python here would automatically convert these two numbers into a
这里的 python 会自动将这两个数字转换成

1307
01:41:46,239 --> 01:41:52,000
floating point number with 2.2 you have essentially combined different
浮点数与2.2你本质上结合了不同的

1308
01:41:52,000 --> 01:41:57,520
data types but because python is so flexible about it you didn't even notice
数据类型但是因为python是如此你甚至没有注意到它的灵活性

1309
01:41:57,520 --> 01:42:01,040
which is one of the main reasons why integers and floating point numbers
这是主要原因之一整数和浮点数

1310
01:42:01,040 --> 01:42:05,280
especially for beginners are basically identical and you never have to worry
特别是对于初学者来说基本上完全相同，您无需担心

1311
01:42:05,280 --> 01:42:09,760
about them on top of that python also has a ton of
关于他们除此之外，Python 还有大量

1312
01:42:09,760 --> 01:42:14,400
functionality to change different data types i'm going to cover that very soon
更改不同数据的功能我很快就会介绍这些类型

1313
01:42:14,400 --> 01:42:17,520
as well let's get started by talking about
还有让我们开始讨论

1314
01:42:17,520 --> 01:42:24,000
integers and floats or well just numbers and i just covered them but just as a
整数和浮点数或者只是数字我刚刚涵盖了它们，但只是作为

1315
01:42:24,000 --> 01:42:26,880
recap we are creating numbers either with
回顾我们正在创建数字

1316
01:42:26,880 --> 01:42:31,360
integers or with floating point numbers and again the only difference between
整数或浮点数再次，两者之间唯一的区别

1317
01:42:31,360 --> 01:42:36,239
the two is decimal points for floating point numbers and integers are always
两位是浮动小数点点数和整数总是

1318
01:42:36,239 --> 01:42:38,800
full numbers again
完整数字再次

1319
01:42:38,800 --> 01:42:43,119
the difference is because of how computers work but you really don't have
区别在于如何电脑可以工作，但你确实没有

1320
01:42:43,119 --> 01:42:47,520
to worry about it the most important thing for you is that all math operators
担心它最重要对你来说，所有数学运算符

1321
01:42:47,520 --> 01:42:53,280
work just as normal meaning if you add an integer and a floating point number
如果添加的话，就像正常的意思一样工作一个整数和一个浮点数

1322
01:42:53,280 --> 01:42:58,080
you are getting a floating point number let's have a look at some examples
你得到一个浮点数让我们看一些例子

1323
01:42:58,080 --> 01:43:02,400
and a really useful function to understand what data type you're working
和一个非常有用的功能了解您正在使用的数据类型

1324
01:43:02,400 --> 01:43:08,960
with is called type if i write type and then add an integer so a one in here
如果我写 type and 则 with 称为 type然后在此处添加一个整数，即 1

1325
01:43:08,960 --> 01:43:12,480
python is going to tell me what data type i am working with
python 会告诉我什么数据我正在使用的类型

1326
01:43:12,480 --> 01:43:16,239
and again we have to print the result so we can
然后再次我们必须打印结果以便我们可以

1327
01:43:16,239 --> 01:43:22,080
see something if i run the code now we're getting class and integer what a
如果我现在运行代码，会看到一些东西我们得到了类和整数

1328
01:43:22,080 --> 01:43:25,520
class is you're going to learn much later in this series
课堂上你会学到很多东西在本系列的后面部分

1329
01:43:25,520 --> 01:43:30,080
but the important thing for now is the integer this is the kind of data type we
但现在最重要的是整数，这是我们的数据类型

1330
01:43:30,080 --> 01:43:34,880
are working with if i change this 1 to a 1.1
正在与如果我把这个 1 改成 1.1

1331
01:43:34,880 --> 01:43:38,800
then we are getting a float or a floating point value
然后我们得到一个浮点数或一个浮点值

1332
01:43:38,800 --> 01:43:42,400
which means you are working with different data types
这意味着您正在与不同的数据类型

1333
01:43:42,400 --> 01:43:47,520
you could also add a string in here so a word let's say a
您还可以在此处添加一个字符串，以便让我们说一个

1334
01:43:47,520 --> 01:43:53,920
word that is horrible spelling but you get the idea and we have sdr for string
这个词的拼写很糟糕，但是你明白了，我们有字符串的 sdr

1335
01:43:53,920 --> 01:44:00,080
let's stick to a1 actually we don't need to type at all anymore instead what we
让我们坚持 a1 实际上我们不需要不再输入我们所输入的内容

1336
01:44:00,080 --> 01:44:02,400
can look at is
可以看看是

1337
01:44:02,400 --> 01:44:06,880
the conversion between different data types and for numbers this is all
不同数据之间的转换类型和数字这就是全部

1338
01:44:06,880 --> 01:44:09,360
automatic and here
自动的和这里

1339
01:44:09,360 --> 01:44:14,400
i could just type 1 plus 1 plus 1 and we get 2.1
我可以只输入 1 加 1 加 1，我们得到2.1

1340
01:44:14,400 --> 01:44:19,119
since this does have a decimal point we have a floating point value
因为这确实有小数点，我们有浮点值

1341
01:44:19,119 --> 01:44:23,199
although if you didn't know this specifically you would never notice
虽然如果你不知道这一点特别是你永远不会注意到

1342
01:44:23,199 --> 01:44:27,920
although i guess sometimes this can be slightly weird we have actually seen
虽然我想有时这可能是我们实际看到的有点奇怪

1343
01:44:27,920 --> 01:44:33,520
this very early on in this entire series if you divide any number by another
这是整个系列的早期部分如果你将任何数字除以另一个数字

1344
01:44:33,520 --> 01:44:39,280
number let's say 10 divided by 5 i am going to get a floating point
数字比方说 10 除以 5我要得到一个浮点数

1345
01:44:39,280 --> 01:44:42,880
number even though i wouldn't necessarily need it
即使我不会的数字必然需要它

1346
01:44:42,880 --> 01:44:47,280
and this always happens in python you can't really get around it
这在Python中总是发生无法真正绕过它

1347
01:44:47,280 --> 01:44:51,119
but that is basically all you have to know about numbers in python in terms of
但这基本上就是你所要做的了解 python 中的数字

1348
01:44:51,119 --> 01:44:56,480
data types python here is really flexible and makes all of this very easy
python 这里的数据类型确实是灵活，让这一切变得非常简单

1349
01:44:56,480 --> 01:45:00,400
which does make it much easier than most other programming languages
这确实比大多数人容易得多其他编程语言

1350
01:45:00,400 --> 01:45:06,159
i guess one thing we can cover as well is let me add this on the next line
我想我们也可以讨论一件事让我在下一行添加这个

1351
01:45:06,159 --> 01:45:10,960
you can use functions to convert different data types for example
你可以使用函数来转换例如不同的数据类型

1352
01:45:10,960 --> 01:45:15,760
let me print something again and i have a integer
让我再打印一些东西，我已经一个整数

1353
01:45:15,760 --> 01:45:22,080
let's say 2 and i really want to convert this integer into a floating point
假设 2 我真的很想转换将此整数转换为浮点数

1354
01:45:22,080 --> 01:45:26,239
number one way of doing this is to add 0.0 to
数字一种方法是将 0.0 添加到

1355
01:45:26,239 --> 01:45:33,360
it if i run this now we get 2.0 although this isn't exactly elegant so we're not
如果我现在运行这个，我们会得到 2.0这不太优雅，所以我们不

1356
01:45:33,360 --> 01:45:38,239
going to use it a better way would be to use a function
将要使用它更好的方法是使用函数

1357
01:45:38,239 --> 01:45:43,679
that is called float and float converts any kind of integer into a floating
这就是所谓的浮点和浮点转换任何类型的整数转换为浮点数

1358
01:45:43,679 --> 01:45:48,639
point value if i run this now we're getting the same result
点值如果我现在运行这个我们是得到相同的结果

1359
01:45:48,639 --> 01:45:52,239
you can see it's a float because we have a decimal
你可以看到它是一个浮点数，因为我们有一个小数

1360
01:45:52,239 --> 01:45:56,560
this would also work the other way around let me put this on the next line
这也可以以另一种方式工作让我把它放在下一行

1361
01:45:56,560 --> 01:46:02,639
if i print a number like let's use something else 5.1
如果我打印一个数字，比如让我们使用其他5.1

1362
01:46:02,639 --> 01:46:06,800
if i want to convert this 5.1 into an integer
如果我想把这个 5.1 转换成整数

1363
01:46:06,800 --> 01:46:09,199
i could use the
我可以用这

1364
01:46:09,199 --> 01:46:15,920
int function or int for integer if i run this i am only getting 5
int 函数或 int 表示整数如果我运行这个我只会得到 5

1365
01:46:15,920 --> 01:46:20,880
because remember integers are always 4 numbers we do not have values after
因为记住整数总是 4后面没有值的数字

1366
01:46:20,880 --> 01:46:27,280
decimal so we are losing some data also keep in mind when you are using int
小数所以我们丢失了一些数据当你使用 int 时还要记住

1367
01:46:27,280 --> 01:46:31,520
you are not rounding the operation you are doing is truncating
你没有四舍五入你的操作正在做的是截断

1368
01:46:31,520 --> 01:46:35,280
and truncating means we are getting rid of anything
截断意味着我们正在摆脱任何东西

1369
01:46:35,280 --> 01:46:41,600
after the decimal point which means if i had 5.9
小数点后这意味着如果我有 5.9

1370
01:46:41,600 --> 01:46:47,360
and run all of this again we are still getting 5. if you wanted to round you
再次运行所有这些我们仍然得到5.如果你想圆你

1371
01:46:47,360 --> 01:46:51,199
would use round and then you were getting 6.
会用圆形然后你就得到了 6。

1372
01:46:51,199 --> 01:46:56,080
it would also return an integer because again we don't have any decimal point
它还会返回一个整数，因为再说一遍，我们没有小数点

1373
01:46:56,080 --> 01:47:00,560
now there's one thing that you do want to be really careful about and that is
现在你确实想要一件事要非常小心，那就是

1374
01:47:00,560 --> 01:47:05,199
that floating point numbers sometimes can get really weird especially if you
有时浮点数可能会变得很奇怪，尤其是如果你

1375
01:47:05,199 --> 01:47:10,159
combine integers and floating point numbers for example if i print
结合整数和浮点数例如，如果我打印数字

1376
01:47:10,159 --> 01:47:17,040
1.1 times 3 what we would be expecting here is 3.3
1.1倍3我们期望的是 3.3

1377
01:47:17,040 --> 01:47:23,360
however if i run the code we are getting something really weird three point three
但是如果我运行我们得到的代码一些非常奇怪的三点三

1378
01:47:23,360 --> 01:47:27,920
and then zero a lot and then a three at the end
然后归零很多，最后是三

1379
01:47:27,920 --> 01:47:33,760
technically this result is wrong it resulted because floating point numbers
从技术上讲这个结果是错误的结果是因为浮点数

1380
01:47:33,760 --> 01:47:39,119
are kind of weird in computers now that being said in most cases
在计算机中有点奇怪现在大多数情况下都这么说

1381
01:47:39,119 --> 01:47:44,000
this error here makes absolutely no difference because it's such a small
这里的这个错误绝对不会差异因为它是如此之小

1382
01:47:44,000 --> 01:47:49,600
deviation you are never going to notice it but do keep it in mind you generally
你永远不会注意到的偏差但一般情况下请记住这一点

1383
01:47:49,600 --> 01:47:54,400
want to avoid floating point numbers because they can add some arithmetic
想要避免浮点数因为他们可以添加一些算术

1384
01:47:54,400 --> 01:47:59,040
errors once in a while generally integers are much easier and
偶尔会出现错误一般来说整数更容易并且

1385
01:47:59,040 --> 01:48:02,880
much cleaner to work with but obviously sometimes you just have to
工作起来更干净但显然有时你只需要

1386
01:48:02,880 --> 01:48:07,280
use floating point numbers and then you can just use them they work just fine in
使用浮点数然后你可以使用它们，它们工作得很好

1387
01:48:07,280 --> 01:48:12,000
basically all circumstances the next data type i want to talk about
基本上所有情况我想谈的下一个数据类型

1388
01:48:12,000 --> 01:48:17,360
are strings and this is the one we have seen a lot by now all we're talking here
是字符串，这就是我们拥有的字符串到目前为止我们已经看到了很多我们在这里谈论的内容

1389
01:48:17,360 --> 01:48:21,679
are words and this is something we do have to talk
是词这是我们必须要谈的事情

1390
01:48:21,679 --> 01:48:26,560
quite a lot about because we are going to use them extensively
很多关于因为我们要去广泛使用它们

1391
01:48:26,560 --> 01:48:30,880
strings are created either with single or with double quotation marks you could
字符串可以用 single 创建或者用双引号你可以

1392
01:48:30,880 --> 01:48:35,920
either write word with single quotation marks this one and this one
要么用单引号写单词标记这个和这个

1393
01:48:35,920 --> 01:48:40,560
or you could use double quotation marks this one and this one python really
或者你可以使用双引号这个和这个蟒蛇真的

1394
01:48:40,560 --> 01:48:44,960
doesn't care the only limitation is that you have to stick to the same kind of
不在乎唯一的限制是你必须坚持同一种

1395
01:48:44,960 --> 01:48:48,560
quotation mark you couldn't add a single quotation mark
引号你不能添加单引号

1396
01:48:48,560 --> 01:48:51,679
and then end with a double quotation mark
然后以双引号结束标记

1397
01:48:51,679 --> 01:48:56,239
and strings have a ton of methods to manipulate them i guess some examples we
字符串有很多方法可以操纵它们我想我们举一些例子

1398
01:48:56,239 --> 01:49:02,000
have seen are upper is numeric and strip what we haven't seen yet is you can also
见过的是上面是数字和条带我们还没有看到的是你也可以

1399
01:49:02,000 --> 01:49:07,280
use strings with math operations for example if you add hello plus world you
使用带有数学运算的字符串例如，如果你添加 hello plus world 你

1400
01:49:07,280 --> 01:49:11,679
are combining these two strings we are going to explore that functionality a
将这两个字符串组合在一起将探索该功能

1401
01:49:11,679 --> 01:49:16,239
bit more in this section besides that you can also add values
本节内容更多除此之外你还可以添加值

1402
01:49:16,239 --> 01:49:20,800
into strings in quite a few different ways the most important concept here
分成多种不同的字符串这里最重要的概念

1403
01:49:20,800 --> 01:49:23,440
that you have to understand are f strings
你必须明白的是f字符串

1404
01:49:23,440 --> 01:49:28,080
you will see in a second what that means it's basically another kind of method
你很快就会明白这意味着什么这基本上是另一种方法

1405
01:49:28,080 --> 01:49:32,080
and finally we can also cover how to write over
最后我们还可以介绍如何重写

1406
01:49:32,080 --> 01:49:36,800
multiple lines and how to add quotation marks inside of a string
多行以及如何添加报价字符串内部的标记

1407
01:49:36,800 --> 01:49:41,199
and that's a ton of stuff to cover so let's have a look at all of this
有很多东西需要涵盖让我们看看这一切

1408
01:49:41,199 --> 01:49:44,880
let's start by creating some test variable
让我们首先创建一些测试多变的

1409
01:49:44,880 --> 01:49:49,679
and in here to create a string we can either use single quotation marks or
在这里创建一个字符串我们可以使用单引号或

1410
01:49:49,679 --> 01:49:52,639
double quotation marks i guess let's start with single
双引号我想我们先从单身开始吧

1411
01:49:52,639 --> 01:49:58,400
quotation marks let's call it test 1 and then for test variable 2
引号让我们称之为测试 1然后对于测试变量 2

1412
01:49:58,400 --> 01:50:02,719
we can have double quotation marks with test 2.
我们可以用双引号测试2.

1413
01:50:02,719 --> 01:50:07,119
if i run the code now all of this is going to work just fine
如果我现在运行代码，所有这些都是会正常工作

1414
01:50:07,119 --> 01:50:12,320
as a matter of fact if i print testvar1 and testvar2
事实上，如果我打印 testvar1和测试变量2

1415
01:50:12,320 --> 01:50:17,040
both of them are going to give the same result python does not care if we use
他们都会给予相同的结果 python 不关心我们是否使用

1416
01:50:17,040 --> 01:50:21,440
double or single quotation marks the one thing python does care about is that we
双引号或单引号标记一个python 真正关心的是我们

1417
01:50:21,440 --> 01:50:25,679
do not mix quotation marks meaning something like this wouldn't work if i
不要混淆引号的含义如果我这样的话就行不通

1418
01:50:25,679 --> 01:50:28,800
run it we are getting a syntax error
运行我们收到语法错误

1419
01:50:28,800 --> 01:50:33,040
undetermined string literal i think the reason here should be quite obvious it
未确定的字符串文字我认为这里的原因应该很明显吧

1420
01:50:33,040 --> 01:50:37,599
would be very strange what i also want to do starting from
会很奇怪我也想做从

1421
01:50:37,599 --> 01:50:42,080
well now is to comment my code so it's going to be a bit easier to read when
现在是评论我的代码所以它是会更容易阅读

1422
01:50:42,080 --> 01:50:47,679
you read through it and this section here is about quotes
你读完它这一部分是关于报价的

1423
01:50:47,679 --> 01:50:51,599
for strings along with that there's one important
对于字符串除此之外还有一个重要的

1424
01:50:51,599 --> 01:50:58,239
thing that we do have to cover and that is quotes inside of strings
我们必须涵盖的事情是字符串内的引号

1425
01:50:58,239 --> 01:51:03,920
what that means let me create another test variable let's call it testvar3
这意味着什么让我创建另一个测试变量我们称之为 testvar3

1426
01:51:03,920 --> 01:51:08,719
and let's do an example let's say i have the case
让我们举个例子，假设我有案子

1427
01:51:08,719 --> 01:51:14,159
that he said and then i want other quotation marks
他说的然后我想要其他引号

1428
01:51:14,159 --> 01:51:16,880
this was great
这是伟大的

1429
01:51:16,880 --> 01:51:21,840
and let me add a bit of white space here so this is easier to understand
让我在这里添加一些空白所以这更容易理解

1430
01:51:21,840 --> 01:51:27,440
we are using quotation marks here and here and that way we are creating a
我们在这里使用引号在这里和那样我们正在创建一个

1431
01:51:27,440 --> 01:51:31,360
string inside of this string though we have
细绳尽管我们有这个字符串的内部

1432
01:51:31,360 --> 01:51:34,719
another quote and you can already see by the colors
另一个报价你已经可以从颜色看出

1433
01:51:34,719 --> 01:51:38,080
here python is not exactly happy about it
python对此不太满意它

1434
01:51:38,080 --> 01:51:42,480
if i run out of this we are getting an error invalid syntax
如果我用完了这个我们收到错误语法无效

1435
01:51:42,480 --> 01:51:46,320
python just doesn't know what to make of it
python 只是不知道该怎么做它

1436
01:51:46,320 --> 01:51:50,639
as far as python is concerned we are starting a string here and we are
就Python而言我们在这里开始一个字符串，我们是

1437
01:51:50,639 --> 01:51:55,520
ending the string here then we are adding some random words and
在此结束字符串然后我们添加一些随机单词

1438
01:51:55,520 --> 01:52:01,440
then we are creating another string the reason now where python is confused
然后我们创建另一个字符串现在 python 感到困惑的原因

1439
01:52:01,440 --> 01:52:06,800
is because these three words are neither variables nor inbuilt functions so
是因为这三个词都不是变量或内置函数所以

1440
01:52:06,800 --> 01:52:10,719
python just doesn't know what to do with them and it gives us an error so how can
python 只是不知道该怎么办他们，这给了我们一个错误，那么如何才能

1441
01:52:10,719 --> 01:52:14,719
we get around it and there are two ways of doing this
我们可以解决这个问题，有两种方法这样做的

1442
01:52:14,719 --> 01:52:18,880
the first one that you are probably going to use the most is to mix the
你可能是第一个最常用的是混合

1443
01:52:18,880 --> 01:52:22,560
quotation marks now we have
引号现在我们有

1444
01:52:22,560 --> 01:52:27,520
single quotation marks to create a string and inside of the string we have
单引号来创建字符串和字符串的内部

1445
01:52:27,520 --> 01:52:32,400
double quotation marks to explain that we have a quote this
双引号解释一下我们有一个报价

1446
01:52:32,400 --> 01:52:39,840
python is completely fine with let me print it actually testvar free
python 完全没问题让我免费打印它

1447
01:52:39,840 --> 01:52:44,480
if i run this now we are getting he said this was great python has no problem
如果我现在运行这个，我们就会听到他说这太棒了 python 没有问题

1448
01:52:44,480 --> 01:52:48,800
with that and let me remove the white space that
接着就，随即让我删除空白

1449
01:52:48,800 --> 01:52:51,360
should make all of this a bit easier to read
应该让这一切变得更容易读

1450
01:52:51,360 --> 01:52:54,560
while we add it i also want to comment out
在我们添加它的同时我也想发表评论出去

1451
01:52:54,560 --> 01:52:59,280
this stuff here at the top so things are a bit easier to see now if i run this we
这个东西在顶部所以事情是如果我运行这个，现在更容易看到

1452
01:52:59,280 --> 01:53:02,639
can see we have quotes inside of a string
可以看到 a 里面有引号细绳

1453
01:53:02,639 --> 01:53:05,199
this would also work the other way around
这也可以以另一种方式工作大约

1454
01:53:05,199 --> 01:53:10,159
if i start with double quotation marks and end with double quotation marks
如果我以双引号开头并以双引号结尾

1455
01:53:10,159 --> 01:53:13,119
then inside of here
然后这里的里面

1456
01:53:13,119 --> 01:53:18,400
i can add single quotation marks like this run it again and we would also see
我可以添加单引号，例如再次运行它，我们也会看到

1457
01:53:18,400 --> 01:53:21,440
the result now we have single quotation marks
结果现在我们有单引号分数

1458
01:53:21,440 --> 01:53:27,440
this would be one way to approach this although this system has its limitation
这将是解决这个问题的一种方法虽然这个系统有其局限性

1459
01:53:27,440 --> 01:53:33,119
for example if i add a test var4 and in here
例如，如果我添加一个测试 var4在这里

1460
01:53:33,119 --> 01:53:39,040
we want to have for whatever reason a single quotation mark a double quotation
无论出于何种原因，我们都希望有一个单引号 双引号

1461
01:53:39,040 --> 01:53:43,599
mark and then a single quotation mark as well
标记，然后用单引号标记为出色地

1462
01:53:43,599 --> 01:53:49,679
and this would just not work python would just get very confused
这是行不通的python 会变得非常困惑

1463
01:53:49,679 --> 01:53:54,400
not exactly something you would do all the time but it might come up once every
不完全是你会做的事情时间，但可能会出现一次

1464
01:53:54,400 --> 01:53:59,199
year and then you have a problem to overcome this you need what is called an
年，然后你有一个问题克服这个你需要所谓的

1465
01:53:59,199 --> 01:54:03,199
escape character let me add a comment and escape
转义字符让我添加评论并逃脱

1466
01:54:03,199 --> 01:54:09,840
character an escape character is again a forward slash and this you need in front
字符转义字符又是a正斜杠，你需要在前面

1467
01:54:09,840 --> 01:54:15,119
of every character you want python to just interpret as a string
你想要 python 处理的每个字符只是解释为一个字符串

1468
01:54:15,119 --> 01:54:18,719
and this you need in front of every character you want python to interpret
这是你在每个人面前都需要的你想要 python 解释的字符

1469
01:54:18,719 --> 01:54:22,800
as a normal character so in my case i want this escape
作为一个正常角色所以就我而言，我想要这种逃避

1470
01:54:22,800 --> 01:54:26,400
character in front of my double quotation mark and my single quotation
在我的替身面前的角色引号和我的单引号

1471
01:54:26,400 --> 01:54:31,119
mark and now you can see the comment appears as a proper comment
标记一下，现在就可以看到评论了显示为正确的评论

1472
01:54:31,119 --> 01:54:35,119
if i print it i can see the two quotation marks this
如果我打印它我可以看到这两个引号

1473
01:54:35,119 --> 01:54:40,000
way you can literally add any kind of character without disturbing your code
你可以从字面上添加任何类型的方式字符而不干扰您的代码

1474
01:54:40,000 --> 01:54:44,960
as a matter of fact let me rename this to simple escape character because
事实上让我重命名它简单的转义字符，因为

1475
01:54:44,960 --> 01:54:49,760
escaped characters can do quite a bit which means i want to add another
转义字符可以做很多事情这意味着我想添加另一个

1476
01:54:49,760 --> 01:54:56,080
comment for escape characters what we can do in here let me comment
转义字符的注释我们可以在这里做什么让我发表评论

1477
01:54:56,080 --> 01:55:01,679
out the earlier part and now i want to have a test var
出前面的部分现在我想要一个测试变量

1478
01:55:01,679 --> 01:55:04,560
five and for this one i want to print some
五对于这个我想打印一些

1479
01:55:04,560 --> 01:55:09,520
text over multiple lines let's say i want to have line 1
多行文本假设我想要 1 号线

1480
01:55:09,520 --> 01:55:12,719
[Music] some text
[音乐]一些文字

1481
01:55:12,719 --> 01:55:18,880
and then i want to have line 2 some more text
然后我想要2号线更多文字

1482
01:55:18,880 --> 01:55:24,960
and i want to tell python that this should be over multiple lines of code
我想告诉 python 这应该是多行代码

1483
01:55:24,960 --> 01:55:29,280
for example if you want to build some kind of text editor you want to store
例如，如果你想构建一些您要存储的文本编辑器类型

1484
01:55:29,280 --> 01:55:33,599
all of the text inside of one string but when you present a string you want to
一个字符串内的所有文本，但是当你呈现一个你想要的字符串时

1485
01:55:33,599 --> 01:55:37,440
have line breaks between them how could you do that
它们之间有换行符怎么可能你做吧

1486
01:55:37,440 --> 01:55:41,520
i guess let me print the test bar first if i run this
我想让我先打印测试条如果我运行这个

1487
01:55:41,520 --> 01:55:47,119
we get all of this on one line and to create a line break in here we
我们将所有这些都集中在一条线上并在这里创建一个换行符

1488
01:55:47,119 --> 01:55:52,000
need once again the forward slash and then the letter n
再次需要正斜杠和然后是字母n

1489
01:55:52,000 --> 01:55:57,440
if i run this now we are getting those two lines on well different lines
如果我现在运行这个我们会得到那些两条线在不同的线上

1490
01:55:57,440 --> 01:56:03,280
forward slash n tells python that we want to add a line break between these
正斜杠 n 告诉 python 我们想要在这些之间添加换行符

1491
01:56:03,280 --> 01:56:07,679
two different parts of the string there are actually quite a few more for
字符串的两个不同部分实际上还有很多

1492
01:56:07,679 --> 01:56:14,320
example forward slash t is adding a tab inside of your string
示例正斜杠 t在字符串中添加一个制表符

1493
01:56:14,320 --> 01:56:19,440
there's also forward slash r this one adds another kind of line break you
还有正斜杠 r 这个添加另一种换行符

1494
01:56:19,440 --> 01:56:23,599
don't really have to know the difference here for your purposes work essentially
真的不必知道其中的区别这里基本上是为了你的目的而工作

1495
01:56:23,599 --> 01:56:27,679
the same forward slash n though is the most
相同正斜杠 n 虽然是最多的

1496
01:56:27,679 --> 01:56:31,040
common one so that way you can write text over
常见的一个这样你就可以写文字了

1497
01:56:31,040 --> 01:56:34,239
multiple lines besides that
多行除此之外

1498
01:56:34,239 --> 01:56:38,000
let me add multiple lines as a comment here
让我添加多行作为评论这里

1499
01:56:38,000 --> 01:56:42,320
there's another way to write multiple lines and this is one way we have
还有另一种方法可以写多个线，这是我们的一种方式

1500
01:56:42,320 --> 01:56:47,440
actually already seen what you need here are triple quotation
其实已经看过了你需要的是三重引号

1501
01:56:47,440 --> 01:56:50,239
marks something that python by default
分数默认情况下 python 的东西

1502
01:56:50,239 --> 01:56:53,280
considers a comment
认为评论

1503
01:56:53,280 --> 01:56:58,080
however if you assign this comment here to a variable let's
但是如果你分配这个注释在这里是一个变量让我们

1504
01:56:58,080 --> 01:57:01,920
call this one test var six
将此称为测试变量六

1505
01:57:01,920 --> 01:57:05,599
all of a sudden it changes the color and it becomes a
突然间它改变了颜色，变成了

1506
01:57:05,599 --> 01:57:09,199
string and this string is kind of special
细绳这个字符串有点特殊

1507
01:57:09,199 --> 01:57:13,440
because for this one python does respect the white space
因为对于这个Python确实尊重空白区域

1508
01:57:13,440 --> 01:57:18,159
which means now i can press space end up on another physical line
这意味着现在我可以按空格键最终到达另一条物理线路

1509
01:57:18,159 --> 01:57:26,000
write some more text do the same thing again and then write on another line if
再写一些文字做同样的事情再次然后在另一行写如果

1510
01:57:26,000 --> 01:57:32,719
i print this test var 6 python is going to preserve all of the
我打印这个测试 var 6python 将保留所有

1511
01:57:32,719 --> 01:57:36,320
line breaks for example what we could be doing in
换行符例如我们可以做什么

1512
01:57:36,320 --> 01:57:42,000
here let me actually copy it that should save some time i could copy
这里让我实际复制它应该节省一些时间我可以复制

1513
01:57:42,000 --> 01:57:48,239
something like this in here if i run this now we have the tree we created in
如果我跑的话这里会有类似的东西现在我们有了我们创建的树

1514
01:57:48,239 --> 01:57:51,760
one of the very first section of this entire series
本节的第一部分之一整个系列

1515
01:57:51,760 --> 01:57:55,119
and this is a much easier way to see what's going on
这是一种更容易查看的方法这是怎么回事

1516
01:57:55,119 --> 01:57:59,599
although granted because of the first line here this is a bit difficult to
虽然因为第一个而被授予在这里线这有点困难

1517
01:57:59,599 --> 01:58:02,800
understand but with all of this covered we have
理解但有了所有这些，我们就有了

1518
01:58:02,800 --> 01:58:05,679
quite a bit more understanding about strings
有了更多的了解字符串

1519
01:58:05,679 --> 01:58:11,199
now there are two more things that i do want to cover the first one is math and
现在我还有两件事要做想要涵盖第一个是数学

1520
01:58:11,199 --> 01:58:15,360
strings and before we start that let me comment
字符串在我们开始之前让我评论一下

1521
01:58:15,360 --> 01:58:19,760
out the earlier stuff so it doesn't get confusing
拿出早期的东西，这样它就不会得到令人困惑的

1522
01:58:19,760 --> 01:58:24,320
what you can do let's call this testvar7
你可以做什么我们称之为 testvar7

1523
01:58:24,320 --> 01:58:27,840
you can add something like one string hello
你可以添加一个字符串之类的东西你好

1524
01:58:27,840 --> 01:58:30,560
and then plus a
然后加上A

1525
01:58:30,560 --> 01:58:35,440
world and python when it sees this plus it is
世界当 python 看到这个加上它时

1526
01:58:35,440 --> 01:58:42,000
just going to combine these two strings if i print test bar 7 now we are getting
只是将这两个字符串组合起来如果我现在打印测试栏 7 我们得到

1527
01:58:42,000 --> 01:58:44,880
hello world keep in mind here
你好世界请记住这里

1528
01:58:44,880 --> 01:58:50,239
there's no space between the two because neither hello nor world have any
两者之间没有空间因为 hello 和 world 都没有

1529
01:58:50,239 --> 01:58:53,920
white space one way to add them would be to just add
空白添加它们的一种方法是添加

1530
01:58:53,920 --> 01:58:56,560
them here and then
他们在这里进而

1531
01:58:56,560 --> 01:59:01,119
combine all of these with another plus you can add as many pluses here as you
将所有这些与另一个优点结合起来您可以在这里添加任意数量的优点

1532
01:59:01,119 --> 01:59:05,520
want there's no limit on it this would also work with different
希望没有限制这也适用于不同的

1533
01:59:05,520 --> 01:59:10,960
types of quotation marks python literally does not care
引号的类型python实际上并不关心

1534
01:59:10,960 --> 01:59:16,639
another math operation that we can use let me create a test var eight
我们可以使用的另一个数学运算让我创建一个测试变量 8

1535
01:59:16,639 --> 01:59:22,639
i can let me write a word like copy i can multiply it for example times ten
我可以让我写一个词，比如copy i例如可以乘以十

1536
01:59:22,639 --> 01:59:28,239
if i now print the result i get the word copy copied ten times
如果我现在打印结果我把这个词复制了十次

1537
01:59:28,239 --> 01:59:33,040
but again i think this concept here should be fairly straightforward
但我再次认为这个概念在这里应该相当简单

1538
01:59:33,040 --> 01:59:37,840
let me comment it out and now we come to the most important section of this
让我把它评论出来，现在我们来了本节最重要的部分

1539
01:59:37,840 --> 01:59:45,040
entire video and that is how to get values into strings and let's do this by
整个视频，这就是如何获得将值转换为字符串，让我们这样做

1540
01:59:45,040 --> 01:59:50,480
example i have a name and in here i have bob
例如我有一个名字，在这里我有鲍勃

1541
01:59:50,480 --> 01:59:54,800
and i have an h and let's go i don't know 40.
我有一个 h，我们走吧，我没有知道 40.

1542
01:59:54,800 --> 02:00:00,800
now i want to create another let's call it a greeting
现在我想创建另一个让我们打电话这是一个问候

1543
02:00:00,800 --> 02:00:05,920
string and this greeting string i want to say
细绳我想说的这句问候语

1544
02:00:05,920 --> 02:00:08,480
hello bob
你好鲍勃

1545
02:00:08,480 --> 02:00:13,440
you are 40 years old
你是40岁

1546
02:00:13,440 --> 02:00:17,119
let me add the print statement as well so we can see what's going on
让我也添加打印语句这样我们就可以看到发生了什么

1547
02:00:17,119 --> 02:00:20,960
i want to have the greeting string and let's run this
我想要问候语字符串让我们运行这个

1548
02:00:20,960 --> 02:00:26,800
i can see hello bob you are 40 years old right now the two values are matching
我可以看到你好鲍勃你40岁了现在两个值匹配

1549
02:00:26,800 --> 02:00:31,119
we have bob here and bob here and we have 40
我们有鲍勃在这里，鲍勃在这里，我们有 40 个

1550
02:00:31,119 --> 02:00:36,320
here and 40 here but this is only the case because i have
这里和这里 40但这只是情况，因为我有

1551
02:00:36,320 --> 02:00:41,119
written bob if i change this bob to tom
书面鲍勃如果我把这个鲍勃换成汤姆

1552
02:00:41,119 --> 02:00:44,880
and run all of this again we wouldn't see a difference
再次运行所有这些我们不会看到差异

1553
02:00:44,880 --> 02:00:50,560
so what i want to do is to somehow get this name variable into here
所以我想做的是以某种方式得到这个名字变量放到这里

1554
02:00:50,560 --> 02:00:56,880
and this h variable into here and python has quite a few ways of
并将这个 h 变量放到这里python 有很多方法

1555
02:00:56,880 --> 02:01:01,119
achieving that the one people tend to learn first is
实现这一点人们往往首先学习的是

1556
02:01:01,119 --> 02:01:04,880
called format this is just another method
称为格式，这只是另一种方法

1557
02:01:04,880 --> 02:01:10,000
this one works by adding curly brackets inside of your string where you want to
这个通过添加大括号来工作在你想要的字符串内部

1558
02:01:10,000 --> 02:01:15,199
add a variable in my case i want to replace the name with a curly bracket
在我的例子中添加一个变量我想要用大括号替换名称

1559
02:01:15,199 --> 02:01:20,719
and the age with another curly bracket and now i can add values into this
和另一个大括号的年龄现在我可以向其中添加值

1560
02:01:20,719 --> 02:01:24,639
format this could for example be a one and a two
格式例如可以是一个和一个二

1561
02:01:24,639 --> 02:01:29,840
if i run all of this now i can see hello one you are two years old
如果我现在运行所有这些我可以看到你好一你两岁

1562
02:01:29,840 --> 02:01:34,800
what python has done here is it looked at the first curly brackets
python在这里所做的是它看起来在第一个大括号处

1563
02:01:34,800 --> 02:01:40,639
and then it looked inside of format and found the first value after that it saw
然后它查看格式内部并且找到它看到的第一个值

1564
02:01:40,639 --> 02:01:46,400
another curly bracket and looked for the second value inside of format and then
另一个大括号并寻找格式内的第二个值，然后

1565
02:01:46,400 --> 02:01:51,760
inserted it into the string granted just adding one and two in this example isn't
将其插入刚刚授予的字符串中在这个例子中添加一和二不是

1566
02:01:51,760 --> 02:01:56,239
particularly helpful but what we can do is add variables in
特别有帮助但我们可以做的是添加变量

1567
02:01:56,239 --> 02:02:02,880
here as well like name and age if i run this now we get hello tom you
这里还有姓名和年龄如果我现在运行这个，我们会向你问好，汤姆

1568
02:02:02,880 --> 02:02:06,880
are 40 years old and this now means we can change these
40岁了现在这意味着我们可以改变这些

1569
02:02:06,880 --> 02:02:13,119
variables let's say a hundred and something it really doesn't matter what
变量比方说一百和某事，这并不重要

1570
02:02:13,119 --> 02:02:16,239
it is although you do have to be careful about
这是虽然你必须小心

1571
02:02:16,239 --> 02:02:21,760
the order if i switch them around with h coming first and then name
如果我用 h 交换它们的顺序先来，然后名字

1572
02:02:21,760 --> 02:02:25,840
now we have hello100 you are something years old
现在我们有 hello100 你很了不起岁

1573
02:02:25,840 --> 02:02:32,480
the order here being wrong messed all of this up which can be kind of annoying
这里的顺序错误搞乱了所有的这可能有点烦人

1574
02:02:32,480 --> 02:02:37,119
especially if you have longer strings where you want to add more variables
特别是如果你有更长的琴弦您想要添加更多变量的地方

1575
02:02:37,119 --> 02:02:42,000
this can become very confusing and as a consequence python has a way to
这可能会变得非常混乱因此 python 有办法

1576
02:02:42,000 --> 02:02:47,119
make all of this more organized you can inside of the curly brackets add
让这一切更有条理你可以在大括号内添加

1577
02:02:47,119 --> 02:02:52,320
something like variable names let me call them one and two and now you
像变量名之类的东西让我称它们为一和二，现在你

1578
02:02:52,320 --> 02:02:57,599
can assign one to name and two to the age
可以将 1 分配给名称，将 2 分配给年龄

1579
02:02:57,599 --> 02:03:01,119
if i run this now we are getting the same outcome
如果我现在运行这个我们会得到同样的结果

1580
02:03:01,119 --> 02:03:05,599
although now we know very specifically which value is being assigned to which
虽然现在我们非常具体地知道哪个值被分配给哪个

1581
02:03:05,599 --> 02:03:09,360
curly bracket one gets this one here
大括号有人在这里得到这个

1582
02:03:09,360 --> 02:03:13,360
and two is getting this value here
和两个在这里得到这个值

1583
02:03:13,360 --> 02:03:17,679
meaning now we're going to sign h to 1 and
意思是现在我们要将 h 签名为 1和

1584
02:03:17,679 --> 02:03:23,360
i guess we could keep h for 2 as well if i run this now we get hello 100 you are
我想我们也可以将 h 保留为 2 如果我现在运行这个我们得到你好 100 你是

1585
02:03:23,360 --> 02:03:27,920
100 years old the reason is we are assigning h to both
100岁原因是我们将 h 分配给两者

1586
02:03:27,920 --> 02:03:33,199
1 and 2 which is putting this age into here and
1 和 2这就是把这个年龄放到这里

1587
02:03:33,199 --> 02:03:36,400
into here and that way you can be much more
进入这里这样你就可以做得更多

1588
02:03:36,400 --> 02:03:39,840
deliberate about where you put the variables
仔细考虑你把它放在哪里变量

1589
02:03:39,840 --> 02:03:42,400
that being said very few people
话虽如此极少数人

1590
02:03:42,400 --> 02:03:48,800
use this kind of method because when you look at it it's kind of inefficient
使用这种方法是因为当你看看它，效率有点低

1591
02:03:48,800 --> 02:03:53,520
why do we have to add a whole method with arguments why couldn't we just add
为什么我们必须添加一个完整的方法有参数为什么我们不能添加

1592
02:03:53,520 --> 02:03:59,679
variables straight inside of these curly brackets that would be much better and
变量直接在这些卷曲内部括号会好得多

1593
02:03:59,679 --> 02:04:04,159
python developers agree and to achieve that
python 开发者同意并实现这一目标

1594
02:04:04,159 --> 02:04:07,599
they have created what is called an f string
他们创造了所谓的 f细绳

1595
02:04:07,599 --> 02:04:12,639
let me create another variable let's call it greeting string
让我创建另一个变量吧称之为问候字符串

1596
02:04:12,639 --> 02:04:16,400
better for this one i want to copy this entire
更好的对于这个我想复制整个

1597
02:04:16,400 --> 02:04:21,440
string and paste it in here and now i'm going to add the variables i
字符串并将其粘贴到此处现在我要添加变量 i

1598
02:04:21,440 --> 02:04:29,199
want straight into the curly brackets we have name for hello and h4 years old
想要直接进入大括号我们有 hello 和 h4 岁的名字

1599
02:04:29,199 --> 02:04:33,760
although now if i print greeting strings better
虽然现在如果我打印问候字符串更好的

1600
02:04:33,760 --> 02:04:40,960
i am getting hello name you are 8 years old python interprets this and this
我收到你好名字，你今年 8 岁老Python解释这个和这个

1601
02:04:40,960 --> 02:04:45,520
as a simple part of the string which isn't ideal
作为字符串的简单部分并不理想

1602
02:04:45,520 --> 02:04:51,360
to tell python that these are supposed to be variables we have to add an f at
告诉 python 这些是应该的要成为变量，我们必须添加一个 f at

1603
02:04:51,360 --> 02:04:56,239
the beginning of the string and that is all we need if i run this now we're
字符串的开头，即如果我现在运行这个，我们需要的就是

1604
02:04:56,239 --> 02:05:00,719
getting hello something you are 100 years old
打个招呼，你已经100岁了岁

1605
02:05:00,719 --> 02:05:04,639
and you can see it by the colors the name
你可以通过颜色看到它名字

1606
02:05:04,639 --> 02:05:10,239
and the age are not green anymore which in our case means they are not a
年纪已不再青涩在我们的例子中这意味着它们不是

1607
02:05:10,239 --> 02:05:14,800
string anymore although your colors may vary depending on what color scheme you
尽管你的颜色可能会不再串起来取决于您的配色方案

1608
02:05:14,800 --> 02:05:18,960
have we can let me return to bob who is 40
有我们可以让我回到 40 岁的鲍勃身边

1609
02:05:18,960 --> 02:05:24,960
years old this is still going to work and this version here is much more
好几年了，这仍然有效这个版本有更多内容

1610
02:05:24,960 --> 02:05:30,719
readable than this one up here i guess let me fix it this is better
我想比这里的这个更可读让我修复它，这样更好

1611
02:05:30,719 --> 02:05:36,960
but still this one here is very annoying to read whereas this one is really clear
但这里的这个还是很烦人阅读一下，而这个确实很清楚

1612
02:05:36,960 --> 02:05:41,920
and f strings can actually do quite a bit more inside of these curly brackets
f 字符串实际上可以做很多这些大括号内还有更多内容

1613
02:05:41,920 --> 02:05:47,520
you could even do basic math operations for example we could add h plus 10
你甚至可以进行基本的数学运算例如我们可以添加 h 加 10

1614
02:05:47,520 --> 02:05:52,639
all of this would also still work with that we have covered a lot of stuff for
所有这一切仍然适用于我们已经介绍了很多内容

1615
02:05:52,639 --> 02:05:56,480
strings and i think this part is getting quite long so let's do an exercise and
字符串，我认为这部分正在变得很长，所以让我们做一个练习

1616
02:05:56,480 --> 02:06:00,480
then finish it off and what i want you guys to do is this
然后完成它我希望你们做的是这个

1617
02:06:00,480 --> 02:06:05,920
one here i want you guys to create an f string that says hello my name is x and
我希望你们创建一个 f字符串表示你好，我的名字是 x 和

1618
02:06:05,920 --> 02:06:09,679
my hobby is y x and y should both be separate
我的爱好是yx 和 y 应该是分开的

1619
02:06:09,679 --> 02:06:13,119
variables and the second half of the sentence
变量和句子的后半部分

1620
02:06:13,119 --> 02:06:18,320
should be on a separate line and by second half i mean and my hobby is y
应该在单独的一行上并且由后半部分我的意思是我的爱好是你

1621
02:06:18,320 --> 02:06:22,639
this should be on a separate line when it is being printed pause the video now
这应该在一个单独的行上，当正在打印，现在暂停视频

1622
02:06:22,639 --> 02:06:25,760
and try this one yourself
并亲自尝试一下这个

1623
02:06:26,960 --> 02:06:31,599
let me comment out all of this here so we're not getting confused
让我在这里注释掉所有这些我们并没有感到困惑

1624
02:06:31,599 --> 02:06:37,760
and now let's go for this step by step first of all i want to start by creating
现在让我们一步一步进行首先我想从创建开始

1625
02:06:37,760 --> 02:06:41,119
an f string here let me copy it
这里有一个 f 字符串让我复制一下

1626
02:06:41,119 --> 02:06:45,520
and let's call this the exercise string
我们称之为练习细绳

1627
02:06:45,520 --> 02:06:49,679
in here i want hello my name is x my hobby is y
在这里我想问你好，我的名字是 x 我的爱好是y

1628
02:06:49,679 --> 02:06:53,520
since we want x and y to be in separate variables
因为我们希望 x 和 y 分开变量

1629
02:06:53,520 --> 02:06:58,800
x should be in curly brackets and y should also be in curly brackets
x 应该在大括号中，y 应该在大括号中也应该在大括号中

1630
02:06:58,800 --> 02:07:03,920
and since we want python to interpret these as variables we need an f at the
因为我们想要 python 来解释这些作为变量，我们需要一个 f

1631
02:07:03,920 --> 02:07:08,239
beginning of the string so now we have to tell python the values
字符串的开头所以现在我们必须告诉 python 这些值

1632
02:07:08,239 --> 02:07:12,480
for x and y let me put x here
对于 x 和 y让我把 x 放在这里

1633
02:07:12,480 --> 02:07:16,480
and y here let's say for x a value we haven't used
你在这里假设 x 是一个我们没有使用过的值

1634
02:07:16,480 --> 02:07:21,760
yet is lisa and i like i don't know
但丽莎还是我喜欢我不知道

1635
02:07:21,760 --> 02:07:27,040
programming with that i can print the exercise
编程这样我就可以打印练习了

1636
02:07:27,040 --> 02:07:32,000
string and we have hello my name is lisa my hobby is programming
字符串，我们有你好，我的名字是丽莎我的爱好是编程

1637
02:07:32,000 --> 02:07:36,239
this is already covering the first two parts of the exercise
这已经涵盖了前两个练习的一部分

1638
02:07:36,239 --> 02:07:40,880
next up is the second half of the sentence should be on a separate line
接下来是下半场句子应该单独一行

1639
02:07:40,880 --> 02:07:44,239
and this we could approach in two different ways
我们可以分两步来解决这个问题不同的方式

1640
02:07:44,239 --> 02:07:47,920
the first one is we could use an escape character
第一个是我们可以使用逃逸特点

1641
02:07:47,920 --> 02:07:50,639
meaning forward slash n
意义正斜杠 n

1642
02:07:50,639 --> 02:07:55,440
and now if i run this we get hello my name is lisa and my hobby is programming
现在如果我运行这个我们会得到你好我的我的名字是丽莎，我的爱好是编程

1643
02:07:55,440 --> 02:07:59,760
on two different lines another way of approaching this let me
在两条不同的线上解决这个问题的另一种方式让我

1644
02:07:59,760 --> 02:08:04,639
copy it you could use triple quotation marks
复制它你可以使用三引号

1645
02:08:04,639 --> 02:08:09,280
so i add two at the beginning and two more at the end now i get rid of the
所以我在开头添加两个，然后添加两个更多在最后，现在我摆脱了

1646
02:08:09,280 --> 02:08:12,639
line break and put all of this on separate lines
换行并将所有这些放在单独的线

1647
02:08:12,639 --> 02:08:15,760
i guess let me call this exercise string two
我想让我把这个练习字符串称为二

1648
02:08:15,760 --> 02:08:19,760
and now print two and we're getting the same result
现在打印两个，我们得到相同的结果

1649
02:08:19,760 --> 02:08:24,960
these two lines here and this line here both do practically the same thing
这两行在这里，这一行在这里两者实际上做同样的事情

1650
02:08:24,960 --> 02:08:30,480
although i guess this one is a bit more readable well i guess it's debatable
虽然我猜这个有点多可读性很好，我想这是有争议的

1651
02:08:30,480 --> 02:08:35,280
you could choose here whichever you like although be aware the first one is much
你可以在这里选择你喜欢的虽然要知道第一个是很多

1652
02:08:35,280 --> 02:08:40,480
more common also keep in mind here the variable naming i used capital x and
更常见的还要记住这里变量命名我使用大写 x 和

1653
02:08:40,480 --> 02:08:44,560
capital y is quite bad this should rather be called name and
大写 y 很糟糕这应该被称为名称和

1654
02:08:44,560 --> 02:08:50,639
hobby in this part we are going to learn two more data types lists and tuples
这部分我们要学习的爱好另外两种数据类型列表和元组

1655
02:08:50,639 --> 02:08:55,440
both are very similar and both are simply data containers for other data
两者非常相似并且都是只是其他数据的数据容器

1656
02:08:55,440 --> 02:08:59,040
types which means they are storing other kinds
类型这意味着他们正在存储其他类型

1657
02:08:59,040 --> 02:09:04,560
of data that's what a container does and they can contain any kind of data
数据的存储就是容器的作用它们可以包含任何类型的数据

1658
02:09:04,560 --> 02:09:09,520
this could be a string a number it could also be a boolean other lists and tuple
这可以是一个字符串也可以是一个数字也可以是布尔值的其他列表和元组

1659
02:09:09,520 --> 02:09:15,440
and a lot more there's no limitation on what they can store a tuple would look
还有更多没有限制他们可以存储什么元组看起来

1660
02:09:15,440 --> 02:09:20,719
something like this we are starting with normal brackets
像这样的东西我们从普通括号开始

1661
02:09:20,719 --> 02:09:24,639
and we're also ending with normal brackets and inside of that we have
我们也以正常结束括号和里面我们有

1662
02:09:24,639 --> 02:09:27,840
values that are being separated by a comma
由 a 分隔的值逗号

1663
02:09:27,840 --> 02:09:31,679
for example in this case we are starting with an integer and then we're adding a
例如在这种情况下我们开始用一个整数然后我们添加一个

1664
02:09:31,679 --> 02:09:34,480
comma then we have a string
逗号然后我们有一个字符串

1665
02:09:34,480 --> 02:09:38,159
another comma then we have a boolean value another
另一个逗号然后我们有另一个布尔值

1666
02:09:38,159 --> 02:09:44,079
comma and then we have a tuple inside of this original tuple which python is
逗号，然后我们里面有一个元组这个原始元组是 python 的

1667
02:09:44,079 --> 02:09:48,880
totally fine with and inside of this tuple we have another string and that is
完全没问题元组我们还有另一个字符串，那就是

1668
02:09:48,880 --> 02:09:53,119
the only value for this tuple so it really doesn't make too much sense i
这个元组的唯一值，所以它真的没有太大意义我

1669
02:09:53,119 --> 02:09:55,760
just wanted to illustrate that you can do it
只是想说明你可以做吧

1670
02:09:55,760 --> 02:10:02,800
besides a tuple we have a list and a list is looking very similar the
除了元组之外我们还有一个列表和一个列表看起来非常相似

1671
02:10:02,800 --> 02:10:07,280
only difference now is that to create a list we need square
现在唯一的区别要创建一个列表，我们需要 square

1672
02:10:07,280 --> 02:10:10,800
brackets but other than that we are still adding
括号但除此之外我们还在添加

1673
02:10:10,800 --> 02:10:16,159
values inside like integers strings booleans and other lists and we are
里面的值就像整数字符串布尔值和其他列表，我们是

1674
02:10:16,159 --> 02:10:20,639
separating each value with a comma like here here and here
用逗号分隔每个值，例如这里这里和这里

1675
02:10:20,639 --> 02:10:25,280
on the surface those two would look identical and you would be kind of
从表面上看，这两个人看起来相同，你会有点

1676
02:10:25,280 --> 02:10:29,920
correct the two are very similar but there's one incredibly important
纠正一下，两者非常相似，但是有一个非常重要的

1677
02:10:29,920 --> 02:10:34,320
difference tuples are what is called immutable
不同之处元组就是所谓的不可变

1678
02:10:34,320 --> 02:10:37,760
which just means that they cannot be changed
这只是意味着他们不能改变了

1679
02:10:37,760 --> 02:10:42,079
for example you could use something like list append
例如你可以使用类似列表附加的东西

1680
02:10:42,079 --> 02:10:45,840
and this would work because list can be changed
这会起作用，因为列表可以是改变了

1681
02:10:45,840 --> 02:10:50,880
but a tuple and depending a value would not work because we cannot change a
但一个元组和取决于一个值会不起作用，因为我们无法改变

1682
02:10:50,880 --> 02:10:55,599
tuple under any circumstance if you really wanted to add a new value
任何情况下的元组如果你真的想添加新的价值

1683
02:10:55,599 --> 02:11:00,320
to a tuple you would have to create a whole new tuple and combine the old
对于一个元组，你必须创建一个全新的元组并结合旧的

1684
02:11:00,320 --> 02:11:05,520
values with a new value which you can do fairly easily but if
具有新价值的价值观你可以很容易地做到这一点，但是如果

1685
02:11:05,520 --> 02:11:10,480
you are going to do that you could just use a list it would be much easier
你要做的就是你可以使用列表会容易得多

1686
02:11:10,480 --> 02:11:14,719
that being said because of this immutability
之所以这么说是因为这个不变性

1687
02:11:14,719 --> 02:11:19,199
tuples process a tiny bit faster in python
元组的处理速度稍微快一点Python

1688
02:11:19,199 --> 02:11:23,520
although the difference is so small you are hardly ever going to notice
虽然差别这么小你几乎不会注意到

1689
02:11:23,520 --> 02:11:27,760
i guess let's have a look at all of this and see how far we get let's get started
我想让我们看看这一切看看我们能走多远让我们开始吧

1690
02:11:27,760 --> 02:11:32,719
by creating some lists and a list let me store it in the
通过创建一些列表和一个列表让我将其存储在

1691
02:11:32,719 --> 02:11:36,560
variable again you are always creating with square
又变了你总是用方块来创作

1692
02:11:36,560 --> 02:11:41,440
brackets and in here you're adding values that are separated by a comma for
括号并在这里添加用逗号分隔的值

1693
02:11:41,440 --> 02:11:45,440
example you could be adding numbers like 1 2 and 3
例如，您可以添加数字，例如1 2 和 3

1694
02:11:45,440 --> 02:11:49,119
you could add floating point values like 4.5
您可以添加浮点值，例如4.5

1695
02:11:49,119 --> 02:11:53,840
and you could be adding words like let's say word
你可以添加像让我们这样的词说一句话

1696
02:11:53,840 --> 02:11:58,800
those are the data types we have already seen but any data type would be valid in
这些是我们已经拥有的数据类型可见，但任何数据类型都有效

1697
02:11:58,800 --> 02:12:01,520
here now if i print
这里现在如果我打印

1698
02:12:01,520 --> 02:12:05,199
my list we can see
我的列表我们可以看到

1699
02:12:05,199 --> 02:12:10,960
the output we have entered into this list it does work pretty seamlessly
我们输入的输出列出它确实工作得非常无缝

1700
02:12:10,960 --> 02:12:15,760
what you can also do is to use the functions we have already seen for
你还可以做的是使用我们已经见过的函数

1701
02:12:15,760 --> 02:12:20,320
example len is now going to give us the amount of
示例长度现在要给我们的金额

1702
02:12:20,320 --> 02:12:25,679
items we have inside of this list which right now is 5.
我们在此列表中包含的项目现在是5。

1703
02:12:25,679 --> 02:12:32,000
finally you could also use the list with methods and lists do have quite a lot of
最后你也可以使用该列表方法和列表确实有很多

1704
02:12:32,000 --> 02:12:36,400
methods i suppose a simple one would be clear
方法我想一个简单的就很清楚了

1705
02:12:36,400 --> 02:12:39,679
this one removes every value from the list
这个删除了所有值列表

1706
02:12:39,679 --> 02:12:44,719
meaning if i print my list after running this method
意思是如果我在运行后打印我的列表这个方法

1707
02:12:44,719 --> 02:12:52,480
i am getting 5 items from this line here and this line now is going to print an
我从这行得到 5 件商品现在这一行将打印一个

1708
02:12:52,480 --> 02:12:56,400
empty list i suppose if you want to look this up
我想如果你想看的话，列表是空的这个

1709
02:12:56,400 --> 02:13:00,960
in google all you would have to do is look for something like python list
在谷歌你所要做的就是寻找类似 python list 的东西

1710
02:13:00,960 --> 02:13:06,079
methods once again you are going to find a lot of different websites that talk
你会再次发现方法很多不同的网站都在谈论

1711
02:13:06,079 --> 02:13:09,199
about it the official python documentation this
关于它官方的Python文档是这样的

1712
02:13:09,199 --> 02:13:12,880
one here is probably the one you want to use
这里的一个可能就是您想要的使用

1713
02:13:12,880 --> 02:13:17,520
and in here let me hide this one we have append
在这里让我隐藏这个我们有附加的

1714
02:13:17,520 --> 02:13:23,440
extend insert remove and a lot more the one we have just seen was called clear
扩展插入删除等等我们刚刚看到的一个叫做clear

1715
02:13:23,440 --> 02:13:28,639
this one is removing all items from a list and it is equivalent to something
这个正在删除 a 中的所有项目列表，它相当于某物

1716
02:13:28,639 --> 02:13:32,079
else what this part here means we are
别的这部分在这里意味着我们是什么

1717
02:13:32,079 --> 02:13:36,239
actually going to learn in a couple of minutes it's super useful for now just
实际上要学习几个分钟，现在非常有用

1718
02:13:36,239 --> 02:13:39,760
keep in mind there are a lot of different methods in here that you could
请记住有很多这里有不同的方法，你可以

1719
02:13:39,760 --> 02:13:45,040
be using another easy one would be reverse this one reverses the list let's
使用另一个简单的会是反转这个 反转列表 让我们

1720
02:13:45,040 --> 02:13:49,920
have a look at this one i suppose we could change clear to
看看这个我想我们可以明确地改为

1721
02:13:49,920 --> 02:13:55,679
reverse and now if i run the code we are getting the entire list in the
相反，现在如果我运行代码我们正在获取整个列表

1722
02:13:55,679 --> 02:14:00,320
reverse order compared to this list here just like with words or well with
与此处的列表相比，顺序相反就像言语一样或很好

1723
02:14:00,320 --> 02:14:03,119
strings the main way you are going to learn the
字符串你学习的主要方式

1724
02:14:03,119 --> 02:14:06,480
different methods is by just using python and encountering different
不同的方法只是使用python 并遇到不同的

1725
02:14:06,480 --> 02:14:10,960
problems and finding the solutions to them and most of the time the solution
问题并寻找解决方案他们以及大多数时候的解决方案

1726
02:14:10,960 --> 02:14:15,599
is going to involve some kind of method at some point you are going to get used
会涉及到某种方法在某些时候你会习惯的

1727
02:14:15,599 --> 02:14:20,000
to different methods for a list that being said also
列表的不同方法话虽这么说也

1728
02:14:20,000 --> 02:14:24,480
you don't need to know all of them by hard i myself completely forgot about
你不需要知道所有这些很难我自己完全忘记了

1729
02:14:24,480 --> 02:14:28,320
reverse until i saw it when i prepared for this video
反向直到我准备时看到它对于这个视频

1730
02:14:28,320 --> 02:14:33,920
but well with that we have lists and i guess we have functions and we
但我们有清单我想我们有功能并且我们

1731
02:14:33,920 --> 02:14:37,599
have methods at least in a very basic outline
至少有非常基本的方法大纲

1732
02:14:37,599 --> 02:14:42,480
although there's one really important method that i do want to talk about and
虽然有一个非常重要我确实想谈的方法和

1733
02:14:42,480 --> 02:14:46,239
that one is called append
那个叫附加

1734
02:14:46,239 --> 02:14:49,760
and this one appends a value i think the
和这个附加了一个值，我认为

1735
02:14:49,760 --> 02:14:53,920
name makes sense here basically anything you add in here as an
名字在这里有意义基本上你在这里添加的任何东西

1736
02:14:53,920 --> 02:14:58,000
argument will be added at the end of the list
参数将添加在末尾列表

1737
02:14:58,000 --> 02:15:03,840
for example if i added let's say it 10 at the end
例如，如果我添加最后说10

1738
02:15:03,840 --> 02:15:07,599
run all of this now we can see all the way at the end we
运行所有这一切现在我们可以看到最后我们

1739
02:15:07,599 --> 02:15:11,119
have this 10. this would be one of the ways you add an
有这个10.这将是您添加的方法之一

1740
02:15:11,119 --> 02:15:16,079
item to a list there are quite a few more but this is a really basic one that
列表中的项目有很多更多，但这是一个非常基本的

1741
02:15:16,079 --> 02:15:20,880
i just want to cover for now with that we can look at the other kind of
我现在只想介绍一下我们可以看看另一种

1742
02:15:20,880 --> 02:15:26,560
container and that is called a tuple and the tuple you let me save it in a
容器，称为元组，你让我把它保存在一个元组中

1743
02:15:26,560 --> 02:15:33,520
variable that i called my tuple you would be creating with brackets
我称之为元组的变量你将用括号创建

1744
02:15:33,520 --> 02:15:37,920
and in here again you can add any kind of value you want could be a number
在这里你可以添加任何类型你想要的值可以是一个数字

1745
02:15:37,920 --> 02:15:42,639
could be a floating point number it could be a word
可以是浮点数这可能是一个词

1746
02:15:42,639 --> 02:15:48,719
or it could be a list as well that itself contains other values
或者它也可以是一个列表本身包含其他值

1747
02:15:48,719 --> 02:15:54,960
let's say 7 8 and 9. let me comment out the earlier stuff and
比方说 7、8 和 9。让我注释掉之前的内容

1748
02:15:54,960 --> 02:15:59,920
print my tuple and there we go now we can see all the
打印我的元组现在我们可以看到所有

1749
02:15:59,920 --> 02:16:06,239
values we have added in here a tuple and a list work in very similar
我们在这里添加的值元组和列表的工作方式非常相似

1750
02:16:06,239 --> 02:16:10,480
ways at least up to a point because there is
方法至少在某种程度上，因为有

1751
02:16:10,480 --> 02:16:16,480
a major difference that difference being that tuples
一个主要区别区别在于元组

1752
02:16:16,480 --> 02:16:20,480
cannot be changed under any circumstances
不能在任何情况下改变情况

1753
02:16:20,480 --> 02:16:24,719
this means i couldn't run something like my tuple
这意味着我无法运行像我的元组这样的东西

1754
02:16:24,719 --> 02:16:28,560
append and then let's use a 10 again
附加然后我们再次使用 10

1755
02:16:28,560 --> 02:16:33,760
the method we have used up here if i run this line of code we're getting
我们在这里使用的方法如果我运行这行代码，我们会得到

1756
02:16:33,760 --> 02:16:38,160
an error that tuple object has no attribute append
元组对象没有的错误属性追加

1757
02:16:38,160 --> 02:16:44,080
we also couldn't delete a value and we couldn't reverse the order of this tuple
我们也无法删除一个值，我们无法颠倒该元组的顺序

1758
02:16:44,080 --> 02:16:47,519
let me demonstrate the reverse one this one here
让我演示一下相反的这里有一个

1759
02:16:47,519 --> 02:16:53,359
this one also would not work on a tuple most of the time when you are using
这个也不适用于元组大多数时候当你使用

1760
02:16:53,359 --> 02:16:57,200
tuples you generally only want to use tuples
元组你通常只想使用元组

1761
02:16:57,200 --> 02:17:00,719
when you know you are not going to change the values
当你知道你不会改变值

1762
02:17:00,719 --> 02:17:06,719
but most of the time let's say 70 80 you are going to use a list this one is
但大多数时候我们说 70 80你将使用一个列表，这个是

1763
02:17:06,719 --> 02:17:11,760
the much more common data type because it is more flexible with that covered we
更常见的数据类型，因为我们所涵盖的内容更加灵活

1764
02:17:11,760 --> 02:17:17,120
have to cover a really important topic and that is how to pick
必须涵盖一个非常重要的主题这就是如何选择

1765
02:17:17,120 --> 02:17:25,200
elements from a tuple or a list what that means is for example i might
元组或列表中的元素这意味着例如我可能

1766
02:17:25,200 --> 02:17:30,080
want to get this floating point value here from the list and then work with it
想要得到这个浮点值从列表中选择这里，然后使用它

1767
02:17:30,080 --> 02:17:34,479
so how could i get this value and for that
那么我怎样才能得到这个值为此

1768
02:17:34,479 --> 02:17:39,679
we need a specific process that in python is called either indexing or
我们需要一个特定的过程python 被称为索引或

1769
02:17:39,679 --> 02:17:43,280
slicing the two are very much related
切片两者非常相关

1770
02:17:43,280 --> 02:17:47,040
let's talk about it actually let me actually go for this a bit more
让我们实际谈谈吧让我再努力一点

1771
02:17:47,040 --> 02:17:52,559
properly to restate the problem we want to pick one element from a list
正确地重述问题我们想从列表中选择一个元素

1772
02:17:52,559 --> 02:17:56,960
this could also be a tuple they both work in exactly the same way for us to
这也可能是一个元组我们以完全相同的方式工作

1773
02:17:56,960 --> 02:18:01,599
do that we need to cover two important concepts
为此我们需要涵盖两个重要的内容概念

1774
02:18:01,599 --> 02:18:06,080
the first one is that python assigns each value in a list on a tuple and
第一个是python分配的元组列表中的每个值以及

1775
02:18:06,080 --> 02:18:10,719
index number if this is our list python would give
索引号如果这是我们的列表 python 会给出

1776
02:18:10,719 --> 02:18:15,679
each of these numbers an index the first number is always going to be a
这些数字中的每一个都是一个索引第一个数字总是a

1777
02:18:15,679 --> 02:18:21,280
zero and then every successive number is going to be plus one of that number
零，然后每个连续的数字都是将是该数字的加一

1778
02:18:21,280 --> 02:18:26,000
meaning the second value is one the third value is two and then so on
意味着第二个值是第三个值是二，依此类推

1779
02:18:26,000 --> 02:18:29,760
and a really important point to notice here is that we always start counting
需要注意的一个非常重要的点我们总是从这里开始计数

1780
02:18:29,760 --> 02:18:34,080
from zero not one and this can be a very annoying concept
从零开始不是一这可能是一个非常烦人的概念

1781
02:18:34,080 --> 02:18:38,479
to deal with i think for beginners forgetting about this covers about half
我认为对于初学者来说忘记这一点大约占一半

1782
02:18:38,479 --> 02:18:41,679
of all of your errors just be ready for that
你所有的错误只是做好准备那

1783
02:18:41,679 --> 02:18:46,479
but anyway the concept we have for now is that every item inside of a list has
但无论如何我们现在的概念是列表中的每个项目都有

1784
02:18:46,479 --> 02:18:52,479
an index and this index we can use to pick an element and this works by adding
一个索引，这个索引我们可以用来选择一个元素，这可以通过添加来实现

1785
02:18:52,479 --> 02:18:58,639
square brackets after the list or tuple in practice this would look something
列表或元组后面的方括号实际上，这看起来有些东西

1786
02:18:58,639 --> 02:19:01,519
like this right now we have our list and then
像这样现在我们有了清单，然后

1787
02:19:01,519 --> 02:19:06,639
after the list we have another set of square brackets with an integer and this
在列表之后我们还有另一组方括号里有一个整数，这个

1788
02:19:06,639 --> 02:19:11,679
integer is going to pick one specific index right now the index
将选择整数现在有一个特定的索引

1789
02:19:11,679 --> 02:19:16,559
one which is going to be the second element this one here meaning this
一个将是第二个元素 this 在这里表示这个

1790
02:19:16,559 --> 02:19:22,559
operation would return the value 2 and since we are using an index this entire
操作将返回值 2 并且因为我们整个都使用索引

1791
02:19:22,559 --> 02:19:28,000
operation is called indexing it works on quite a few data types lists
操作称为索引它适用于相当多的数据类型列表

1792
02:19:28,000 --> 02:19:32,559
and tuples should be fairly obvious we could also be using it with strings
元组应该是相当明显的也可以与字符串一起使用

1793
02:19:32,559 --> 02:19:37,200
because they are basically another kind of container we can have a look at this
因为他们基本上是另一种容器的我们可以看看这个

1794
02:19:37,200 --> 02:19:41,200
one as well however indexing does not work on
也有一个但是索引不起作用

1795
02:19:41,200 --> 02:19:44,880
dictionaries and sets dictionaries work in a slightly
字典和集合字典的工作方式略有不同

1796
02:19:44,880 --> 02:19:48,640
different way and sets work in a very different way we are going to see that
不同的方式并以非常不同的方式工作我们将以不同的方式看待这一点

1797
02:19:48,640 --> 02:19:52,080
later on and i guess let's play around with all of this
稍后我想我们可以一起玩一下与这一切

1798
02:19:52,080 --> 02:19:57,200
here i am back in my code and i want to comment out
我回到了我的代码，我想要注释掉

1799
02:19:57,200 --> 02:20:03,359
the two methods for the tuple and i want to uncomment my list
元组的两种方法，我想要取消注释我的列表

1800
02:20:03,359 --> 02:20:07,120
meaning now i have a list and a tuple to work with
意思是现在我有一个列表和一个元组与...一起工作

1801
02:20:07,120 --> 02:20:11,680
and i want to just pick some random elements from them i guess we can start
我想随机挑选一些他们的元素我想我们可以开始

1802
02:20:11,680 --> 02:20:16,399
with my list and in here i am using square brackets and now i need an
与我的列表和在这里我使用方括号，现在我需要一个

1803
02:20:16,399 --> 02:20:21,280
integer i'm going to pick 0 just to pick the first element
整数我要选择 0 只是为了选择第一个元素

1804
02:20:21,280 --> 02:20:26,399
this zero now is going to refer to the first element
现在这个零将引用第一个元素

1805
02:20:26,399 --> 02:20:31,439
inside of my list or the one with the index zero
在我的列表中或带有索引零

1806
02:20:31,439 --> 02:20:37,200
if we added a one we will get the next element two three four and so on
如果我们添加一个，我们将得到下一个元素二三四等等

1807
02:20:37,200 --> 02:20:42,319
to show all of this we have to print it again now if i run this we are getting
为了显示所有这些，我们必须打印它现在再次如果我运行这个我们会得到

1808
02:20:42,319 --> 02:20:48,800
one indeed the value up here if i added it 2 in here
确实是这里的价值如果我在这里添加 2

1809
02:20:48,800 --> 02:20:53,680
and run this again we are getting the integer 3 which is
再次运行我们得到整数 3 是

1810
02:20:53,680 --> 02:21:01,280
this item here we have 0 1 and 2. all of this would also work with a tuple
这个项目我们有 0 1 和 2。全部这也适用于元组

1811
02:21:01,280 --> 02:21:05,200
meaning if i use my tuple this tuple here
意思是如果我使用我的元组这个元组这里

1812
02:21:05,200 --> 02:21:11,359
and now pick let's say the item number 5.
现在选择让我们说商品编号 5。

1813
02:21:11,359 --> 02:21:14,720
run this again we are now getting the list
再次运行这个我们现在正在获取清单

1814
02:21:14,720 --> 02:21:18,800
this one here at the end of the tuple because this one is the element with the
这个位于元组的末尾因为这个元素是

1815
02:21:18,800 --> 02:21:26,080
index five we have zero one two three four and five
索引五我们有零一二三四五

1816
02:21:26,080 --> 02:21:30,399
what we can do now as well is to add another square brackets
我们现在也能做什么就是再加一个方括号

1817
02:21:30,399 --> 02:21:35,520
afterwards because remember what we are getting from this one here
之后因为记住我们是什么从这里得到

1818
02:21:35,520 --> 02:21:41,840
is going to return one item from this tuple in this case this list here which
将从中返回一项元组在这种情况下这个列表在这里

1819
02:21:41,840 --> 02:21:48,960
means that this operation here stands in for this tuple so when we add
意思就是这里的这个操作代表这个元组，所以当我们添加

1820
02:21:48,960 --> 02:21:51,920
the square brackets afterwards these ones here
之后的方括号是这些这里的

1821
02:21:51,920 --> 02:21:56,160
we are basically adding the square brackets after here and then we can take
我们基本上是在添加正方形这里后面的括号然后我们可以采取

1822
02:21:56,160 --> 02:22:00,720
other elements from that if i add a zero in here we should be
其他元素如果我在这里加一个零，我们应该是

1823
02:22:00,720 --> 02:22:04,960
getting seven my tuple five gets us
得到七我的元组五让我们

1824
02:22:04,960 --> 02:22:08,479
this list here and then the zero gets us the first
这个列表在这里然后零让我们成为第一个

1825
02:22:08,479 --> 02:22:13,520
element inside of it these operations are fairly common right
里面的元素这些操作相当常见吧

1826
02:22:13,520 --> 02:22:17,439
now i assume they do seem quite confusing but if you play around with
现在我认为他们看起来确实很令人困惑，但如果你玩弄

1827
02:22:17,439 --> 02:22:21,680
them for a while they should become fairly familiar just remember what is
他们应该暂时成为相当熟悉，只记得是什么

1828
02:22:21,680 --> 02:22:25,439
getting returned and how you can work with that
返回以及如何工作接着就，随即

1829
02:22:25,439 --> 02:22:29,760
there's one more thing that you could be doing in here let me duplicate the line
你还可以做一件事在这里做让我复制该行

1830
02:22:29,760 --> 02:22:34,319
i only want to use one indexing operation
我只想使用一个索引手术

1831
02:22:34,319 --> 02:22:39,120
what you can also do is go in the negative direction for example if i use
你还可以做的是进入负方向例如如果我使用

1832
02:22:39,120 --> 02:22:43,520
negative one we are getting the list again
负一我们再次收到清单

1833
02:22:43,520 --> 02:22:48,000
what this negative one means is we are always starting at zero and if we go in
这个负面的意思是我们是总是从零开始，如果我们进去

1834
02:22:48,000 --> 02:22:52,640
the positive direction we are basically going to the right
我们基本上是积极的方向向右走

1835
02:22:52,640 --> 02:22:55,520
however if we are choosing a negative number
但是如果我们选择负数数字

1836
02:22:55,520 --> 02:22:58,560
we are going all the way to the back of the
我们是一直走到后面

1837
02:22:58,560 --> 02:23:02,720
list and then going in the opposite direction meaning this list here would
列出，然后进行相反的操作方向意味着这里的列表将

1838
02:23:02,720 --> 02:23:06,479
be negative 1 word would be negative 2
为负 1这个词将是负面的 2

1839
02:23:06,479 --> 02:23:10,560
and the 1.45 would be negative 3
1.45 将是负3

1840
02:23:10,560 --> 02:23:15,920
which means that negative 3 and 4 should have the same result unless i made an
这意味着负 3 和 4 应该除非我做了一个，否则会有相同的结果

1841
02:23:15,920 --> 02:23:21,760
error let's try if i enter negative 3 we get 1.45
错误让我们尝试一下如果我输入负 3 我们得到 1.45

1842
02:23:21,760 --> 02:23:26,080
if i add 4 we are getting word and i just realized
如果我加4我们收到消息，我刚刚意识到

1843
02:23:26,080 --> 02:23:29,840
i can't count um sorry about that
我数不清嗯对于那个很抱歉

1844
02:23:29,840 --> 02:23:35,920
this should be a 3 and this is a 4. talking and writing can be kind of
这应该是 3，这是 4。说话和写作可以是一种

1845
02:23:35,920 --> 02:23:40,800
challenging i guess you noticed this one already but now
具有挑战性，我猜你注意到了这个已经但是现在

1846
02:23:40,800 --> 02:23:46,720
what you should be able to see is if i add a 3 in here we are getting 1.45 and
你应该能看到的是如果我在这里添加 3，我们得到 1.45，

1847
02:23:46,720 --> 02:23:53,600
if i add a negative 3 we are also getting 1.45 all right with that we have
如果我加上一个负数 3 我们也是得到 1.45 就可以了

1848
02:23:53,600 --> 02:23:58,240
basically all we need to get started with indexing this is a very simple
基本上我们需要开始通过索引，这是一个非常简单的

1849
02:23:58,240 --> 02:24:02,399
operation when it comes down to it although this video is getting kind of
归根结底的操作虽然这个视频有点

1850
02:24:02,399 --> 02:24:06,800
long so let's do an exercise and then we finish this section
太久了，让我们做一个练习，然后我们完成本节

1851
02:24:06,800 --> 02:24:11,359
and what i want you guys to do let me paste it in here's the exercise
我想让你们做的让我做将其粘贴到这里是练习

1852
02:24:11,359 --> 02:24:17,280
we have a long string and of the string i want you guys to pick one word or
我们有一根长绳子和绳子我希望你们选一个词或者

1853
02:24:17,280 --> 02:24:22,800
string and that is hello that is going to be this element here
字符串，那就是你好成为这里的这个元素

1854
02:24:22,800 --> 02:24:27,359
although do notice here that this is a list
虽然请注意这里这是一个列表

1855
02:24:27,359 --> 02:24:33,920
inside of a list inside of another list so you
代替另一个列表中的列表，这样你

1856
02:24:33,920 --> 02:24:37,520
have to pick elements that are quite a bit nested
必须选择相当重要的元素位嵌套

1857
02:24:37,520 --> 02:24:42,000
but if you paid attention so far this should be doable so pause the video now
但如果你到目前为止注意到了这一点应该是可行的，所以现在暂停视频

1858
02:24:42,000 --> 02:24:45,359
and try this one yourself
并亲自尝试一下这个

1859
02:24:46,800 --> 02:24:51,280
alrighty let's get started and just to illustrate what is happening here
好吧，让我们开始吧说明这里发生的事情

1860
02:24:51,280 --> 02:24:55,760
let me save all of this in a separate variable that i'm going to call solution
让我将所有这些保存在单独的我将调用解决方案的变量

1861
02:24:55,760 --> 02:24:58,479
var and this
变量和这个

1862
02:24:58,479 --> 02:25:02,479
is going to be we always have to start with the exercise list
我们总是要开始与练习清单

1863
02:25:02,479 --> 02:25:06,560
now we need square brackets and we want to pick
现在我们需要方括号，我们想要选择

1864
02:25:06,560 --> 02:25:13,200
one item from here with the index we have item number zero we have item
这里的一项带有索引我们有零号物品 我们有物品

1865
02:25:13,200 --> 02:25:18,479
number one and we have item number two and item number one covers this entire
第一，我们有第二项第一项涵盖了整个

1866
02:25:18,479 --> 02:25:24,399
list here this is what we want meaning in here i want item number one which
在这里列出这就是我们想要的意思在这里我想要第一项

1867
02:25:24,399 --> 02:25:31,520
means if i print the solution variable and comment out all of the stuff above
意味着如果我打印解决方案变量并注释掉上面的所有内容

1868
02:25:31,520 --> 02:25:35,840
and run all of this now we can see we have the list with one two three four
现在运行所有这些我们可以看到有一二三四的清单

1869
02:25:35,840 --> 02:25:41,680
five and then the other list inside and from this we want to get another index
五个，然后是里面的其他列表和由此我们想要得到另一个索引

1870
02:25:41,680 --> 02:25:45,840
now we have let me clean this one up a tiny bit
现在我们让我清理这个一点点

1871
02:25:45,840 --> 02:25:50,479
purely inside of this list here we have a few more elements
纯粹在这个列表中，我们有还有一些元素

1872
02:25:50,479 --> 02:25:58,640
we have 0 we have 1 and then we have 2 2 being this entire thing this is all we
我们有 0 我们有 1 然后我们有 22 这就是整个事情，这就是我们的全部

1873
02:25:58,640 --> 02:26:03,439
want right now which means we now want the index number
现在想要这意味着我们现在想要索引号

1874
02:26:03,439 --> 02:26:07,439
2. now if i print my solution i get another
2.现在，如果我打印我的解决方案，我会得到另一个

1875
02:26:07,439 --> 02:26:11,680
list with zero and hello we are getting very close
列表为零，你好，我们得到了很接近

1876
02:26:11,680 --> 02:26:17,760
now inside of this final list this list alone here we have two entries
现在在这个最终列表中仅此列表就有两个条目

1877
02:26:17,760 --> 02:26:23,840
we have zero and we have 1 and 1 is our solution
我们有 0 个，我们有 1 个1 是我们的解决方案

1878
02:26:23,840 --> 02:26:30,000
which means at the end of this i want to add a 1 and then we should be done so
这意味着最后我想添加 1 然后我们就应该这样做

1879
02:26:30,000 --> 02:26:34,960
let's try and there we go we get hello obviously
让我们尝试一下，我们开始打招呼明显地

1880
02:26:34,960 --> 02:26:39,120
you would very rarely see something like this this is very poor data management
你很少会看到类似的东西这是非常糟糕的数据管理

1881
02:26:39,120 --> 02:26:43,439
because it's a very messy list that is really hard to work with
因为这是一个非常混乱的列表真的很难合作

1882
02:26:43,439 --> 02:26:48,160
but i guess it's a very good exercise this video is going to be part 2 on
但我想这是一个很好的练习该视频将成为第二部分

1883
02:26:48,160 --> 02:26:52,960
lists and tuples and this is primarily going to be about picking multiple
列表和元组，这主要是将要选择多个

1884
02:26:52,960 --> 02:26:56,160
elements so the main problem we have to cover is
元素所以我们要解决的主要问题是

1885
02:26:56,160 --> 02:26:59,600
how to pick multiple elements from a list
如何从a中选取多个元素列表

1886
02:26:59,600 --> 02:27:03,280
let's say we have a list with the numbers one two four and we want to get
假设我们有一个列表数字一二四，我们想要得到

1887
02:27:03,280 --> 02:27:07,760
the second and the third element how could we do that right now we can only
第二个和第三个元素如何我们现在可以这样做吗？我们只能

1888
02:27:07,760 --> 02:27:12,319
pick a single element fortunately python can do this with something that is very
幸运的是python选择了一个元素可以用非常重要的东西来做到这一点

1889
02:27:12,319 --> 02:27:16,640
similar compared to indexing and that is slicing
与索引相似，即切片

1890
02:27:16,640 --> 02:27:21,520
how this works is you are still going to need square brackets like with indexing
这是如何运作的，你仍然会需要像索引一样的方括号

1891
02:27:21,520 --> 02:27:25,680
but now instead of adding one number you are adding two numbers separated by a
但现在你不用添加一个数字将两个由 a 分隔的数字相加

1892
02:27:25,680 --> 02:27:28,479
colon the first number is the start and the
冒号第一个数字是开始和

1893
02:27:28,479 --> 02:27:32,000
second number is the end value for example it could look something like
第二个数字是最终值例如它可能看起来像

1894
02:27:32,000 --> 02:27:36,560
this for example in here we have the indexes
这例如在这里我们有索引

1895
02:27:36,560 --> 02:27:42,160
from zero to three one right now is going to refer to this
从零到三现在有人会提到这一点

1896
02:27:42,160 --> 02:27:46,240
two here and 2 is going to refer to the index
这里有两个2 将引用索引

1897
02:27:46,240 --> 02:27:50,080
number 2 which right now is going to be a 3. this is how we are picking the
2号现在将是a 3. 这就是我们挑选的方式

1898
02:27:50,080 --> 02:27:54,880
start and the end value however there is going to be a really important concept
开始和结束值但是有将是一个非常重要的概念

1899
02:27:54,880 --> 02:27:59,760
you have to understand and that is python only goes up to the
你必须明白那是 python 只上升到

1900
02:27:59,760 --> 02:28:05,520
end but it does not include it which means in this case we would only get one
结束但不包括它意味着在这种情况下我们只会得到一个

1901
02:28:05,520 --> 02:28:09,040
number we would be starting on this 2 here that
数字我们将从这 2 开始

1902
02:28:09,040 --> 02:28:14,319
is our start value however we are only going up to
是我们的起始值，但我们只是上升到

1903
02:28:14,319 --> 02:28:20,720
index number two we are not including it so in practice our list indexing ends
索引二我们不包括它所以实际上我们的列表索引结束

1904
02:28:20,720 --> 02:28:27,280
here right before our end index as a consequence this operation here is
就在我们的结束索引之前因此这里的操作是

1905
02:28:27,280 --> 02:28:31,600
only going to return this two and nothing else
只会返回这两个没有其他的

1906
02:28:31,600 --> 02:28:35,840
that is going to be a fairly common issue but you will get used to it let's
这将是一个相当普遍的现象问题，但你会习惯的，让我们

1907
02:28:35,840 --> 02:28:41,120
practice this one once again here i have a completely empty python file and i
我在这里再练习一次一个完全空的 python 文件和我

1908
02:28:41,120 --> 02:28:45,680
want to create a test list and that is the list we have just seen this one has
想要创建一个测试列表，那就是我们刚刚看到的这个列表有

1909
02:28:45,680 --> 02:28:50,960
the values one two three and four and just to demonstrate what i've just
值一、二、三和四只是为了展示我刚刚所做的

1910
02:28:50,960 --> 02:28:54,960
talked about i want to print my test list
谈到我想打印我的测试列表

1911
02:28:54,960 --> 02:29:00,000
and in here i want the values from 1 colon 2.
在这里我想要从 1 开始的值冒号 2.

1912
02:29:00,000 --> 02:29:04,319
if i now run this i am getting another list with 2.
如果我现在运行这个，我会得到另一个列出2.

1913
02:29:04,319 --> 02:29:09,760
that means that list slicing always returns a list even if there's only a
这意味着列表切片总是返回一个列表，即使只有一个

1914
02:29:09,760 --> 02:29:15,040
single value inside for example what we could even do is go from index 1 to
例如我们里面的单个值甚至可以做的是从索引 1 到

1915
02:29:15,040 --> 02:29:18,479
index 1 which would get us if i run this an
索引1如果我运行这个，这会让我们

1916
02:29:18,479 --> 02:29:22,080
empty list and this is something you always have to
空列表这是你必须做的事情

1917
02:29:22,080 --> 02:29:26,560
keep in mind if you want in this case for example the second and the third
在这种情况下，如果您愿意，请记住例如第二个和第三个

1918
02:29:26,560 --> 02:29:31,359
element you have to go to the index after that in this case this is going to
你必须转到索引的元素之后在这种情况下这将是

1919
02:29:31,359 --> 02:29:36,240
be one two three if i run this now we are getting the
成为一二三如果我现在运行这个我们会得到

1920
02:29:36,240 --> 02:29:40,720
numbers 2 and 3. and that for start is all you have to
数字 2 和 3。首先这就是你所要做的

1921
02:29:40,720 --> 02:29:44,960
know about slicing although you can do quite a bit more but let's talk about
了解切片虽然你可以做还有很多，但我们来谈谈

1922
02:29:44,960 --> 02:29:49,520
this inside of my slides besides the start and the end value you
我的幻灯片里面除了开始值和结束值之外

1923
02:29:49,520 --> 02:29:53,280
can also add a third number for the direction
还可以添加第三个数字方向

1924
02:29:53,280 --> 02:29:57,840
by default this one is going to be zero meaning we are always moving plus one in
默认情况下这个值为零意味着我们总是在移动加一

1925
02:29:57,840 --> 02:30:02,240
the positive direction it might look something like this we again have the
它可能看起来的积极方向像这样我们又得到了

1926
02:30:02,240 --> 02:30:07,359
same list and we have our indexes 0 1 2 and 3.
相同的列表，我们有索引 0 1 2和 3.

1927
02:30:07,359 --> 02:30:12,000
and this one here at the end means that we are moving in the positive
最后这个意味着我们正朝着积极的方向前进

1928
02:30:12,000 --> 02:30:17,600
direction in a step size of 1 which right now will get us the next
步长为 1 的方向现在这将给我们带来下一个

1929
02:30:17,600 --> 02:30:21,760
element but we could have a larger or smaller value you could also have
元素，但我们可以有一个更大的或您也可以拥有较小的值

1930
02:30:21,760 --> 02:30:25,439
negative values to go into the other direction
负值进入另一个方向

1931
02:30:25,439 --> 02:30:29,920
here we are back in the code and i want to add a few more values to this list so
我们回到代码中，我想要向此列表添加更多值，以便

1932
02:30:29,920 --> 02:30:32,720
it's a bit easier to visualize what's happening
更容易想象是什么正在发生

1933
02:30:32,720 --> 02:30:38,160
now we have the values from 1 to 10. although if i run this one here
现在我们的值是从 1 到 10。虽然如果我在这里运行这个

1934
02:30:38,160 --> 02:30:42,160
it is going to give us the same result but now let's say i want to have the
它会给我们相同的结果但现在假设我想要

1935
02:30:42,160 --> 02:30:48,160
values from 0 to 8. if i run this we are getting the
值从 0 到8.如果我运行这个我们会得到

1936
02:30:48,160 --> 02:30:52,720
first eight values although now what i can do i can add
前八个值虽然现在我能做什么我可以添加

1937
02:30:52,720 --> 02:30:56,880
another set of colons and then for example add a two in here
另一组冒号，然后例如在此处添加 2

1938
02:30:56,880 --> 02:31:01,200
and now if i run this i am only getting every second value
现在如果我运行这个我只会得到每秒值

1939
02:31:01,200 --> 02:31:06,479
so we are starting at the index number zero and we are only ever picking every
所以我们从索引号开始零，我们只挑选每一个

1940
02:31:06,479 --> 02:31:11,520
second value which is the three the five and then the seven
第二个值是三五然后是七个

1941
02:31:11,520 --> 02:31:17,600
and since our last index is going to be here we're not including this 9 anymore
由于我们的最后一个索引将是这里我们不再包括这 9 个

1942
02:31:17,600 --> 02:31:23,359
and then we're getting the values 1 3 5 and 7 the values down here
然后我们得到值 1 3 5和 7 这里的值

1943
02:31:23,359 --> 02:31:28,240
and this step size can also be negative for example you could in here add a
并且这个步长也可以是负数例如你可以在这里添加一个

1944
02:31:28,240 --> 02:31:33,040
negative one although right now this wouldn't do very much
负面的虽然现在这个不会做太多事

1945
02:31:33,040 --> 02:31:38,240
so the issue here is we are starting at this value as our starting point
所以这里的问题是我们从这个值作为我们的起点

1946
02:31:38,240 --> 02:31:43,200
and our end value is eight which i believe is this value here
我们的最终值为 8，我相信这个值在这里

1947
02:31:43,200 --> 02:31:47,920
and since we are now moving in this direction there simply isn't any value
既然我们现在要搬进这个方向根本没有任何价值

1948
02:31:47,920 --> 02:31:51,040
so this entire operation doesn't give us anything
所以整个操作并没有给我们任何事物

1949
02:31:51,040 --> 02:31:56,800
however what we can do is flip those two around so our start value is 8 and our n
然而我们能做的就是翻转这两个大约所以我们的起始值为 8，我们的 n

1950
02:31:56,800 --> 02:32:00,479
value is 0. if i now run out of this we get all of
值为 0。如果我现在用完了这个，我们就会得到所有

1951
02:32:00,479 --> 02:32:05,200
these values reversed and negative values you can add actually
这些值颠倒了和你实际可以添加的负值

1952
02:32:05,200 --> 02:32:10,160
everywhere in here so for example you could have the start value of negative
这里到处都是所以例如你起始值可能为负

1953
02:32:10,160 --> 02:32:16,560
one and the end value let's say at four this is going to work just like normal
1 和最终值（假设为 4）这会像平常一样工作

1954
02:32:16,560 --> 02:32:21,200
indexing this would mean you are starting here all the way at the end
索引这意味着你是从这里开始一直到最后

1955
02:32:21,200 --> 02:32:25,680
that is the negative one and then we're going to the fourth element which is
这是负面的，然后我们转到第四个元素，即

1956
02:32:25,680 --> 02:32:30,880
going to be zero one two three and four this one
将零一二三四这个一

1957
02:32:30,880 --> 02:32:34,640
here is index number four so we are expecting to get the numbers
这是索引号四所以我们期待得到数字

1958
02:32:34,640 --> 02:32:39,359
from ten to six let's see if that's the case
从十到六让我们看看情况是否如此

1959
02:32:39,359 --> 02:32:44,160
and it is we get numbers from 10 to 6 and that is basically all you have to
我们得到从 10 到 6 的数字这基本上就是你所要做的

1960
02:32:44,160 --> 02:32:48,240
understand about the basics here although there's one more thing that you
了解这里的基础知识虽然你还有一件事

1961
02:32:48,240 --> 02:32:51,680
can do and that is you can also leave values
可以做也就是说你也可以留下值

1962
02:32:51,680 --> 02:32:56,800
entirely empty when using slicing this might look something like this
使用切片时完全为空可能看起来像这样

1963
02:32:56,800 --> 02:33:00,640
this does look a bit strange but it does work
这看起来确实有点奇怪，但确实如此工作

1964
02:33:00,640 --> 02:33:05,280
what it means is let me talk through it every number in the slicing operation
这意味着让我来谈谈切片操作中的每个数字

1965
02:33:05,280 --> 02:33:09,840
has a default value so we have a start and end and a step
有一个默认值所以我们有开始、结束和步骤

1966
02:33:09,840 --> 02:33:14,479
value for start the default value is always the very first item inside of the
启动值默认值为始终是里面的第一个项目

1967
02:33:14,479 --> 02:33:18,240
list in the example here it would be a 1.
在此处的示例中列出它将是1.

1968
02:33:18,240 --> 02:33:23,840
the end value by default is always going to be the last item inside of the list
默认情况下的最终值始终是成为列表中的最后一项

1969
02:33:23,840 --> 02:33:28,800
in this case here that would be a 4 and for the step size the default value
在这种情况下，这将是 4对于步长大小，使用默认值

1970
02:33:28,800 --> 02:33:34,880
is a 1 which means we are always moving plus one in the positive direction by
是 1 意味着我们一直在移动正方向加一

1971
02:33:34,880 --> 02:33:38,960
default this one should make sense it's quite straightforward
默认这个应该有意义相当简单

1972
02:33:38,960 --> 02:33:42,160
and let's play around with all of that let's see how far we get
让我们尝试一下所有这些让我们看看我们能走多远

1973
02:33:42,160 --> 02:33:47,600
so here we are back in the code and let me actually add all of this inside
所以我们回到代码中让我将所有这些添加到里面

1974
02:33:47,600 --> 02:33:52,560
of a variable let's call it negative slicing i should
一个变量的我们应该称之为负切片

1975
02:33:52,560 --> 02:33:56,240
probably add more variables so it's easier to follow in the notes
可能添加更多变量，所以它是在注释中更容易理解

1976
02:33:56,240 --> 02:34:00,479
but let's start working on leaving values empty this i want to save in a
但让我们开始努力离开值为空，我想保存在

1977
02:34:00,479 --> 02:34:06,080
variable let me call it default slicing
变量让我称之为默认值切片

1978
02:34:06,080 --> 02:34:12,319
in here as always i need my test list and in here i want to go from my start
一如既往，我需要我的测试清单在这里我想从头开始

1979
02:34:12,319 --> 02:34:16,880
to the end of the list and i only want to get every second
到列表末尾我只想得到每一秒

1980
02:34:16,880 --> 02:34:20,960
value now the start is going to be easy
价值现在开始会很容易

1981
02:34:20,960 --> 02:34:24,880
because this one is always going to be one but you could also leave it
因为这个永远都会是一个，但你也可以留下它

1982
02:34:24,880 --> 02:34:29,280
completely empty it would have the same result and here we could also leave
完全空它会有相同的结果，我们也可以离开这里

1983
02:34:29,280 --> 02:34:34,800
empty that would get us the very last item inside of a list 10 right now and
空的，这会让我们最后一个现在列表 10 中的项目以及

1984
02:34:34,800 --> 02:34:38,880
this is actually really useful because by default we don't know what the last
这实际上非常有用，因为默认情况下我们不知道最后一个是什么

1985
02:34:38,880 --> 02:34:43,520
index is going to be finally i want to have every second element
索引最终将是我想要的每隔一个元素

1986
02:34:43,520 --> 02:34:49,200
this would be a 2 in here and now let me print the default slicing
这里是 2现在让我打印默认切片

1987
02:34:49,200 --> 02:34:54,000
variable let's run this and we're only getting every second value
变量让我们运行这个，我们只是获取每秒的值

1988
02:34:54,000 --> 02:34:56,960
we could also add every third value in here
我们还可以添加每第三个值这里

1989
02:34:56,960 --> 02:35:01,120
and there we go if you left all three of them empty and
我们就这样吧如果你把三个都留空并且

1990
02:35:01,120 --> 02:35:06,479
run this again you will get all of the numbers so this is looking a bit strange
再次运行这个你会得到所有的数字所以这看起来有点奇怪

1991
02:35:06,479 --> 02:35:12,080
but it certainly is working and this system can be incredibly useful
但它确实有效这个系统非常有用

1992
02:35:12,080 --> 02:35:17,359
as a consequence let's do an exercise and what i want you guys to do
因此我们来做一个练习我希望你们做什么

1993
02:35:17,359 --> 02:35:23,359
is this exercise here i want you guys to start from 8 and go to 2 and only pick
这是这个练习吗？我希望你们这样做从8开始，到2，只选择

1994
02:35:23,359 --> 02:35:28,080
every second element and when i say 8 and 2 i mean actual
每隔一个元素当我说 8 和 2 时，我的意思是实际的

1995
02:35:28,080 --> 02:35:32,880
number not indexes so you want to start at this 8 here and
数字而非索引所以你想从这里的 8 开始

1996
02:35:32,880 --> 02:35:38,240
then go to this to here at the end these are the values you are going to cover
然后转到这里到最后这些是您要涵盖的值

1997
02:35:38,240 --> 02:35:42,479
except only every second element meaning the 7 shouldn't be in here this 5
除了每隔一个元素的含义7 不应该在这里，这 5

1998
02:35:42,479 --> 02:35:46,399
shouldn't be in here and so on so pause the video now and try to figure
不应该在这里等所以现在暂停视频并尝试弄清楚

1999
02:35:46,399 --> 02:35:48,960
this one out
这个出来了

2000
02:35:50,240 --> 02:35:55,439
let me save all of this inside of a variable and as always we need the test
让我将所有这些保存在一个变量，一如既往，我们需要测试

2001
02:35:55,439 --> 02:35:57,760
list in here
列表在这里

2002
02:35:57,760 --> 02:36:04,720
we need square brackets for slicing and now we need a start an end and a step
我们需要方括号来进行切片和现在我们需要一个开始、一个结束和一个步骤

2003
02:36:04,720 --> 02:36:07,760
size since we do have to go negative remember
尺寸因为我们确实必须消极记住

2004
02:36:07,760 --> 02:36:12,479
we are starting from 8 and we are going to 2 this has to be a negative number
我们从8点开始，我们要去到 2 这必须是负数

2005
02:36:12,479 --> 02:36:16,800
let's say negative 1 now just to have a start value
现在我们说负 1 只是为了有一个起始值

2006
02:36:16,800 --> 02:36:22,080
while i do this let me show the solution right now what we are going to get is
当我这样做时，让我展示解决方案现在我们要得到的是

2007
02:36:22,080 --> 02:36:26,800
the entire list in reverse although in my case i don't want to
整个列表相反虽然就我而言我不想

2008
02:36:26,800 --> 02:36:32,640
start at 10 i want to start at 8 meaning we have to figure out how we can
10 点开始 我想 8 点开始这意味着我们必须弄清楚如何才能

2009
02:36:32,640 --> 02:36:37,040
get this 8 here that would be our start value
在这里得到这个 8这将是我们的起始值

2010
02:36:37,040 --> 02:36:42,240
and one mistake you could be making in here is simply add an 8 because this
以及你可能犯的一个错误这里只是添加一个 8 因为这

2011
02:36:42,240 --> 02:36:46,720
would not work right now we are starting at 9.
行不通现在我们9点开始。

2012
02:36:46,720 --> 02:36:51,680
the problem here is remember when we're using indexing we are starting at zero
这里的问题是记住当我们使用索引我们从零开始

2013
02:36:51,680 --> 02:36:59,359
meaning this is zero one two three four five six seven eight and nine
意思是零一二三四五六七八九

2014
02:36:59,359 --> 02:37:04,000
meaning if we are adding the index eight we are adding on the nine here which
意思是如果我们添加索引八我们在这里添加九个

2015
02:37:04,000 --> 02:37:08,479
isn't helpful instead what we could do is add a 7 in
没有帮助相反，我们可以做的是添加一个 7

2016
02:37:08,479 --> 02:37:13,520
here and now if i run this again we are starting at 8. alternatively what you
此时此地，如果我再次运行这个，我们就会从 8 开始。或者你

2017
02:37:13,520 --> 02:37:17,359
could also do is add a negative 3 in here
还可以做的是添加一个负3这里

2018
02:37:17,359 --> 02:37:21,520
if i run this one we are also starting at 8.
如果我运行这个，我们也将开始在8点。

2019
02:37:21,520 --> 02:37:26,960
and i guess remember we could also go negatively so this 9 would be negative 1
我想记得我们也可以去负数，所以这个 9 将是负 1

2020
02:37:26,960 --> 02:37:32,800
then we have negative 2 and negative 3 that would be our 7.
那么我们有负 2 和负 3那将是我们的7。

2021
02:37:32,800 --> 02:37:37,359
both would be fine it's really up to you what you prefer i guess the 7 here is a
两者都可以，这完全取决于你你喜欢什么我猜这里的 7 是

2022
02:37:37,359 --> 02:37:42,240
bit more expressive but well it's basically subjective
更具表现力但是嗯，这基本上是主观的

2023
02:37:42,240 --> 02:37:47,359
but now we have to find the end value and in here you might be very tempted to
但现在我们必须找到最终值在这里你可能很想

2024
02:37:47,359 --> 02:37:51,439
pick one for the index let me actually do that
选择一个作为索引让我实际这样做

2025
02:37:51,439 --> 02:37:56,880
if i add a one in here run this again we are ending on three as our final
如果我在这里添加一个，请再次运行我们将以三作为最后的结局

2026
02:37:56,880 --> 02:38:00,560
element the reason is that
元素原因是

2027
02:38:00,560 --> 02:38:06,240
python always only goes up to the final element but it doesn't include it
python总是只进入决赛元素但不包含它

2028
02:38:06,240 --> 02:38:10,399
as a consequence three is going to be our final element the way around that
结果三将是我们的最后一个元素就是围绕这个问题

2029
02:38:10,399 --> 02:38:16,160
one is this should be a zero now our final element is this zero so
一是这应该是零现在我们的最后一个元素是零所以

2030
02:38:16,160 --> 02:38:20,319
we're going up to that element but we're not including it so two is our final
我们正在讨论这个元素，但是我们不包括它，所以两个是我们的最终结果

2031
02:38:20,319 --> 02:38:23,760
number the final thing we need is we only want
数字我们需要的最后一件事就是我们只想要

2032
02:38:23,760 --> 02:38:28,319
to pick every second element this is quite easy all we need is a
选取每隔一个的元素这很简单，我们需要的是

2033
02:38:28,319 --> 02:38:34,160
negative two if i now run out of this again we get eight six four and two and
负二如果我现在用完了这个我们再次得到八、六、四和二，

2034
02:38:34,160 --> 02:38:39,840
with that we are done this is basically all you need for slicing and this would
这样我们就完成了，这基本上是切片所需的一切，这将

2035
02:38:39,840 --> 02:38:44,319
also work for a tuple i guess let me demonstrate this one really quick let's
也适用于元组我想让我让我们快速演示一下这个

2036
02:38:44,319 --> 02:38:48,399
call it tuple slicing
称之为元组切片

2037
02:38:48,399 --> 02:38:53,200
and then here we have a test pupil and this one would just have the values one
然后我们有一个测试学生这个只有值 1

2038
02:38:53,200 --> 02:39:01,200
two three four five six seven 8 9 and 10 and in here i could for example print
二三四五六七8 9和10在这里我可以例如打印

2039
02:39:01,200 --> 02:39:03,359
test pupil
测试瞳孔

2040
02:39:03,359 --> 02:39:07,680
with the values 0 5 and let's say 3
值为 05 假设 3

2041
02:39:07,680 --> 02:39:13,840
it should be a colon and let me comment out the exercise here
它应该是一个冒号让我在这里评论一下这个练习

2042
02:39:13,840 --> 02:39:20,000
and there we go we get 1 and 4. once again a list and a tuple are
这样我们就得到了 1 和 4。再次是列表和元组

2043
02:39:20,000 --> 02:39:24,720
incredibly similar the only difference is is that a list can be modified
令人难以置信的相似是唯一的区别是一个列表可以修改

2044
02:39:24,720 --> 02:39:29,040
whereas a tuple cannot there is one more topic that i want to
而元组不能我还有一个话题想要讨论

2045
02:39:29,040 --> 02:39:33,040
cover with lists and tuples and that is unpacking
用列表和元组覆盖，那就是拆包

2046
02:39:33,040 --> 02:39:38,000
basically what that means is both lists and tuples can be unpacked in
基本上这意味着列表和元组都可以解包在

2047
02:39:38,000 --> 02:39:44,319
a way like this we have a and b and we are assigning a tuple to them
像这样我们有 a 和 b 并且我们正在为他们分配一个元组

2048
02:39:44,319 --> 02:39:48,640
what this is doing we are taking the first value and assigning it to the
这是在做什么，我们正在采取第一个值并将其分配给

2049
02:39:48,640 --> 02:39:53,760
first variable a and 10 in this case and the second value gets assigned to
本例中第一个变量 a 和 10第二个值被分配给

2050
02:39:53,760 --> 02:40:00,240
the second value and that way you are unpacking a tuple on two variables
第二个值就是这样解包两个变量的元组

2051
02:40:00,240 --> 02:40:05,120
this would also work with a list you would have the exact same result and
这也适用于列表你会得到完全相同的结果

2052
02:40:05,120 --> 02:40:09,600
let's have a look at all of this in code so for example what we can do i have a
让我们用代码来看看这一切例如我们可以做什么我有一个

2053
02:40:09,600 --> 02:40:13,200
variable called a and a variable called b
变量名为 a 和变量名为乙

2054
02:40:13,200 --> 02:40:18,960
and i want to assign them to the values 10 and 5 inside of a list
我想将它们分配给值列表中的 10 和 5

2055
02:40:18,960 --> 02:40:24,000
and this is well all we need if i now print a and print b
这就是我们所需要的，如果我现在打印a并打印b

2056
02:40:24,000 --> 02:40:30,560
we are getting an n5 we have unpacked this tuple on these two variables
我们收到了一个已拆封的 n5这两个变量的这个元组

2057
02:40:30,560 --> 02:40:35,600
although keep in mind this only works if you have the same number of items as you
尽管请记住这仅在以下情况下才有效你的物品数量与你相同

2058
02:40:35,600 --> 02:40:39,520
have variables if for example i added a third item to
有变量例如，如果我添加了第三个项目

2059
02:40:39,520 --> 02:40:43,920
this tuple let's say a 1. if i run this now
这个元组我们假设是 1。如果我现在运行这个

2060
02:40:43,920 --> 02:40:48,319
we're getting an error that we have too many values to unpack and python
我们也遇到了一个错误许多值需要解压和 python

2061
02:40:48,319 --> 02:40:52,560
expected 2 which we don't have but if you have the same number of
预计 2 但我们没有但如果你有相同数量的

2062
02:40:52,560 --> 02:40:56,560
variables as you have in the tuple you are good to go
元组中的变量可以走了

2063
02:40:56,560 --> 02:41:01,040
and this would also work inside of a list but let me add two more variables
这也适用于列出但让我添加两个变量

2064
02:41:01,040 --> 02:41:06,000
let's say c and d and now we have a list with i know 20
假设c和d现在我们有一个名单，其中我知道 20 个

2065
02:41:06,000 --> 02:41:10,080
and this also works with strings let's say hello
这也适用于字符串让我们问好

2066
02:41:10,080 --> 02:41:17,040
if i now print c and i print d we are getting 20 and hello and this you
如果我现在打印 c 并打印 d我们快到 20 了，你好，这是你

2067
02:41:17,040 --> 02:41:21,840
can also make more powerful because when you are creating a tuple
还可以让自己变得更强大因为当你创建一个元组时

2068
02:41:21,840 --> 02:41:26,720
you don't actually need brackets for example you can have a list like this or
你实际上并不需要括号例如，您可以有一个这样的列表或

2069
02:41:26,720 --> 02:41:31,200
you could create a list like this without the brackets just having values
你可以创建一个这样的列表没有括号，只有值

2070
02:41:31,200 --> 02:41:35,279
separated by a comma automatically creates a tuple
自动用逗号分隔创建一个元组

2071
02:41:35,279 --> 02:41:39,200
although most of the time when you want to create a tuple it makes more sense to
虽然大多数时候当你想要的时候创建一个元组更有意义

2072
02:41:39,200 --> 02:41:42,399
write the brackets because it's clearer what you are doing but you don't
写在括号里因为这样更清楚你正在做什么但你没有

2073
02:41:42,399 --> 02:41:47,200
actually have to do it now where all of this becomes really interesting is when
实际上现在必须这样做这变得非常有趣的是

2074
02:41:47,200 --> 02:41:51,600
you combine these two approaches because by doing that you can assign
你结合这两种方法因为通过这样做你可以分配

2075
02:41:51,600 --> 02:41:56,000
multiple values to multiple variables on a single line of code which is super
多个值到多个变量一行代码就超级棒

2076
02:41:56,000 --> 02:42:00,560
powerful for example we have the variables a b
强大的例如我们有变量 a b

2077
02:42:00,560 --> 02:42:04,399
and c and we are assigning the values 1
和c我们分配值 1

2078
02:42:04,399 --> 02:42:10,720
hello and 4.5 we have assigned values to three variables inside of a single line
你好，我们已经给 4.5 赋值了单行内的三个变量

2079
02:42:10,720 --> 02:42:14,720
of code so let's have a look at this one in practice and then we can do an
代码所以让我们看一下这个在实践中，然后我们可以做一个

2080
02:42:14,720 --> 02:42:18,000
exercise for example for video game you could
锻炼例如对于视频游戏你可以

2081
02:42:18,000 --> 02:42:22,080
have health you could have energy and you could have a weapon
拥有健康，你就能拥有能量和你可以有武器

2082
02:42:22,080 --> 02:42:26,080
and this you could all assign inside of a single line for the health we could
这你都可以在里面分配为了我们的健康，一条线

2083
02:42:26,080 --> 02:42:33,040
have 100 for the energy we could have 50 and for the weapon we could have a sword
100 的能量我们可以拥有 50对于武器我们可以有一把剑

2084
02:42:33,040 --> 02:42:38,319
and now i could print weapon for example and all the way at the end we are
现在我可以打印武器一直到最后我们都是

2085
02:42:38,319 --> 02:42:42,080
getting sword and i hope you see the value of this if
得到剑我希望你能看到这个的价值

2086
02:42:42,080 --> 02:42:45,920
you have to assign multiple variables this is really really useful to keep
你必须分配多个变量这真的非常有用，值得保留

2087
02:42:45,920 --> 02:42:50,640
your code a bit more organized and all right this video is going to be
你的代码更有条理好吧，这个视频将会是

2088
02:42:50,640 --> 02:42:54,479
a bit shorter we can do the exercise right away
稍微短一点，我们可以做这个练习马上

2089
02:42:54,479 --> 02:43:00,640
and what i want you guys to do is this we have a variable 1 with the value 10
我希望你们做的是这个我们有一个值为 10 的变量 1

2090
02:43:00,640 --> 02:43:05,920
and variable 2 with the value test and i want you guys to switch the values of
变量 2 的值为 test 和 i希望你们改变价值观

2091
02:43:05,920 --> 02:43:09,520
these two variables meaning value 1 should have the value
这两个变量意味着值 1 应该具有值

2092
02:43:09,520 --> 02:43:13,120
test and value 2 should have the value 10.
测试和值 2 应该具有值10.

2093
02:43:13,120 --> 02:43:17,760
so pause the video now and try to figure this one out
所以现在暂停视频并尝试弄清楚这个出来了

2094
02:43:19,120 --> 02:43:24,160
alright the solution here is actually incredibly simple all you have to do is
好吧，这里的解决方案实际上是难以置信的简单，你所要做的就是

2095
02:43:24,160 --> 02:43:28,319
you want to assign value 1 and value 2
你想赋值1和值 2

2096
02:43:28,319 --> 02:43:34,840
and what you want to assign them to is value 2 and value
你想把它们分配给什么值 2 和值

2097
02:43:34,840 --> 02:43:43,439
1. basically what we're doing now is for value 2 we are assigning it to value 1
1. 基本上我们现在所做的就是为了值 2 我们将其分配给值 1

2098
02:43:43,439 --> 02:43:49,840
and value 1 gets assigned to value 2. this is basically how you would switch
并且值 1 被分配给值 2。这基本上就是你切换的方式

2099
02:43:49,840 --> 02:43:53,120
around different values across different variables
围绕不同的价值观变量

2100
02:43:53,120 --> 02:43:58,479
meaning now if i print value one let me run this we are getting
意思是现在如果我打印价值一让我运行这个我们得到

2101
02:43:58,479 --> 02:44:01,760
test the value the value that used to be in
测试值 以前的值

2102
02:44:01,760 --> 02:44:05,439
the second variable before we're getting to the next section
第二个变量在我们进入下一部分之前

2103
02:44:05,439 --> 02:44:10,399
i want to do a short intermission and this one is strings lists and tuples
我想做一个短暂的中场休息这是字符串列表和元组

2104
02:44:10,399 --> 02:44:17,520
because those are surprisingly similar all three of them are basically just
因为它们惊人地相似他们三个基本上都只是

2105
02:44:17,520 --> 02:44:21,359
containers they just happen to have different formats
他们恰好拥有的容器不同的格式

2106
02:44:21,359 --> 02:44:25,760
and as a consequence you can move between them very easily and also use
因此你可以移动它们之间非常容易并且也可以使用

2107
02:44:25,760 --> 02:44:30,319
indexing on strings let me demonstrate all of this actually
字符串索引让我实际演示这一切

2108
02:44:30,319 --> 02:44:35,200
i already have two variables a test string and a test list
我已经有两个变量进行测试字符串和测试列表

2109
02:44:35,200 --> 02:44:43,840
i suppose we can start by turning a string into a list or a tubal
我想我们可以从将字符串转换为列表或管道

2110
02:44:43,840 --> 02:44:47,680
the two are very similar we don't really have to worry about the difference here
两者非常相似，但我们并不真的相似必须担心这里的差异

2111
02:44:47,680 --> 02:44:51,840
and to convert a string to a list or tuple you have a couple of different
并将字符串转换为列表或元组你有几个不同的

2112
02:44:51,840 --> 02:44:56,479
ways the first one we can use to test string
方法我们可以用第一个来测试字符串

2113
02:44:56,479 --> 02:45:01,600
and then use the method split and this one splits the string at a
然后使用 split 方法这个将字符串分割为

2114
02:45:01,600 --> 02:45:06,560
certain point if you don't specify anything in here and print a result
如果您不指定某个点这里有任何东西并打印结果

2115
02:45:06,560 --> 02:45:09,840
we are using a space to separate the values
我们使用空格来分隔价值观

2116
02:45:09,840 --> 02:45:15,200
if you enter a value in here let's say a t and run this again we now separate
如果您在此处输入一个值，比如说t 并再次运行此命令，我们现在分开

2117
02:45:15,200 --> 02:45:20,960
this wherever we have a t we start at the beginning here and the t
无论我们有什么地方我们从这里开始，然后

2118
02:45:20,960 --> 02:45:27,359
in there disappears meaning now in the string this t disappears and we have an
那里的意义现在消失了字符串这个 t 消失了，我们有一个

2119
02:45:27,359 --> 02:45:31,200
empty string at the beginning of the list
空的列表开头的字符串

2120
02:45:31,200 --> 02:45:37,920
then we have all of this stuff here up to the next t which is his is a and
那么我们这里就有所有这些东西直到下一个 t 是他的 is a 并且

2121
02:45:37,920 --> 02:45:42,399
then a space then we have the next t here and this
然后是一个空格然后我们有下一个 t 和这个

2122
02:45:42,399 --> 02:45:48,560
one then gets us to the next point the e s bit this one here and then finally we
然后，我们就可以到达下一点 e我们在这里咬了这个，最后我们

2123
02:45:48,560 --> 02:45:52,880
have another t and this one disappears and we are just left with an empty
再有一个t，这个就消失了我们只剩下一个空的

2124
02:45:52,880 --> 02:45:56,160
string most of the time you are just going to
细绳大多数时候你只是要去

2125
02:45:56,160 --> 02:46:01,120
use the space here this one does make a whole lot more sense another thing you
利用这里的空间，这个确实做了一个你更能感受到另一件事

2126
02:46:01,120 --> 02:46:04,720
could do is to use the list function
可以做就是使用列表功能

2127
02:46:04,720 --> 02:46:09,760
and this one turns any kind of data type into some kind of list or at least it
这个可以转换任何一种数据类型进入某种列表或至少它

2128
02:46:09,760 --> 02:46:15,120
tries to it doesn't work with every data type but a string definitely does work
尝试它并不适用于所有数据输入但字符串肯定有效

2129
02:46:15,120 --> 02:46:18,319
if i run this we are now turning every single
如果我运行这个我们现在正在转动每一个

2130
02:46:18,319 --> 02:46:22,560
character into one element inside of a list
将字符放入 a 内的一个元素中列表

2131
02:46:22,560 --> 02:46:27,600
this would also work with a tuple this is another function
这也适用于元组是另一个函数

2132
02:46:27,600 --> 02:46:32,640
here we can add test string once again and now we have the same thing except
在这里我们可以再次添加测试字符串现在我们有同样的事情除了

2133
02:46:32,640 --> 02:46:38,160
now it's a tuple instead of a list the other way also works just fine we
现在它是一个元组而不是一个列表另一种方式也很好用

2134
02:46:38,160 --> 02:46:46,640
can turn a list or a tuple into a string although the process here can be a bit
可以将列表或元组转换为字符串虽然这里的过程可能有点

2135
02:46:46,640 --> 02:46:51,680
weird basically what you would be doing is you first get a string
基本上你会做什么很奇怪你首先得到一个字符串

2136
02:46:51,680 --> 02:46:55,680
and right now i'm going to leave it empty intentionally
现在我要离开它故意空着

2137
02:46:55,680 --> 02:46:59,840
then i need a dot and then i need a specific method and this method is
然后我需要一个点然后我需要一个具体方法，这个方法是

2138
02:46:59,840 --> 02:47:03,920
called join and into this method as an argument i
称为加入并作为参数 i 进入该方法

2139
02:47:03,920 --> 02:47:08,880
have to pass in some kind of list and as an argument here we are going to
必须传递某种列表作为这里的一个论点，我们将

2140
02:47:08,880 --> 02:47:14,640
need a list or a tuple although it has to be a special kind of tuple because
需要一个列表或一个元组，尽管它有是一种特殊的元组，因为

2141
02:47:14,640 --> 02:47:19,200
this one has to contain some kind of string
这个必须包含某种字符串

2142
02:47:19,200 --> 02:47:24,800
let's say one and two just to keep it simple
比方说一个两个只是为了简单起见

2143
02:47:24,800 --> 02:47:29,200
and now for run this these two elements here
现在运行这个这两个元素在这里

2144
02:47:29,200 --> 02:47:34,160
have been merged together what we are specifying inside of the string is going
我们已经合并在一起了指定字符串内部的内容

2145
02:47:34,160 --> 02:47:37,920
to be what determines the gap between the two
成为是什么决定了两者之间的差距

2146
02:47:37,920 --> 02:47:43,359
right now it's empty so there's no gap between 1 and 2.
现在它是空的，所以没有间隙1 到 2 之间。

2147
02:47:43,359 --> 02:47:49,040
i guess i could just add the gap in here if i run this now we get one gap two
我想我可以在这里添加间隙如果我现在运行这个，我们会得到一间隙二

2148
02:47:49,040 --> 02:47:53,359
if we added more values in here let's say three
如果我们在这里添加更多值我们说三个

2149
02:47:53,359 --> 02:47:56,319
and four
和四

2150
02:47:56,319 --> 02:48:00,240
we would always have a gap between each of these values
我们之间总会有差距这些值的

2151
02:48:00,240 --> 02:48:04,240
most of the time you are just going to leave it empty and now you have one
大多数时候你只是要去把它留空，现在你就有了一个

2152
02:48:04,240 --> 02:48:08,080
space between the values what you really have to be careful here
值之间的空间这里你真正需要注意的是

2153
02:48:08,080 --> 02:48:12,240
though is that all of these values have to be a string
但所有这些价值观都有成为一个字符串

2154
02:48:12,240 --> 02:48:18,240
i guess let me copy it and replace this with the test list
我想让我复制它并替换它与测试清单

2155
02:48:18,240 --> 02:48:22,080
we have up here if i run this now we are getting an
我们在这里如果我现在运行这个我们会得到一个

2156
02:48:22,080 --> 02:48:25,840
error that python has a type error sequence
错误python 有一个类型错误序列

2157
02:48:25,840 --> 02:48:30,560
item 0 expected is string instance in found
预期项目 0 是字符串实例成立

2158
02:48:30,560 --> 02:48:35,920
which is python's way of saying it wanted a word or a string but it
这是 python 的表达方式它想要一个单词或一个字符串，但它

2159
02:48:35,920 --> 02:48:40,479
found a number and it's really not happy about it
找到了一个号码，实在不高兴关于它

2160
02:48:40,479 --> 02:48:44,960
finally what you can do is to let me print it again
最后你能做什么是让我再打印一次

2161
02:48:44,960 --> 02:48:50,319
you can use the str function and pass in a list in here
您可以使用 str 函数并传入这里有一个列表

2162
02:48:50,319 --> 02:48:54,800
to turn this list into a string if i run this now
将此列表转换为字符串如果我现在运行这个

2163
02:48:54,800 --> 02:49:02,800
we are getting what looks like a list but this is actually a word or a string
我们得到了一个看起来像列表的东西但这实际上是一个单词或一个字符串

2164
02:49:02,800 --> 02:49:08,160
to demonstrate this let me put all of this inside of the type function if i
为了证明这一点让我把所有this 在类型函数内部如果我

2165
02:49:08,160 --> 02:49:13,359
run this now we get class string this one here is
现在运行这个我们得到类字符串，这里是

2166
02:49:13,359 --> 02:49:17,680
going to be a string it just looks like a list
将是一个字符串，看起来就像一个列表

2167
02:49:17,680 --> 02:49:22,479
but i hope you get the idea one more thing really quick and that is
但我希望你明白还有一件事真的很快，那就是

2168
02:49:22,479 --> 02:49:28,479
indexing on strings this one works like it would work for a list
在字符串上建立索引这个工作原理如下它适用于列表

2169
02:49:28,479 --> 02:49:32,800
for example i could have my test string and in here i want
例如我可以有我的测试字符串在这里我想要

2170
02:49:32,800 --> 02:49:37,120
the first element which right now should be a t
现在应该的第一个元素打

2171
02:49:37,120 --> 02:49:42,080
if i print all of this i am indeed getting a t
如果我打印所有这些我确实是得到一个 t

2172
02:49:42,080 --> 02:49:46,880
just like with a list in the string the first element is going to be 0 then we
就像字符串中的列表一样第一个元素将为 0 那么我们

2173
02:49:46,880 --> 02:49:53,439
have 1 2 3 and so on you could even use slicing here and for
有 1 2 3 等等你甚至可以在这里使用切片

2174
02:49:53,439 --> 02:49:58,800
example at the 5 and now we're getting this the first word
以 5 为例，现在我们得到这是第一个词

2175
02:49:58,800 --> 02:50:04,720
and i think it is quite valuable here to compare these two data types because
我认为这是非常有价值的比较这两种数据类型，因为

2176
02:50:04,720 --> 02:50:08,640
when you think about words they really are just containers for individual
当你思考词语时，它们确实只是个人的容器

2177
02:50:08,640 --> 02:50:13,359
characters and for python it made a lot of sense to make these interchangeable
字符和Python它做了很多使这些可以互换是有意义的

2178
02:50:13,359 --> 02:50:18,399
with a list or a tuple because well it does make kind of sense
带有列表或元组，因为它确实有道理

2179
02:50:18,399 --> 02:50:22,240
one of the major operations you are going to do as a programmer is to work
您从事的主要业务之一作为一名程序员要做的就是工作

2180
02:50:22,240 --> 02:50:26,640
between different data types so understanding how you can change one
不同数据类型之间因此了解如何改变

2181
02:50:26,640 --> 02:50:31,279
data type to another data type is a really valuable experience
数据类型到另一种数据类型是非常宝贵的经验

2182
02:50:31,279 --> 02:50:36,000
but okay there's one exercise i do want you guys to do and that is going to be
但好吧，我确实想要一项练习你们要做的就是

2183
02:50:36,000 --> 02:50:43,120
connected to this operation here let me copy it and add an exercise here
在这里连接到此操作让我复制它并在此处添加练习

2184
02:50:43,120 --> 02:50:46,399
at the end what i want you guys to do on this
在最后我希望你们对此做什么

2185
02:50:46,399 --> 02:50:50,560
string test list i want you guys
字符串测试列表我想要你们

2186
02:50:50,560 --> 02:50:55,279
to use string methods to remove all of the stuff so you only
使用字符串方法删除所有的东西，这样你就可以

2187
02:50:55,279 --> 02:51:00,640
get one two three and four let me comment out
得到一二三四让我评论一下

2188
02:51:00,640 --> 02:51:03,279
all of the other parts to see what we get
所有其他部分，看看我们有什么得到

2189
02:51:03,279 --> 02:51:08,800
right now we're getting square brackets then 1 comma 2 comma 3 comma 4
现在我们得到了方括号然后 1 逗号 2 逗号 3 逗号 4

2190
02:51:08,800 --> 02:51:14,960
and square brackets again and i only want to have 1 2 3 and 4.
再次加上方括号我只想有 1 2 3 和 4。

2191
02:51:14,960 --> 02:51:19,760
try to use some methods to get rid of all of the other values besides the
尝试用一些方法来摆脱除 之外的所有其他值

2192
02:51:19,760 --> 02:51:23,520
numbers and see how far you get
数字，看看你能走多远

2193
02:51:24,640 --> 02:51:28,479
to make this a bit easier let me save the result in a separate
让这变得更容易一点让我将结果保存在单独的文件中

2194
02:51:28,479 --> 02:51:34,960
variable let's call it exercise this is also what i want to print
变量我们称之为练习这也是我想打印的

2195
02:51:34,960 --> 02:51:38,720
right now we have to get rid of a couple of different things
现在我们必须摆脱几个不同事物的

2196
02:51:38,720 --> 02:51:42,800
let's start with the square brackets for those
让我们从方括号开始对于那些

2197
02:51:42,800 --> 02:51:47,359
we need the method we have already seen much earlier called strip
我们需要我们已经见过的方法更早以前称为条带

2198
02:51:47,359 --> 02:51:50,479
and this one we want to start with one of the square
和这个我们想从其中一个正方形开始

2199
02:51:50,479 --> 02:51:53,840
brackets doesn't really matter which one you start with
括号中的哪一个并不重要你从

2200
02:51:53,840 --> 02:51:57,840
if i run this now we got rid of one square bracket
如果我现在运行这个我们就摆脱了一个方括号

2201
02:51:57,840 --> 02:52:02,960
and remember we can combine different methods meaning i can call
记住我们可以结合不同的方法意味着我可以打电话

2202
02:52:02,960 --> 02:52:07,120
strip again and now add the other square brackets
再次脱衣现在添加其他方括号

2203
02:52:07,120 --> 02:52:12,160
the closing one we now have all the numbers and the commas in between them
最后一个我们现在拥有了所有数字和它们之间的逗号

2204
02:52:12,160 --> 02:52:16,479
and to get rid of the commas we want to replace them
并去掉我们想要的逗号替换它们

2205
02:52:16,479 --> 02:52:21,760
meaning i want to target my comma and then replace it with an empty string
意思是我想定位我的逗号然后用空字符串替换它

2206
02:52:21,760 --> 02:52:26,560
so nothing now if we run this we are only getting
所以什么都没有现在如果我们运行这个我们只会得到

2207
02:52:26,560 --> 02:52:32,880
the numbers 1 2 3 and 4 and we are done if you wanted to you could even get rid
数字 1 2 3 和 4 我们就完成了如果你愿意的话你甚至可以摆脱

2208
02:52:32,880 --> 02:52:37,840
of the spaces here as well and this you would achieve with another
这里的空间也是如此而这你可以通过另一个实现

2209
02:52:37,840 --> 02:52:41,760
replace method and now i want to target the empty space
替换方法现在我想瞄准空白区域

2210
02:52:41,760 --> 02:52:45,680
and replace this with nothing now if i run this
并将其替换为空现在如果我运行这个

2211
02:52:45,680 --> 02:52:50,399
we have all of the numbers right next to each other whichever you prefer
我们旁边有所有的数字彼此，无论你喜欢哪个

2212
02:52:50,399 --> 02:52:55,120
at this point this is hopefully at least manageable
在这一点上，这至少是有希望的易于管理的

2213
02:52:55,120 --> 02:53:01,040
the next important data type is a dictionary and this one is a more
下一个重要的数据类型是字典，这个是一个更多

2214
02:53:01,040 --> 02:53:06,240
complex container but still just a container for other variables
复杂的容器，但仍然只是一个其他变量的容器

2215
02:53:06,240 --> 02:53:12,800
this one always has a key and a value pair the example 4 that i have is this
这个总是有一个键和一个值配对我的示例 4 是这样的

2216
02:53:12,800 --> 02:53:20,000
one in here we have a key and we have a value the key right now is an integer
在这里，我们有一把钥匙，我们有一把value 现在的键是一个整数

2217
02:53:20,000 --> 02:53:23,520
the one but it could also be any other data type
唯一的那个但它也可以是任何其他数据类型

2218
02:53:23,520 --> 02:53:28,880
python is fairly flexible here and then we have a value this one here a
python在这里相当灵活然后我们在这里有一个值

2219
02:53:28,880 --> 02:53:32,319
list but again it could also be any other data type
列表，但同样它也可以是任何其他数据类型

2220
02:53:32,319 --> 02:53:35,760
what you ultimately have to understand about dictionaries is that they are a
你最终必须明白什么关于字典的一点是它们是

2221
02:53:35,760 --> 02:53:41,600
container but a more organized one where every value has a key associated
容器，但更有组织性其中每个值都有一个关联的键

2222
02:53:41,600 --> 02:53:46,000
and you would use the key to access the value that way you wouldn't go by
您将使用密钥来访问价值是你不会过去的

2223
02:53:46,000 --> 02:53:50,640
indexing you would instead have specific values we're going to cover that in more
索引你会得到特定的我们将在更多内容中介绍这一点

2224
02:53:50,640 --> 02:53:53,920
detail later on but let's start playing around with that
稍后详细介绍，但让我们开始玩吧与此相关

2225
02:53:53,920 --> 02:53:57,920
let me start by creating a test dictionary
让我首先创建一个测试字典

2226
02:53:57,920 --> 02:54:01,760
and a dictionary you always create with curly brackets
以及一本你经常用来创建的字典大括号

2227
02:54:01,760 --> 02:54:05,279
and inside of the curly brackets you need a key
在大括号内需要一把钥匙

2228
02:54:05,279 --> 02:54:11,200
then a colon and then a value both of those have to be valid python
然后是冒号，然后是一个值这两个都必须是有效的 python

2229
02:54:11,200 --> 02:54:15,439
data types for example for the key let me call it
数据类型例如，对于钥匙，让我称之为

2230
02:54:15,439 --> 02:54:19,840
capital a and the value could just be an integer
资本a并且该值可以只是一个整数

2231
02:54:19,840 --> 02:54:25,200
let's say one two three this would now be one key value pair if you want to add
假设现在是一二三如果要添加，则为一个键值对

2232
02:54:25,200 --> 02:54:29,680
a second one you would add a comma and then the second key value pair
第二个你会添加一个逗号和然后是第二个键值对

2233
02:54:29,680 --> 02:54:34,880
let's say i want to call this one b and now i need a colon again and for the
假设我想将此称为 b现在我再次需要一个冒号

2234
02:54:34,880 --> 02:54:40,479
value now i want a list with the values i guess one two and three again
现在我想要一个包含值的列表我又猜一二三

2235
02:54:40,479 --> 02:54:45,840
i guess let me print this one so we can see the result if i run this we can see
我想让我打印这个，这样我们就可以看看结果如果我运行这个我们可以看到

2236
02:54:45,840 --> 02:54:50,000
we have a dictionary with two key value pairs
我们有一个有两个键值的字典对

2237
02:54:50,000 --> 02:54:54,640
right now the key is always a string but this doesn't have to be the case you
现在键始终是一个字符串，但是这不一定是你的情况

2238
02:54:54,640 --> 02:55:00,800
could also use a number like 1 and then give it the value of i guess we
也可以使用像 1 这样的数字然后给它的值我想我们

2239
02:55:00,800 --> 02:55:05,920
haven't used the boolean yet so i can just add true in here if i now run this
还没有使用布尔值所以我可以如果我现在运行这个，只需在此处添加 true

2240
02:55:05,920 --> 02:55:11,200
we get another key value pair the one limitation you do want to be aware of
我们得到另一个键值对您确实想了解的限制

2241
02:55:11,200 --> 02:55:17,600
here is you cannot duplicate keys for example if i added another a
这是你不能重复的钥匙例如，如果我添加另一个

2242
02:55:17,600 --> 02:55:22,319
with i don't know let's say another value and if i now run this
我不知道，让我们说另一个值，如果我现在运行这个

2243
02:55:22,319 --> 02:55:28,560
this first value has disappeared the reason being that once we add the
第一个值已经消失原因是一旦我们添加

2244
02:55:28,560 --> 02:55:33,760
same key we are overwriting the original key value pair
相同的密钥我们将覆盖原来的键值对

2245
02:55:33,760 --> 02:55:37,520
although most of the time that really isn't an issue you are too concerned
虽然大多数时候确实这不是你太关心的问题

2246
02:55:37,520 --> 02:55:42,399
about and once again you also have a ton of methods you could be using for
大约，再一次你也有很多您可以使用的方法

2247
02:55:42,399 --> 02:55:48,240
dictionaries to go through all of them here is w3schools with a list of all of
字典来浏览所有这些这是 w3schools 的所有列表

2248
02:55:48,240 --> 02:55:52,479
the methods you have available some that you are going to use fairly
您可以使用的方法一些你会公平使用的

2249
02:55:52,479 --> 02:55:59,760
often are values keys and items this one here because those return specific parts
通常是值键和项目这一项这里因为那些返回特定部分

2250
02:55:59,760 --> 02:56:03,439
of the dictionary let's play around with a couple actually
我们来玩一下字典的实际上是一对

2251
02:56:03,439 --> 02:56:08,640
right now if i run this we are getting the entire dictionary but if i add
现在如果我运行这个我们会得到整个字典，但如果我添加

2252
02:56:08,640 --> 02:56:13,760
another method here and add values don't forget the brackets run this again
这里的另一种方法并添加值不忘记括号再次运行

2253
02:56:13,760 --> 02:56:18,240
now i am getting some kind of list looking thing
现在我得到了某种清单看起来的东西

2254
02:56:18,240 --> 02:56:22,319
with just the values from this dictionary
和只是这个字典中的值

2255
02:56:22,319 --> 02:56:26,399
keep in mind this is a different kind of data type
请记住这是一种不同的数据类型

2256
02:56:26,399 --> 02:56:31,439
if i put this into the type function run this again
如果我把这个进入类型函数再次运行

2257
02:56:31,439 --> 02:56:36,319
we're getting class dictionary values this is a completely separate data type
我们正在获取类字典值这是一个完全独立的数据类型

2258
02:56:36,319 --> 02:56:40,160
in and of itself although you don't have to worry about
在其本身虽然你不必担心

2259
02:56:40,160 --> 02:56:44,560
it too much there are specific use cases for it and they all work basically
太多了，有特定的用例为此，它们基本上都可以工作

2260
02:56:44,560 --> 02:56:47,920
automatically and you never think about the data type here
自动地，你永远不会想到这里的数据类型

2261
02:56:47,920 --> 02:56:52,720
the other method would be keys and this one gives you all of the keys again in
另一种方法是键，这个一个人再次给你所有的钥匙

2262
02:56:52,720 --> 02:56:57,120
the dig keys data type finally what we could also be looking at
dig 键数据类型最后我们还可以关注什么

2263
02:56:57,120 --> 02:57:02,000
is items and this one is going to return the list but now it has two builds
是物品，这个将要返回列表，但现在它有两个版本

2264
02:57:02,000 --> 02:57:06,479
inside and those we could also access we are going to learn how this works later
里面以及我们也可以访问的那些稍后将了解这是如何工作的

2265
02:57:06,479 --> 02:57:08,720
on and if you go for the list of the
在如果你去查看列表

2266
02:57:08,720 --> 02:57:12,399
different methods this one should be fairly straightforward
这个应该是不同的方法非常坦率的

2267
02:57:12,399 --> 02:57:15,680
besides that you can also use once again the lan
除此之外您还可以再次使用局域网

2268
02:57:15,680 --> 02:57:21,120
method is incredibly versatile in here we can add the test dictionary and we
这里的方法非常通用我们可以添加测试字典，然后我们

2269
02:57:21,120 --> 02:57:25,520
would get three meaning we have three key value pairs inside of this
会得到三个意味着我们有三个this 里面的键值对

2270
02:57:25,520 --> 02:57:32,479
dictionary we have one two and three and that's kind of it for the basics of
字典中我们有一、二和三这就是基础知识

2271
02:57:32,479 --> 02:57:37,920
a dictionary it really isn't that complicated i guess let me add a comment
一本字典，其实不是那样的复杂我想让我添加评论

2272
02:57:37,920 --> 02:57:42,319
here at the top for basics of a dictionary
在顶部了解 a 的基础知识字典

2273
02:57:42,319 --> 02:57:47,680
one topic i do want to cover really quick is converting a dictionary
我确实想讨论一个主题快速正在转换字典

2274
02:57:47,680 --> 02:57:51,600
for example what we could be doing i guess let me print the results straight
例如我们可以做什么猜猜让我直接打印结果

2275
02:57:51,600 --> 02:57:54,880
away i could get my test dictionary and
离开我可以拿到我的测试词典

2276
02:57:54,880 --> 02:57:59,520
convert it to a list for example if i run this
例如将其转换为列表如果我运行这个

2277
02:57:59,520 --> 02:58:04,479
we are now getting an actual list with all of the keys
我们现在得到了一个实际的列表所有的钥匙

2278
02:58:04,479 --> 02:58:07,520
meaning the list contains a b
意味着列表包含乙

2279
02:58:07,520 --> 02:58:10,319
and 1. something you really want to keep in
和 1。你真正想保留的东西

2280
02:58:10,319 --> 02:58:13,600
mind when you are converting the data type here
转换数据时请注意在此输入

2281
02:58:13,600 --> 02:58:18,160
tuple would result in the very same outcome i
元组会导致完全相同的结果我

2282
02:58:18,160 --> 02:58:21,920
guess finally you could also convert all of this to a string
最后猜想你也可以转换所有这个到一个字符串

2283
02:58:21,920 --> 02:58:26,319
and then you would get the entire dictionary as a string
然后你会得到整个字典作为字符串

2284
02:58:26,319 --> 02:58:30,960
probably not the most useful thing you could do but well you can do it
可能不是你最有用的东西可以，但是你可以做到

2285
02:58:30,960 --> 02:58:35,680
i do want to cover one more important thing and that is indexing with
我确实想介绍一个更重要的内容东西，那就是索引

2286
02:58:35,680 --> 02:58:38,479
dictionaries
字典

2287
02:58:38,720 --> 02:58:43,439
and here we have a problem because indexing the way we have learned it so
这里我们遇到了一个问题，因为按照我们学到的方式建立索引

2288
02:58:43,439 --> 02:58:48,720
far does not work and i think this makes sense if you have a dictionary like that
远不起作用，我认为这使得感觉如果你有一本这样的字典

2289
02:58:48,720 --> 02:58:53,680
and you want to add some kind of indexing operation at the end let's say
你想添加某种最后的索引操作比方说

2290
02:58:53,680 --> 02:58:57,600
with the number zero this to python would be kind of
与数字零这对 python 来说是一种

2291
02:58:57,600 --> 02:59:01,359
confusing this could for python mean you want to
令人困惑的这对于 python 来说可能意味着你想要

2292
02:59:01,359 --> 02:59:06,640
have the first item inside of the index or it could mean you are supposed to
索引中的第一项或者这可能意味着你应该

2293
02:59:06,640 --> 02:59:09,359
look for a key
寻找关键

2294
02:59:09,359 --> 02:59:13,200
with the value 0. in this dictionary this doesn't exist
值为 0。这本字典里不存在这个

2295
02:59:13,200 --> 02:59:16,880
but python doesn't know it when it sees this number here
但Python看到时并不知道这个号码在这里

2296
02:59:16,880 --> 02:59:20,880
as a consequence the normal indexing does not work
因此正常索引不起作用

2297
02:59:20,880 --> 02:59:24,960
but there is another way actually there are two other ways you would do
但实际上还有另一种方式还有另外两种方法吗

2298
02:59:24,960 --> 02:59:28,880
something like this instead of an integer you would add the
像这样的东西而不是整数，您可以添加

2299
02:59:28,880 --> 02:59:34,880
name of the key in this case we have square brackets with an a and
本例中键的名称我们有一个带有 a 和 的方括号

2300
02:59:34,880 --> 02:59:41,200
the a refers to this key here what is then being returned is
a 在这里指的是这个键然后返回的是

2301
02:59:41,200 --> 02:59:46,479
the value associated with the key which is the one another way of doing this is
与键关联的值另一种方法是

2302
02:59:46,479 --> 02:59:50,080
the method get this one works in the same way you are
该方法得到这个和你的工作方式一样

2303
02:59:50,080 --> 02:59:54,720
passing in a key this key looks for a specific key value pair in the
传递一个键，这个键寻找一个中的特定键值对

2304
02:59:54,720 --> 02:59:58,960
dictionary and we are getting the value associated returned
字典，我们正在获取值相关返回

2305
02:59:58,960 --> 03:00:04,720
back in my code i want to print test dictionary
回到我的代码我想打印测试词典

2306
03:00:04,720 --> 03:00:09,279
and now i want to get the value for capital a
现在我想得到的值资本a

2307
03:00:09,279 --> 03:00:15,040
if i run this now we get 1 2 3 which is the value we have gotten all the way up
如果我现在运行这个我们得到 1 2 3 这是我们一路上涨的价值

2308
03:00:15,040 --> 03:00:19,279
here along the same lines instead of using square brackets you
这里沿着同样的路线而不是使用方括号

2309
03:00:19,279 --> 03:00:24,000
could use the method get and in here pass in the key you are
可以使用方法 get并在这里传递你的密钥

2310
03:00:24,000 --> 03:00:29,600
looking for and you will get the value associated with it one two three again
寻找，你就会得到价值再次关联一二三

2311
03:00:29,600 --> 03:00:34,160
you may be wondering now what is the difference between these two approaches
你现在可能想知道什么是这两种方法之间的区别

2312
03:00:34,160 --> 03:00:40,080
and generally get is slightly better because if you're looking for a key that
一般来说得到的是稍微好一些因为如果你正在寻找一把钥匙

2313
03:00:40,080 --> 03:00:45,680
doesn't exist let's say x in this case if you use square brackets
不存在，在本例中假设为 x如果你使用方括号

2314
03:00:45,680 --> 03:00:50,160
you are going to get an error meaning your entire code is going to crash
你会得到一个错误的意思你的整个代码将会崩溃

2315
03:00:50,160 --> 03:00:54,960
which usually is not a good sign but if you use the get method
这通常不是一个好兆头但如果你使用 get 方法

2316
03:00:54,960 --> 03:00:59,120
you don't get an error instead you get none returned
你不会得到错误，而是得到没有返回

2317
03:00:59,120 --> 03:01:03,680
which means let me add comments doesn't crash
这意味着让我添加评论不会崩溃

2318
03:01:03,680 --> 03:01:10,960
when it cannot find a key and i guess the comment here would be does crash
当它找不到钥匙时我猜这里的评论是 do crash

2319
03:01:10,960 --> 03:01:17,760
when it doesn't find the key or e
当它找不到钥匙时或e

2320
03:01:17,760 --> 03:01:22,399
besides that the two approaches are pretty much identical
除此之外，这两种方法是几乎相同

2321
03:01:22,399 --> 03:01:27,680
and with that we have covered all of the basic things for this part so let's do
这样我们就涵盖了所有的这部分的基本内容让我们开始吧

2322
03:01:27,680 --> 03:01:33,359
an exercise what i want you guys to do is to do some research and look up the
我希望你们做的一个练习是做一些研究并查找

2323
03:01:33,359 --> 03:01:38,319
update method for a dictionary and via this method add another key
字典的更新方法并通过此方法添加另一个密钥

2324
03:01:38,319 --> 03:01:42,399
value pair to this dictionary
该字典的值对

2325
03:01:43,920 --> 03:01:49,359
once again i am on a website that looks at all of the different methods that we
我再一次访问了一个看起来在我们使用的所有不同方法中

2326
03:01:49,359 --> 03:01:53,279
could be using with a dictionary and the one we want to look for right
可以与字典一起使用以及我们想要寻找的那个

2327
03:01:53,279 --> 03:02:00,960
now is called update if i click on it we have an example a definition syntax
如果我点击它，现在称为更新我们有一个定义语法的示例

2328
03:02:00,960 --> 03:02:04,399
and quite a few different things that we could be doing
还有很多不同的事情我们可能正在做

2329
03:02:04,399 --> 03:02:06,880
usually what i'm looking at is the example
通常我正在看的是例子

2330
03:02:06,880 --> 03:02:10,080
in here we have one dictionary and then we're
在这里我们有一本字典然后我们

2331
03:02:10,080 --> 03:02:14,840
using the update method and we are passing in as an argument in another
使用更新方法，我们是作为另一个参数传递

2332
03:02:14,840 --> 03:02:19,920
dictionary and this dictionary has a key and a value pair and this is going to
字典，这本字典有一个键和一个值对，这将是

2333
03:02:19,920 --> 03:02:23,359
insert all of this into the other dictionary
将所有这些插入到另一个中字典

2334
03:02:23,359 --> 03:02:28,160
so let's have a look at this i want to get my test dictionary and i
让我们看看这个我想要我的测试词典，我

2335
03:02:28,160 --> 03:02:32,640
want to use the update method and what we have seen so far is to
想要使用更新方法到目前为止我们所看到的是

2336
03:02:32,640 --> 03:02:38,000
insert another dictionary and in here we can just add some values
插入另一个字典在这里我们可以添加一些值

2337
03:02:38,000 --> 03:02:45,439
let's say i want another key that's not how you spell that then a colon
假设我想要另一把钥匙，但不是你怎么拼写然后冒号

2338
03:02:45,439 --> 03:02:50,080
and then some other values i guess what we haven't used yet is a tuple
然后是其他一些值我猜是什么我们还没有使用的是一个元组

2339
03:02:50,080 --> 03:02:52,960
with i don't know some other values in here
和我不知道这里还有其他一些值

2340
03:02:52,960 --> 03:02:56,880
if i run this we're not going to see any difference because we are not printing
如果我运行这个我们不会看到任何差异是因为我们不打印

2341
03:02:56,880 --> 03:03:00,960
our new dictionary meaning now if i print my task
我们的新词典意思是现在如果我打印我的任务

2342
03:03:00,960 --> 03:03:05,439
dictionary i can now see another key and one two
字典我现在可以看到另一把钥匙和一两个

2343
03:03:05,439 --> 03:03:09,359
three at the end although you could be using this method
最后三个虽然你可以使用这种方法

2344
03:03:09,359 --> 03:03:13,200
in another way as well let me get rid of the argument we had so
也以另一种方式让我摆脱我们之间的争论

2345
03:03:13,200 --> 03:03:18,000
far and what you could be doing as well is specify
到目前为止以及你还可以做什么是指定

2346
03:03:18,000 --> 03:03:23,359
some kind of name for a key in my case c and then specify a value let's say let
在我的案例 c 中，某个键的名称然后指定一个值让我们说让

2347
03:03:23,359 --> 03:03:26,479
me call it test if i run this now
我称之为测试如果我现在运行这个

2348
03:03:26,479 --> 03:03:31,359
we get a string c and then test as another value
我们得到一个字符串 c 然后测试为另一个值

2349
03:03:31,359 --> 03:03:37,279
and you could even add multiple values in here let's say d is going to be
你甚至可以添加多个值在这里假设 d 是

2350
03:03:37,279 --> 03:03:42,560
i know one two three it doesn't really matter and with that we have well
我知道一二三，但其实不知道很重要，这样我们就有了

2351
03:03:42,560 --> 03:03:48,960
another value i suppose while we are here there's one more way to add a value
我想当我们在的时候还有另一个价值这里还有另一种增加价值的方法

2352
03:03:48,960 --> 03:03:53,439
inside of a dictionary or a key value pair to be more specific
字典或键值内部配对更具体

2353
03:03:53,439 --> 03:03:59,439
and that is by using test dictionary and then using brackets and specifying a
那是通过使用测试字典然后使用括号并指定

2354
03:03:59,439 --> 03:04:04,880
new key here this is very similar to using the key here except now we are
这里的新密钥非常类似于使用这里的钥匙，但现在我们是

2355
03:04:04,880 --> 03:04:11,359
creating a whole new key value pair a value we haven't used yet would be e
创建一个全新的键值对我们还没有使用过的值是 e

2356
03:04:11,359 --> 03:04:16,240
and now you can just assign a new value to it let's say a hundred
现在你可以分配一个新值假设有一百个

2357
03:04:16,240 --> 03:04:20,080
if i now run this we have all the way at the end
如果我现在运行这个我们一路走到最后

2358
03:04:20,080 --> 03:04:25,120
the key e with the value 100 the thing we have specified here
键 e 的值为 100 的东西我们在这里指定了

2359
03:04:25,120 --> 03:04:30,319
and that is basically all you have to know about dictionaries it really is a
这基本上就是你所要做的了解字典，它确实是一个

2360
03:04:30,319 --> 03:04:35,600
fairly simple data type but one that gives a lot of order to your code
相当简单的数据类型，但给你的代码带来很多秩序

2361
03:04:35,600 --> 03:04:41,920
the final major data type is a set and these are also simple containers
最终的主要数据类型是集合这些也是简单的容器

2362
03:04:41,920 --> 03:04:47,279
just like the other containers we have seen but this one is kind of different
就像我们拥有的其他容器一样见过，但这个有点不同

2363
03:04:47,279 --> 03:04:53,359
and special in some way it would look like this we still have curly brackets
在某种程度上它看起来很特别像这样我们仍然有大括号

2364
03:04:53,359 --> 03:04:58,000
like in the dictionary at the start and at the end and inside we have values
就像字典中开头的那样在最后和内部我们有价值观

2365
03:04:58,000 --> 03:05:01,840
separated by a comma so far all of this is really
用逗号分隔到目前为止，这一切确实是

2366
03:05:01,840 --> 03:05:05,680
straightforward the only difference compared to
直截了当唯一的区别是

2367
03:05:05,680 --> 03:05:09,680
dictionary is we don't have keys we just have values
字典是我们没有钥匙，我们只是有价值观

2368
03:05:09,680 --> 03:05:15,520
where a set becomes unique is that every single value inside of a set has to be
集合变得独特的地方是每个集合内的单个值必须是

2369
03:05:15,520 --> 03:05:21,040
unique and any kind of duplicate will be deleted
唯一的并且任何类型的重复都将是已删除

2370
03:05:21,040 --> 03:05:25,760
once more i have a completely empty python file and i want to create a
我再一次拥有了一个完全空的python 文件，我想创建一个

2371
03:05:25,760 --> 03:05:29,760
variable let's call it my set and here
变量让我们称之为我的集合和这里

2372
03:05:29,760 --> 03:05:34,560
i need curly brackets and inside of those i want to have some values i want
我需要大括号和里面那些我想要有一些我想要的价值观

2373
03:05:34,560 --> 03:05:39,439
to have separated by commas once i have that i can print this
以逗号分隔一旦我有了，我就可以打印这个

2374
03:05:39,439 --> 03:05:44,399
variable run the code and we can see we have some kind of set
变量运行代码，我们可以看到有某种集合

2375
03:05:44,399 --> 03:05:48,240
you know it's a set because we have values surrounded by curly brackets
你知道这是一套，因为我们有用大括号括起来的值

2376
03:05:48,240 --> 03:05:52,880
without any kind of keys if they had keys it would be a dictionary
没有任何钥匙（如果他们有的话）键这将是一本字典

2377
03:05:52,880 --> 03:05:56,880
the one crucial thing you have to understand is that if i have a duplicate
你必须做的一件至关重要的事情我明白的是，如果我有一个重复的

2378
03:05:56,880 --> 03:06:02,640
value in here let's say i have two fours if i run this again the second four is
这里的值假设我有两个四如果我再次运行这个，第二个四个是

2379
03:06:02,640 --> 03:06:08,080
going to disappear because every value in here has to be unique and python is
将会消失，因为每个值这里必须是唯一的，而 python 是

2380
03:06:08,080 --> 03:06:11,120
going to get rid of any value that is duplicated
将摆脱任何价值重复的

2381
03:06:11,120 --> 03:06:16,960
let's say duplicate values will be exterminated
假设重复值是消灭的

2382
03:06:16,960 --> 03:06:22,080
all right but other than that we can do quite a few normal things with a set for
好吧，但除此之外我们还能做相当多正常的东西，一套

2383
03:06:22,080 --> 03:06:30,560
example we could print the len of my set that is not a bracket let's run this now
例如我们可以打印我的集合的长度这不是括号让我们现在运行它

2384
03:06:30,560 --> 03:06:36,319
and we know this set has a length of 4 because we have 4 elements inside of it
我们知道这个集合的长度为 4因为我们里面有 4 个元素

2385
03:06:36,319 --> 03:06:41,120
because we get rid of the duplicate values what you can also do is to use
因为我们去掉了重复的值你还可以做的是使用

2386
03:06:41,120 --> 03:06:47,760
methods and sets do have quite a few one that is fairly popular is you can
方法和集合确实有很多相当受欢迎的一个是你可以

2387
03:06:47,760 --> 03:06:52,399
add another value and in here you just add as an argument the value you want to
添加另一个值，在这里你只需添加您想要的值作为参数

2388
03:06:52,399 --> 03:06:57,920
add and if you run out of this now we have a 5 added at the end of the set
添加，如果你现在用完了，我们在集合末尾添加 5

2389
03:06:57,920 --> 03:07:02,640
along the same lines you can also remove a value
同样，您也可以删除一个值

2390
03:07:02,640 --> 03:07:05,920
and let's say i want to remove the 2 in here
假设我想删除 2这里

2391
03:07:05,920 --> 03:07:11,040
if i run this now we don't have a 2 in the set anymore
如果我现在运行这个我们的套装中不再有 2

2392
03:07:11,040 --> 03:07:14,800
for the full list of all the methods you have available let's use a different
获取所有方法的完整列表有可用的让我们使用不同的

2393
03:07:14,800 --> 03:07:18,800
website this time i'm using a website called geeksforgeeks this one is also
网站 这次我使用的是网站叫做 geeksforgeeks 这个也是

2394
03:07:18,800 --> 03:07:22,399
quite good for python and i do want you guys to get used to looking at different
对于 python 来说非常好，我确实想要你伙计们要习惯看不同的东西

2395
03:07:22,399 --> 03:07:28,080
websites they all do very similar things but slightly different so it is a really
他们都做非常相似的事情的网站但略有不同，所以它确实是

2396
03:07:28,080 --> 03:07:32,880
good idea to understand different ones all i really did was i typed python set
理解不同的好主意我真正做的就是输入 python set

2397
03:07:32,880 --> 03:07:37,200
methods into google and there we have w3schools we have programmers we have
进入谷歌的方法，我们有w3schools 我们有程序员

2398
03:07:37,200 --> 03:07:41,920
geeks for geeks and we have the python documentation
极客归极客，我们有 python文档

2399
03:07:41,920 --> 03:07:46,640
these are the four that usually come up in google that tell you all you need to
这是通常出现的四个在谷歌中，它会告诉你所有你需要的

2400
03:07:46,640 --> 03:07:52,800
know about specific parts of python in here if you scroll down you have a
了解Python的特定部分在这里，如果你向下滚动，你会看到

2401
03:07:52,800 --> 03:07:57,439
whole list of all the methods you could be using
您可以使用的所有方法的完整列表正在使用

2402
03:07:57,439 --> 03:08:02,479
the one you have just seen was add and this one adds another value
你刚刚看到的是 add 和这个增加了另一个价值

2403
03:08:02,479 --> 03:08:07,760
and in here well you have a lot of different stuff you can work with and
在这里你有很多你可以使用不同的东西

2404
03:08:07,760 --> 03:08:11,920
the list really isn't that long it should be fairly easy to work with
这个清单确实没那么长应该很容易使用

2405
03:08:11,920 --> 03:08:14,160
now there's one thing
现在有一件事

2406
03:08:14,160 --> 03:08:21,359
that is quite limiting for sets and that is that indexing and slicing
这对于集合来说是相当有限的就是索引和切片

2407
03:08:21,359 --> 03:08:24,319
does not work
才不是工作

2408
03:08:24,319 --> 03:08:28,960
i guess let me put these two print statements at the top and now i want to
我想让我把这两个打印出来顶部的声明，现在我想要

2409
03:08:28,960 --> 03:08:31,680
print my set
打印我的一套

2410
03:08:31,680 --> 03:08:36,160
and then the one with the index 0. if i run this
进而索引为 0 的那个。如果我运行这个

2411
03:08:36,160 --> 03:08:40,720
we are getting an error and the type error we are getting is set object is
我们收到一个错误及其类型我们得到的错误是设置对象是

2412
03:08:40,720 --> 03:08:44,880
not subscriptable which is a pythonic way of saying that
不可订阅这是一种Python式的表达方式

2413
03:08:44,880 --> 03:08:51,120
you cannot use indexing for a set as a matter of fact there actually isn't a
您不能将集合的索引用作事实上实际上并没有

2414
03:08:51,120 --> 03:08:55,760
really easy way to pick one element from a set
从中选择一个元素的非常简单的方法一套

2415
03:08:55,760 --> 03:09:00,240
the one that gets closest to it is to use the pop method
最接近它的是使用弹出方法

2416
03:09:00,240 --> 03:09:06,399
let me comment this one out and instead i want to have my set and then use the
让我评论一下这个我想要一套，然后使用

2417
03:09:06,399 --> 03:09:09,120
pop method
弹出方法

2418
03:09:09,359 --> 03:09:15,920
if i run the code now we are getting a 1 or the first item inside of the set
如果我现在运行代码我们会得到 1或集合中的第一项

2419
03:09:15,920 --> 03:09:20,160
however what this one is doing if i print this set
但是如果我这个人在做什么打印这套

2420
03:09:20,160 --> 03:09:25,920
after this operation the one has now disappeared
此操作后现在已经消失了

2421
03:09:25,920 --> 03:09:31,520
the reason being that this pop takes the first item from the set returns it and
原因是这个流行音乐采取了集合中的第一项返回它并且

2422
03:09:31,520 --> 03:09:35,920
then removes it from the set if you call this multiple times at some
然后将其从集合中删除如果你在某个时候多次调用这个

2423
03:09:35,920 --> 03:09:39,920
point your set is going to run out of items
你的集合即将用完的点项目

2424
03:09:39,920 --> 03:09:43,760
which again very often is not what you want to do
这又常常不是你想要的想做

2425
03:09:43,760 --> 03:09:49,040
sets are not designed for indexing or generate to pick items from them
集不是为索引或生成以从中挑选项目

2426
03:09:49,040 --> 03:09:53,359
the actual use case is something entirely different i'll cover that in a
实际用例是这样的完全不同，我将在

2427
03:09:53,359 --> 03:09:57,520
second but first of all we could actually do a really interesting
第二但首先我们可以实际上做了一个非常有趣的事情

2428
03:09:57,520 --> 03:10:03,359
exercise just in the middle of this and the exercise i want you guys to try
就在这中间锻炼以及我希望你们尝试的练习

2429
03:10:03,359 --> 03:10:07,920
is to use type conversion to get one item from the set by index
就是利用类型转换得到一个按索引设置的项目

2430
03:10:07,920 --> 03:10:13,200
basically what that means is you should try to convert this set into another
基本上这意味着你应该尝试将此集合转换为另一个集合

2431
03:10:13,200 --> 03:10:17,760
data type and then on this data type get the index
数据类型，然后在此数据类型上获取索引

2432
03:10:17,760 --> 03:10:20,880
the main thing i want you guys to take away from this is that you can very
我想让你们做的最重要的事情远离这个就是你可以非常

2433
03:10:20,880 --> 03:10:25,200
easily change the data type of something in python and then use different methods
轻松更改某物的数据类型在 python 中，然后使用不同的方法

2434
03:10:25,200 --> 03:10:30,720
or different operations so see if you can figure this one out
或不同的操作看看你能不能解决这个问题

2435
03:10:32,399 --> 03:10:38,479
we know that we cannot take the index of a set this one just doesn't work
我们知道我们不能采用索引一套这个不行

2436
03:10:38,479 --> 03:10:43,359
however what we can do is get the index of a list
然而我们能做什么是获取列表的索引

2437
03:10:43,359 --> 03:10:48,319
so what i can do is convert my set to a list and then from this list i want to
所以我能做的就是将我的集合转换为列出，然后从这个列表中我想要

2438
03:10:48,319 --> 03:10:52,640
take the index meaning if i run this now this one is
取索引意思是如果我现在运行这个

2439
03:10:52,640 --> 03:10:59,200
going to work i get the first index i could get the index at one
去上班我得到第一个索引 i可以获得索引为一

2440
03:10:59,200 --> 03:11:03,840
or any other index this is now going to be a list that we can work with
或现在要使用的任何其他索引是我们可以使用的列表

2441
03:11:03,840 --> 03:11:08,800
if i remove the indexing and show the entire thing that we are getting is well
如果我删除索引并显示我们得到的一切都很好

2442
03:11:08,800 --> 03:11:14,800
it's just a list that came from the set and this is also non-destructible we are
这只是来自集合的列表这也是不可破坏的

2443
03:11:14,800 --> 03:11:18,800
just doing this for this one print statement outside of it the set is going
只是为了这一张打印而这样做在它之外的语句集合将要进行

2444
03:11:18,800 --> 03:11:23,680
to remain a set we are not changing the entire variable just for this one line
为了保持一套，我们不会改变整个变量仅用于这一行

2445
03:11:23,680 --> 03:11:27,439
we are changing the data type for a very specific purpose
我们正在更改数据类型特定用途

2446
03:11:27,439 --> 03:11:31,040
which is what you are going to do very often as a programmer
这就是你要做的事情经常作为程序员

2447
03:11:31,040 --> 03:11:34,319
meaning this is something you definitely want to get used to
这意味着这绝对是你的事情想要习惯

2448
03:11:34,319 --> 03:11:40,080
and that way you would select different values from a set although that really
这样你就会选择不同的一组值，尽管那确实

2449
03:11:40,080 --> 03:11:44,080
isn't the idea of a set but i guess let's talk about what the
不是一个集合的想法但我想我们来谈谈

2450
03:11:44,080 --> 03:11:49,680
actual purpose of a set is in python and what they are supposed to do is
集合的实际用途是在 python 中他们应该做的是

2451
03:11:49,680 --> 03:11:55,520
being used for comparison operators sets are incredibly good at that
用于比较运算符集非常擅长于此

2452
03:11:55,520 --> 03:12:00,239
there are a lot of ways to check if two sets have values in common or if they
有很多方法可以检查两个是否集合有共同的值或者如果它们

2453
03:12:00,239 --> 03:12:03,680
have different values for example what we could be doing is
有不同的价值观例如我们可以做的是

2454
03:12:03,680 --> 03:12:08,239
set one and check if there's a union with a set two and that way we are
设置一个并检查是否存在联合有了第二组，我们就这样

2455
03:12:08,239 --> 03:12:12,960
getting all of the shared elements another way we'll be looking at the
获取所有共享元素我们将用另一种方式来看待

2456
03:12:12,960 --> 03:12:17,279
intersection between two elements and now we only get the values that are
两个元素之间的交集和现在我们只能得到以下值

2457
03:12:17,279 --> 03:12:22,000
present in both data sets there are actually quite a few more
存在于两个数据集中其实还有很多

2458
03:12:22,000 --> 03:12:26,160
let's go through a couple of them let me add another comment for another
让我们来看看其中的几个让我为另一个人添加另一个评论

2459
03:12:26,160 --> 03:12:30,880
section and let's call this comparison
部分，我们称之为比较

2460
03:12:30,880 --> 03:12:35,359
operators and in here to keep things a bit cleaner
运营商在这里让事情变得更干净

2461
03:12:35,359 --> 03:12:40,560
i want to have two more sets set one and set two that do share some
我想要多两套设置一和设置二确实共享一些

2462
03:12:40,560 --> 03:12:44,080
values and everything else i want to comment
价值观以及我想评论的所有其他内容

2463
03:12:44,080 --> 03:12:48,960
out so we are not going to get confused what you can do
这样我们就不会感到困惑你可以做什么

2464
03:12:48,960 --> 03:12:55,520
for example the one we have seen already i can print set 1 and then union
例如我们已经见过的那个我可以打印集合 1 然后联合

2465
03:12:55,520 --> 03:12:58,800
and set 2. if i run this now
并设置 2。如果我现在运行这个

2466
03:12:58,800 --> 03:13:03,680
we essentially merged these two sets i suppose an operation that is a bit
我们基本上合并了这两组我想这个操作有点

2467
03:13:03,680 --> 03:13:10,000
easier to see in terms of what's going on is the intersection method
更容易了解正在发生的事情on 是交集法

2468
03:13:10,000 --> 03:13:16,399
if i run this one we are now only getting 4 because 4 is the only value
如果我运行这个，我们现在就只剩下得到 4 因为 4 是唯一的值

2469
03:13:16,399 --> 03:13:22,080
that is shared with set 1 and set 2. any other value disappears because they
与集合 1 和集合 2 共享。任何其他价值都会消失，因为它们

2470
03:13:22,080 --> 03:13:26,640
are not shared by the two sets a really good way to think about it is
不被两个集合共享一个非常好的思考方式是

2471
03:13:26,640 --> 03:13:32,160
to use venn diagrams this one is set one this one is set to and let me draw two
使用维恩图，将其设置为一这个设置为让我画两个

2472
03:13:32,160 --> 03:13:37,200
circles and set two would be the other circle
界第二组是另一个圆圈

2473
03:13:37,200 --> 03:13:42,399
what intersection is doing this one here is it only finds the shared values
这里有哪个路口在做这个它只找到共同的价值观吗

2474
03:13:42,399 --> 03:13:45,120
between the two union
两者之间联盟

2475
03:13:45,120 --> 03:13:47,279
got all
得到全部

2476
03:13:47,279 --> 03:13:51,359
of the values and the third operation we could go we
的价值观我们可以进行第三次手术

2477
03:13:51,359 --> 03:13:57,120
can have set one and the one here is difference again i want
可以设置一个并且我想要的又是不同的

2478
03:13:57,120 --> 03:14:02,479
to check with set two and this looks like a typo difference this fits better
检查第二组，这看起来就像拼写错误一样，这个更适合

2479
03:14:02,479 --> 03:14:08,399
let's run this now and there we go now we only get the values one two and
现在就运行这个吧现在我们只能得到值一二

2480
03:14:08,399 --> 03:14:11,200
three these three here
三这三个在这里

2481
03:14:11,200 --> 03:14:17,120
we are getting this area here now where we only get the values that are not
我们现在正在这里找到这个区域我们只得到不存在的值

2482
03:14:17,120 --> 03:14:22,080
present in set 2 which specifically here means that 4 is
出现在第 2 组中这里具体意味着 4 是

2483
03:14:22,080 --> 03:14:27,359
disappearing and those are the main comparison operators that being said
消失，这些是主要的所说的比较运算符

2484
03:14:27,359 --> 03:14:31,600
there are a few more there's a different way to use these
还有一些有一种不同的方式来使用这些

2485
03:14:31,600 --> 03:14:34,800
methods and those are going to look slightly
方法这些看起来会有点

2486
03:14:34,800 --> 03:14:38,560
weird for the union instead of writing union
对于工会来说很奇怪而不是写作联盟

2487
03:14:38,560 --> 03:14:42,479
we could do set one then i think this is called a pipe
我们可以做一套那么我认为这叫做管道

2488
03:14:42,479 --> 03:14:45,600
operator and then set two
操作员然后设置两个

2489
03:14:45,600 --> 03:14:51,040
let me comment out the other two lines so we're not getting confused if i run
让我注释掉另外两行所以如果我跑步我们不会感到困惑

2490
03:14:51,040 --> 03:14:57,760
this now we get the exact same outcome along the same lines in this section
现在我们得到了完全相同的结果在本节中沿着同样的思路

2491
03:14:57,760 --> 03:15:04,319
we could replace with the and character so set one and set
我们可以用 和 字符替换所以设置一个并设置

2492
03:15:04,319 --> 03:15:08,160
two if i run these two i am getting four we
二如果我运行这两个，我会得到四个

2493
03:15:08,160 --> 03:15:12,000
are only getting the values shared by both sets
只获得共享的值两套

2494
03:15:12,000 --> 03:15:15,040
and finally difference
最后不同之处

2495
03:15:15,040 --> 03:15:21,760
we could access with set one minus set two and if i run this
我们可以使用设置一访问减去设置二，如果我运行这个

2496
03:15:21,760 --> 03:15:26,640
we are again getting the same values this one may look weird but it actually
我们再次得到相同的值这个可能看起来很奇怪但实际上

2497
03:15:26,640 --> 03:15:32,640
makes a lot of sense we are basically taking set one and we are subtracting
这很有意义，我们基本上是取第一组，我们减去

2498
03:15:32,640 --> 03:15:37,040
all of the values from set 2. if they exist they are going to remove
第 2 组中的所有值。如果它们存在，他们将删除

2499
03:15:37,040 --> 03:15:41,200
the value for in this case if they don't we're just going to ignore them
在这种情况下的价值，如果他们不这样做我们只会忽略他们

2500
03:15:41,200 --> 03:15:45,840
now that being said these operators or sets in general
话虽这么说这些运算符或集合通常

2501
03:15:45,840 --> 03:15:50,800
you are not going to see all that often they are very rarely used
你不会经常看到这些它们很少被使用

2502
03:15:50,800 --> 03:15:54,640
list tuples and dictionaries are the really common one and sets you only
列表元组和字典是非常普通的一个并且只设置你

2503
03:15:54,640 --> 03:15:58,640
really use when you do some more data oriented stuff
当你做更多数据时真正有用定向的东西

2504
03:15:58,640 --> 03:16:03,760
all right now with that we are nearly done i just want you guys to do an
好吧，现在我们已经差不多了完成了，我只是想让你们做一个

2505
03:16:03,760 --> 03:16:08,399
exercise and for the exercise i have a long list
锻炼对于这个练习，我有一个很长的清单

2506
03:16:08,399 --> 03:16:12,399
i'm not even sure how many numbers are in here but there are a lot
我什至不确定有多少个数字在这里但是有很多

2507
03:16:12,399 --> 03:16:17,520
and what i want you guys to do is to use a set to figure out if this list has
我希望你们做的是使用一个集合来判断这个列表是否有

2508
03:16:17,520 --> 03:16:21,760
duplicate values try to figure this one out yourself it's a really common
重复值尝试找出这个

2509
03:16:21,760 --> 03:16:25,680
operation that is incredibly useful


2510
03:16:26,560 --> 03:16:31,359
i have added a comment to explain what the exercise is going to be but it


2511
03:16:31,359 --> 03:16:37,680
actually isn't all that difficult the function you want to use here is len


2512
03:16:37,680 --> 03:16:44,239
and right now if i pass the list in here i know we have 34 items in there in


2513
03:16:44,239 --> 03:16:48,000
total let me comment out the earlier stuff so


2514
03:16:48,000 --> 03:16:53,200
we're not getting confused we have 34 items inside of this list how we can use


2515
03:16:53,200 --> 03:16:56,720
this is we know


2516
03:16:56,720 --> 03:17:02,319
if we are creating a set so i want to create a set from this test


2517
03:17:02,319 --> 03:17:05,680
list since a set cannot have any duplicate


2518
03:17:05,680 --> 03:17:09,359
values if the length of this set is shorter


2519
03:17:09,359 --> 03:17:13,600
than the length of this original list then we know there are going to be


2520
03:17:13,600 --> 03:17:17,520
duplicates inside of this list which means


2521
03:17:17,520 --> 03:17:20,800
if i run the lan method on this


2522
03:17:20,800 --> 03:17:24,479
run both we are getting 26


2523
03:17:24,479 --> 03:17:29,439
which means we have quite a few duplicate values in the original list


2524
03:17:29,439 --> 03:17:34,080
if you want to do this a bit more fancy you could also do i guess let me put


2525
03:17:34,080 --> 03:17:40,960
this on a separate line you could print len of the test list then the comparison


2526
03:17:40,960 --> 03:17:44,880
operator i don't think we have seen this one yet but this checks if two values


2527
03:17:44,880 --> 03:17:47,840
are equal to each other and then


2528
03:17:47,840 --> 03:17:54,000
we have len of the set of the test list and if i run this now we are getting


2529
03:17:54,000 --> 03:17:58,399
false and if this is false we know there are duplicate values


2530
03:17:58,399 --> 03:18:03,439
with that we have all the important stuff for a set


2531
03:18:03,439 --> 03:18:08,720
although keep in mind sets are fairly rare in python you would only really use


2532
03:18:08,720 --> 03:18:12,160
them when you run something that requires a lot of data work like running


2533
03:18:12,160 --> 03:18:16,399
a database or doing data analysis for anything else like making a gui or


2534
03:18:16,399 --> 03:18:20,640
making games they really aren't used that often


2535
03:18:20,640 --> 03:18:24,479
so don't worry too much about them for now when you actually need them you can


2536
03:18:24,479 --> 03:18:29,680
learn about them in more detail the next incredibly important data type


2537
03:18:29,680 --> 03:18:35,840
is a boolean all a boolean is is either true or false


2538
03:18:35,840 --> 03:18:40,319
and usually we are creating booleans with comparison operators


2539
03:18:40,319 --> 03:18:43,439
for example if we are running something like 5


2540
03:18:43,439 --> 03:18:47,200
smaller than 10 we are getting the boolean value true


2541
03:18:47,200 --> 03:18:51,600
and this is incredibly useful to control the flow of our code something we are


2542
03:18:51,600 --> 03:18:55,840
going to talk about a lot in the next section for example if a condition is


2543
03:18:55,840 --> 03:19:01,760
true then you want to do something and booleans can be created in a lot of


2544
03:19:01,760 --> 03:19:05,040
different ways the one way we have seen already is


2545
03:19:05,040 --> 03:19:10,160
we're using either integers or floats and then we use comparison operators


2546
03:19:10,160 --> 03:19:13,680
we can also use some string methods like is num


2547
03:19:13,680 --> 03:19:18,560
to check if there's a number inside of a string i think we have seen is alpha


2548
03:19:18,560 --> 03:19:22,479
to check if there are only letters inside of a string


2549
03:19:22,479 --> 03:19:26,000
another way is we can check if there are values inside of a list instead of


2550
03:19:26,000 --> 03:19:29,520
tuples or a set or a dictionary this would also work


2551
03:19:29,520 --> 03:19:34,080
we could also compare different sets to create booleans and finally we can also


2552
03:19:34,080 --> 03:19:38,399
create booleans by themselves although that's something you really aren't going


2553
03:19:38,399 --> 03:19:41,840
to do too often i guess let's go through this entire


2554
03:19:41,840 --> 03:19:46,319
list and we're going to start with comparison operators and there are quite


2555
03:19:46,319 --> 03:19:50,960
a few the one we have just used in the last part is the equal sign so we are


2556
03:19:50,960 --> 03:19:55,920
checking if two values are equal with two equal signs and we are using two


2557
03:19:55,920 --> 03:20:00,080
because a single equal sign is reserved to assign a data type to a variable


2558
03:20:00,080 --> 03:20:03,760
meaning we couldn't use it and to check if two numbers are not


2559
03:20:03,760 --> 03:20:08,080
equal we have the exclamation mark equal and that checks if two numbers are


2560
03:20:08,080 --> 03:20:11,920
different and finally we have smaller or smaller


2561
03:20:11,920 --> 03:20:15,920
equal to check if something is smaller than or smaller or equal than and


2562
03:20:15,920 --> 03:20:18,960
greater and greater equal would work in the same way


2563
03:20:18,960 --> 03:20:25,279
those are the main comparison operators in my code let me start by printing and


2564
03:20:25,279 --> 03:20:32,960
i want to print if 1 is equal to 1. if i run this we are getting true


2565
03:20:32,960 --> 03:20:37,760
if i use a different number let's say 10 run out of this again i am getting false


2566
03:20:37,760 --> 03:20:40,840
because 1 is different from 10 this should be quite


2567
03:20:40,840 --> 03:20:45,120
obvious the next operator would be


2568
03:20:45,120 --> 03:20:49,200
exclamation mark equal and let me add comments


2569
03:20:49,200 --> 03:20:53,520
is not equal whereas the double equal sign


2570
03:20:53,520 --> 03:20:59,040
looks for is equal if i run those two we get false and true


2571
03:20:59,040 --> 03:21:02,960
false here because those two are not equal and we get true from this


2572
03:21:02,960 --> 03:21:06,239
operation because they are indeed different


2573
03:21:06,239 --> 03:21:10,640
i suppose a better way of writing the comment here would be true


2574
03:21:10,640 --> 03:21:14,479
if is equal or is not equal


2575
03:21:14,479 --> 03:21:22,160
or besides not equal is different we can also print if 1 is smaller than


2576
03:21:22,160 --> 03:21:25,279
10 and this one gives us the obvious result


2577
03:21:25,279 --> 03:21:30,239
because 1 is indeed smaller than 10 and we could also use smaller or equal


2578
03:21:30,239 --> 03:21:33,279
than and this one in this case would also be true


2579
03:21:33,279 --> 03:21:36,399
i guess where this one matters if we have a 10


2580
03:21:36,399 --> 03:21:41,200
smaller equal here is going to be true but 10 is not going to be smaller than


2581
03:21:41,200 --> 03:21:44,319
10 meaning this operation would return false


2582
03:21:44,319 --> 03:21:48,880
this also works with greater than again this would be false because 10 is


2583
03:21:48,880 --> 03:21:53,840
not greater than 10. and those are all the major comparison operators for


2584
03:21:53,840 --> 03:21:57,920
integers for the next part we could look at lists


2585
03:21:57,920 --> 03:22:03,600
and booleans and in here we can check if a value is in a list or if a value is


2586
03:22:03,600 --> 03:22:06,720
not in the list and this by the way also works with


2587
03:22:06,720 --> 03:22:10,319
strings an important point here is that not


2588
03:22:10,319 --> 03:22:14,399
reverses a boolean if we have not false it is going to be


2589
03:22:14,399 --> 03:22:17,920
true if we have not true it is going to be false


2590
03:22:17,920 --> 03:22:22,960
python here works very similar compared to what you would use in a sentence


2591
03:22:22,960 --> 03:22:26,160
and i am trying to be better with comments


2592
03:22:26,160 --> 03:22:32,640
let's do this booleans and numbers i think it's a good name here


2593
03:22:32,640 --> 03:22:38,000
next up we have booleans and lists and strings


2594
03:22:38,000 --> 03:22:44,640
what you could do for example here is you could check if one is in the list


2595
03:22:44,640 --> 03:22:49,279
one two and three if i run this we're getting true because


2596
03:22:49,279 --> 03:22:52,880
one is indeed in the list of one two and three


2597
03:22:52,880 --> 03:22:56,960
let me comment out this part here so we're not getting confused and run this


2598
03:22:56,960 --> 03:23:00,800
again now we are only getting true and this is also going to work with


2599
03:23:00,800 --> 03:23:06,399
different data types if i for example had a tuple


2600
03:23:06,399 --> 03:23:10,720
and run this again we would have the very same outcome if i duplicate all of


2601
03:23:10,720 --> 03:23:17,520
this i can also check if e is in the word hello


2602
03:23:17,520 --> 03:23:22,000
and run this again and we will be getting true again because e is indeed


2603
03:23:22,000 --> 03:23:25,840
in the word hello finally what you can also do is to use


2604
03:23:25,840 --> 03:23:30,080
the not operator for example you could be checking if 4


2605
03:23:30,080 --> 03:23:34,800
is not in the list of 1 2 and 3.


2606
03:23:34,800 --> 03:23:40,640
if i run this one now we're getting true again because 4 is indeed not in this


2607
03:23:40,640 --> 03:23:44,399
list generally not reverses all of these


2608
03:23:44,399 --> 03:23:48,960
operations i could for example uncomment


2609
03:23:48,960 --> 03:23:52,960
this print 10 is greater than 10 and this one


2610
03:23:52,960 --> 03:23:56,000
let me keep it the only one without a comment


2611
03:23:56,000 --> 03:24:00,800
if i just had this one line by default this one is going to be false


2612
03:24:00,800 --> 03:24:06,479
but if i put a not in front of it and run this again we are now getting


2613
03:24:06,479 --> 03:24:11,040
true not reverses any kind of boolean so if


2614
03:24:11,040 --> 03:24:16,160
you have not true you are going to get false you can actually do this by itself


2615
03:24:16,160 --> 03:24:22,479
let me add another comment and let's call it booleans by themselves


2616
03:24:22,479 --> 03:24:26,479
and comment out everything else what you could do


2617
03:24:26,479 --> 03:24:30,640
you could just create a boolean by just writing true


2618
03:24:30,640 --> 03:24:35,600
or false if you wanted to and this one would get you true which is its own data


2619
03:24:35,600 --> 03:24:41,200
type and if you write not true you would get false this i think is


2620
03:24:41,200 --> 03:24:46,080
going to make sense and i guess while we are here


2621
03:24:46,080 --> 03:24:49,520
we can do another data conversion exercise


2622
03:24:49,520 --> 03:24:55,040
so data conversion exercise


2623
03:24:55,040 --> 03:25:00,000
and what i want you guys to do here are the notes i have an e


2624
03:25:00,000 --> 03:25:03,120
and this one contains three key value pairs


2625
03:25:03,120 --> 03:25:08,479
it's always the integer of a number and then the word of the number as well


2626
03:25:08,479 --> 03:25:13,279
although honestly it really doesn't matter what the specific value here is


2627
03:25:13,279 --> 03:25:17,920
and i want you guys to do two things number one check if one of these keys


2628
03:25:17,920 --> 03:25:23,040
exists specifically if this key one exists just assume you don't know what's


2629
03:25:23,040 --> 03:25:26,800
inside of the dictionary and you want to check if this key exists in the first


2630
03:25:26,800 --> 03:25:30,239
place and number two i want you guys to check


2631
03:25:30,239 --> 03:25:36,319
if the value not the key the value for exists inside of the dictionary and


2632
03:25:36,319 --> 03:25:40,239
again assume you don't know the actual content of the dictionary


2633
03:25:40,239 --> 03:25:44,399
so try to figure out these two problems


2634
03:25:45,760 --> 03:25:50,399
the first problem i guess let me put it right below is the easier one


2635
03:25:50,399 --> 03:25:55,520
we want to check for a specific key and in here we can use the same thing we


2636
03:25:55,520 --> 03:26:00,960
have used up here it works in the same way i can just check if one exists


2637
03:26:00,960 --> 03:26:05,680
inside of the e-dictionary and let me comment out


2638
03:26:05,680 --> 03:26:10,160
this print statement down here so we're not getting confused if i run this now


2639
03:26:10,160 --> 03:26:14,160
we're getting true because we can see it right here


2640
03:26:14,160 --> 03:26:19,040
this one does exist inside of the dictionary as a key


2641
03:26:19,040 --> 03:26:24,479
if you want to be more specific about it you could also use the method dot keys


2642
03:26:24,479 --> 03:26:29,600
and you would get the same result this edict.keys would now return


2643
03:26:29,600 --> 03:26:34,399
something that looks like a list with only the keys inside of it


2644
03:26:34,399 --> 03:26:38,319
although this is what you get by default anyway so you don't really have to use


2645
03:26:38,319 --> 03:26:40,720
it the second part


2646
03:26:40,720 --> 03:26:48,239
is we want to check if the value 4 is in the e dictionary


2647
03:26:48,239 --> 03:26:53,359
although this right now is not going to work because this edict is checking for


2648
03:26:53,359 --> 03:26:58,479
keys not for values which wouldn't help us all that much


2649
03:26:58,479 --> 03:27:03,200
to access the values we would need the values method the one we learned about


2650
03:27:03,200 --> 03:27:08,239
earlier and now we're getting something that is basically a list and it only


2651
03:27:08,239 --> 03:27:11,439
contains all of the values of the dictionary


2652
03:27:11,439 --> 03:27:16,640
if i run this now we're getting false because we know this 4 does not exist as


2653
03:27:16,640 --> 03:27:21,840
a value inside of this e dictionary although if we had a 3


2654
03:27:21,840 --> 03:27:26,720
this one would be true so we know it is working all right with


2655
03:27:26,720 --> 03:27:29,840
that there's one more really important topic


2656
03:27:29,840 --> 03:27:35,279
i want to cover and that is the bool function let's talk about this one bool


2657
03:27:35,279 --> 03:27:40,319
is a function that creates a boolean data type and this one can accept


2658
03:27:40,319 --> 03:27:45,520
basically any kind of other data type it's really flexible here we could pass


2659
03:27:45,520 --> 03:27:50,640
a number a string any type of container and we would still get a value


2660
03:27:50,640 --> 03:27:54,720
as a matter of fact bool accepts so many different values


2661
03:27:54,720 --> 03:27:59,200
that are actually different rules that determine how the values are going to be


2662
03:27:59,200 --> 03:28:02,640
converted and just think about the problem here


2663
03:28:02,640 --> 03:28:07,200
you have some really complex data set let's say a really long word and you


2664
03:28:07,200 --> 03:28:11,439
pass this into the boolean function to ever get true or false


2665
03:28:11,439 --> 03:28:15,600
how is python going to determine what values count is true and what values


2666
03:28:15,600 --> 03:28:20,640
count as false and the logic here is actually so common that python has


2667
03:28:20,640 --> 03:28:25,439
dedicated words for it we have the words truthy and fault c


2668
03:28:25,439 --> 03:28:29,920
truffy means all the values that will be converted to true and false c is all the


2669
03:28:29,920 --> 03:28:34,560
values that will be converted to false the way you have to think about it is


2670
03:28:34,560 --> 03:28:38,399
that some values will always be converted to false and those are fairly


2671
03:28:38,399 --> 03:28:42,239
specific and anything else will always be true


2672
03:28:42,239 --> 03:28:48,239
and faulty values are 0 or 0.0 so integers or floats that have


2673
03:28:48,239 --> 03:28:54,319
the value 0 any positive or negative number will become true


2674
03:28:54,319 --> 03:29:00,080
any kind of empty string so a string without any content not even a space


2675
03:29:00,080 --> 03:29:05,200
any kind of empty list tuple set or dictionary is also going to become false


2676
03:29:05,200 --> 03:29:09,600
and finally none so the absence of a value


2677
03:29:09,600 --> 03:29:15,200
and literally any other value is going to become true


2678
03:29:15,200 --> 03:29:18,960
meaning you don't actually have to learn that much


2679
03:29:18,960 --> 03:29:22,399
now this is something we definitely want to play around with so let's have a look


2680
03:29:22,399 --> 03:29:26,800
at all of this in code let me comment out all of the stuff we have written


2681
03:29:26,800 --> 03:29:30,080
earlier so things are not getting confusing


2682
03:29:30,080 --> 03:29:32,800
right the bull function


2683
03:29:32,800 --> 03:29:38,399
is another function that creates a boolean data type and i do want to print


2684
03:29:38,399 --> 03:29:42,880
the result we could for example add in a number any


2685
03:29:42,880 --> 03:29:47,520
kind of number and we will get true


2686
03:29:47,520 --> 03:29:51,279
what python basically does is it looks at a number and then determines if the


2687
03:29:51,279 --> 03:29:56,239
value is truthy or falsey if it is truthy we get true if it is falsy we're


2688
03:29:56,239 --> 03:29:59,520
getting false and what i talked about just now is that


2689
03:29:59,520 --> 03:30:04,960
any number besides zero will be true this one here indeed has become true


2690
03:30:04,960 --> 03:30:08,800
this would also work with negative numbers let's say negative one


2691
03:30:08,800 --> 03:30:14,319
is also true the only time a number becomes false is


2692
03:30:14,319 --> 03:30:21,120
when you have zero this one is false or 0.0 this one is also false as soon as


2693
03:30:21,120 --> 03:30:25,600
you have any other value besides zero let's say zero point a lot of zeros and


2694
03:30:25,600 --> 03:30:28,720
one you are getting true again


2695
03:30:28,720 --> 03:30:33,920
but if you have any floating point with just zeros it is going to be false


2696
03:30:33,920 --> 03:30:38,239
and this was the first rule besides that for strings


2697
03:30:38,239 --> 03:30:41,600
if you have any kind of word even if it's just a space


2698
03:30:41,600 --> 03:30:44,399
it is going to be true however


2699
03:30:44,399 --> 03:30:48,399
if you have an empty string this one is going to be false


2700
03:30:48,399 --> 03:30:51,359
finally if you have an empty list


2701
03:30:51,359 --> 03:30:56,239
this one is also going to be false but if you have any kind of value inside it


2702
03:30:56,239 --> 03:31:01,120
is going to be true the way you want to think about it is that if any kind of


2703
03:31:01,120 --> 03:31:06,080
data type has an actual value then it is going to be converted to true if it


2704
03:31:06,080 --> 03:31:09,439
doesn't have any content it is going to be false


2705
03:31:09,439 --> 03:31:14,160
there's one more data type we haven't really covered yet in detail and that is


2706
03:31:14,160 --> 03:31:18,479
the absence of a value so none and this by itself is also data type in


2707
03:31:18,479 --> 03:31:21,359
python and this one obviously is also going to


2708
03:31:21,359 --> 03:31:24,080
become false i think this one makes sense


2709
03:31:24,080 --> 03:31:27,920
we are actually going to talk about this in just a second in a bit more detail


2710
03:31:27,920 --> 03:31:30,880
but it's not something you have to worry about too much


2711
03:31:30,880 --> 03:31:35,600
but well with that we have boolean data types that's kind of all you need to


2712
03:31:35,600 --> 03:31:39,760
know and in the next section we are going to use this a lot more


2713
03:31:39,760 --> 03:31:44,560
before we are finishing off this entire section i want to cover some other data


2714
03:31:44,560 --> 03:31:50,080
types because python does have a lot what we have seen so far is that python


2715
03:31:50,080 --> 03:31:54,560
is really flexible with data types sometimes data is even converted


2716
03:31:54,560 --> 03:31:58,640
automatically like with integers and floating point numbers


2717
03:31:58,640 --> 03:32:03,279
but other than that we also have functions to change data types


2718
03:32:03,279 --> 03:32:08,319
and this is the entire list for the major data types you would most of the


2719
03:32:08,319 --> 03:32:13,200
time actually need and these are very forgiving python here


2720
03:32:13,200 --> 03:32:17,920
again is super flexible now besides those we do have a couple of


2721
03:32:17,920 --> 03:32:23,279
data types you see once in a while but not very often or in other words data


2722
03:32:23,279 --> 03:32:28,960
types you don't specifically use the most common one here is none or the


2723
03:32:28,960 --> 03:32:33,200
absence of a value this could for example happen if a


2724
03:32:33,200 --> 03:32:37,680
certain kind of value got deleted or if you didn't get value from some kind of


2725
03:32:37,680 --> 03:32:41,359
input field but besides that we also have a sequence


2726
03:32:41,359 --> 03:32:45,760
like a range of numbers bytes complex numbers memory view frozen


2727
03:32:45,760 --> 03:32:48,800
sets lots of really specific data types that


2728
03:32:48,800 --> 03:32:53,040
you sometimes see in very specific circumstances


2729
03:32:53,040 --> 03:32:56,640
you usually have to look them up and they are very rare so i am not going to


2730
03:32:56,640 --> 03:33:01,120
cover them i will however cover later on none and


2731
03:33:01,120 --> 03:33:05,840
sequence those you do see reasonably often


2732
03:33:05,840 --> 03:33:11,359
but values like bytes complex numbers memory view frozen sets


2733
03:33:11,359 --> 03:33:15,279
you would only ever use in highly specific circumstances and i'm not going


2734
03:33:15,279 --> 03:33:18,640
to cover them because we don't really need them


2735
03:33:18,640 --> 03:33:23,520
almost the entire time you are going to be perfectly happy with


2736
03:33:23,520 --> 03:33:27,680
these data types here and they are what i am


2737
03:33:27,680 --> 03:33:31,120
going to focus on so right with that we can come to the


2738
03:33:31,120 --> 03:33:36,000
next major section and welcome back in this section we are


2739
03:33:36,000 --> 03:33:40,160
going to work with the flow of our code now what does that mean


2740
03:33:40,160 --> 03:33:46,880
basically so far we always executed code from the start to the finish meaning if


2741
03:33:46,880 --> 03:33:51,680
these are different lines of code we are starting all the way at the top


2742
03:33:51,680 --> 03:33:57,279
and we are going down line by line which works fine by itself but it is


2743
03:33:57,279 --> 03:34:00,479
fairly limiting because sometimes we want to do


2744
03:34:00,479 --> 03:34:04,080
something else for example we might only want to run


2745
03:34:04,080 --> 03:34:09,040
code if a certain condition is true or we might want to run code multiple times


2746
03:34:09,040 --> 03:34:13,520
or we might want to run code for every item inside of a list or a tuple or


2747
03:34:13,520 --> 03:34:16,720
something like that and all of these things can be done


2748
03:34:16,720 --> 03:34:20,560
quite easily python has a lot of ways to control the


2749
03:34:20,560 --> 03:34:24,479
flow of your code although to understand how it is going


2750
03:34:24,479 --> 03:34:29,120
to work we need to understand one really important concept


2751
03:34:29,120 --> 03:34:34,640
and that is how python groups chunks of code together


2752
03:34:34,640 --> 03:34:39,600
you're going to see in a second why that is important but the way python groups


2753
03:34:39,600 --> 03:34:46,479
code together is by using indentation let's say we only want to run some code


2754
03:34:46,479 --> 03:34:50,560
if the condition is true and this white line here is the left


2755
03:34:50,560 --> 03:34:56,560
side of our code editor just to better illustrate how we are using indentation


2756
03:34:56,560 --> 03:35:02,000
the basic problem we have now is if we have code below this condition


2757
03:35:02,000 --> 03:35:06,880
how do we tell python that it belongs to the condition and isn't something that's


2758
03:35:06,880 --> 03:35:12,000
independent of the condition for that we need indentation anything


2759
03:35:12,000 --> 03:35:17,600
that is indented by one indentation after this line belongs to this if


2760
03:35:17,600 --> 03:35:24,479
condition meaning these three lines here all belong to this if condition i think


2761
03:35:24,479 --> 03:35:28,399
i actually added a bit more text here yeah there we go indentation determines


2762
03:35:28,399 --> 03:35:32,640
where the code belongs to if we added some other code in here like


2763
03:35:32,640 --> 03:35:37,600
line three and line four those would be independent of each other


2764
03:35:37,600 --> 03:35:41,439
they would run no matter what happens whereas


2765
03:35:41,439 --> 03:35:47,680
line 1 line 2 and line 3 would only run if this condition is true if it was


2766
03:35:47,680 --> 03:35:51,920
false then none of this would be run but line


2767
03:35:51,920 --> 03:35:56,880
4 and line 5 would still run meaning lines that are not indented do


2768
03:35:56,880 --> 03:36:01,279
not belong to that if statement i hope this makes sense once you


2769
03:36:01,279 --> 03:36:04,000
understand the system it makes a lot of sense


2770
03:36:04,000 --> 03:36:09,200
and indentations indentations in general and python are incredibly important you


2771
03:36:09,200 --> 03:36:14,399
are going to see them all the time but first of all


2772
03:36:14,399 --> 03:36:18,880
once we understand indentation there are four major ways to determine the flow of


2773
03:36:18,880 --> 03:36:24,640
the code the first one is if l if and else these are different kind of if


2774
03:36:24,640 --> 03:36:29,200
conditions to run code if certain conditions are true


2775
03:36:29,200 --> 03:36:34,080
we are going to talk about this one in the next part besides that we have match


2776
03:36:34,080 --> 03:36:38,800
this one is kind of like if but it's more designed for specific value to find


2777
03:36:38,800 --> 03:36:44,160
one very specific condition then we have while and this one just


2778
03:36:44,160 --> 03:36:47,439
repeats code as long as the certain condition is true


2779
03:36:47,439 --> 03:36:50,960
and finally we have four and this one is about


2780
03:36:50,960 --> 03:36:56,399
running some code for every item inside of a container let's say you have a list


2781
03:36:56,399 --> 03:37:00,399
with one two and three


2782
03:37:00,399 --> 03:37:05,200
and you want to run some code for every item inside of the list a for loop for


2783
03:37:05,200 --> 03:37:09,200
that would be perfect and those are the four major concepts


2784
03:37:09,200 --> 03:37:13,760
that we are going to learn there are also a few more extra tools you can use


2785
03:37:13,760 --> 03:37:18,000
like breaking a certain kind of statement or skipping to a next part in


2786
03:37:18,000 --> 03:37:20,960
a while loop i will talk about those at the


2787
03:37:20,960 --> 03:37:25,200
appropriate point so i guess with that let's start with


2788
03:37:25,200 --> 03:37:29,520
the first major part possibly the most important concept to


2789
03:37:29,520 --> 03:37:34,479
determine the flow of your code is the if statement all this one does is it


2790
03:37:34,479 --> 03:37:38,960
tells python to only run some code if a certain condition is true


2791
03:37:38,960 --> 03:37:43,279
note here we are always looking for a boolean value


2792
03:37:43,279 --> 03:37:46,399
they are crucial to make all of this work


2793
03:37:46,399 --> 03:37:50,960
and an if statement can also be extended with l if and else


2794
03:37:50,960 --> 03:37:54,479
and you can also add different conditions together we're gonna cover


2795
03:37:54,479 --> 03:37:58,399
all of this in quite a bit more detail over the next two videos


2796
03:37:58,399 --> 03:38:03,359
let's have a look at all of this in code let's do a super quick recap of boolean


2797
03:38:03,359 --> 03:38:08,479
values all i really do is if i have something like 10 is greater than 5 i


2798
03:38:08,479 --> 03:38:13,520
print it i'm getting true because this condition is indeed true


2799
03:38:13,520 --> 03:38:18,000
and if i do the other way around that 10 is smaller than 5 this would get me


2800
03:38:18,000 --> 03:38:21,279
false because this condition is not correct


2801
03:38:21,279 --> 03:38:25,920
and these boolean values we can now use to control the flow of our code for


2802
03:38:25,920 --> 03:38:33,199
example we could run some code if a value in a variable


2803
03:38:33,199 --> 03:38:39,279
is greater than let's say 10. for that let me first of all create a variable


2804
03:38:39,279 --> 03:38:42,880
let me call it x and let's start with five


2805
03:38:42,880 --> 03:38:48,319
and now i want to run some code only if this value is greater than 10.


2806
03:38:48,319 --> 03:38:53,760
and for that i would need the word if and then the condition i want to check


2807
03:38:53,760 --> 03:38:58,560
which in my case is x is greater than 10.


2808
03:38:58,560 --> 03:39:02,479
after that i need a colon and now if i press enter


2809
03:39:02,479 --> 03:39:08,319
sublime is very intelligent here and already creates one level of indentation


2810
03:39:08,319 --> 03:39:15,120
so we are here if i write some code and this is really important


2811
03:39:15,120 --> 03:39:19,120
let me write some code here actually let's say print


2812
03:39:19,120 --> 03:39:24,319
the if statement was true


2813
03:39:24,399 --> 03:39:29,680
because of this indentation we know that this print statement belongs


2814
03:39:29,680 --> 03:39:36,080
to this if statement here if i execute all of this we can see nothing the


2815
03:39:36,080 --> 03:39:41,279
reason why we can't see anything is that this condition here was not true


2816
03:39:41,279 --> 03:39:46,560
5 is not greater than 10 but if i change this 5 to a 15


2817
03:39:46,560 --> 03:39:49,520
run all of this again now we can see


2818
03:39:49,520 --> 03:39:53,520
this print statement here the main thing that you have to


2819
03:39:53,520 --> 03:39:59,680
understand here is this condition if it becomes true


2820
03:40:00,399 --> 03:40:05,600
then we are running all the indented parts below the if statement and if it


2821
03:40:05,600 --> 03:40:10,080
is false we're not running any of the indented parts


2822
03:40:10,080 --> 03:40:15,199
this would also work over multiple lines of code i could for example print


2823
03:40:15,199 --> 03:40:18,960
another line if i run this again we get another line


2824
03:40:18,960 --> 03:40:23,760
as well i could also create another variable in here let me call it y is


2825
03:40:23,760 --> 03:40:27,040
equal to 10 and i could print


2826
03:40:27,040 --> 03:40:32,399
y all of this works just fine we can write any kind of code in here as long


2827
03:40:32,399 --> 03:40:36,479
as it's indented it always belongs to this if statement


2828
03:40:36,479 --> 03:40:39,359
however if i write now


2829
03:40:39,359 --> 03:40:43,920
some other line of code after the if statement that is not indented


2830
03:40:43,920 --> 03:40:48,319
let me call it some other code this one


2831
03:40:48,319 --> 03:40:52,560
is always going to run regardless of what the if statement does because it's


2832
03:40:52,560 --> 03:40:56,479
not indented if i run the entire code right now we


2833
03:40:56,479 --> 03:41:01,760
can see some other code the line we get here and if i


2834
03:41:01,760 --> 03:41:07,760
return x back to 5 run this again we now can still see some other code


2835
03:41:07,760 --> 03:41:12,840
because this line is not affected by the if statement because again of the


2836
03:41:12,840 --> 03:41:17,760
indentation indentation is really important to python you absolutely have


2837
03:41:17,760 --> 03:41:22,560
to understand it although that being said this is the


2838
03:41:22,560 --> 03:41:26,800
core part of an if statement it really isn't that complex


2839
03:41:26,800 --> 03:41:32,479
although you can extend the logic here in two different ways a very easy one


2840
03:41:32,479 --> 03:41:37,520
would be an else statement this one again is going to need a colon


2841
03:41:37,520 --> 03:41:43,359
and now if i press enter again we have another indentation and in here i can


2842
03:41:43,359 --> 03:41:46,800
write the code


2843
03:41:46,800 --> 03:41:49,600
that was run if


2844
03:41:49,600 --> 03:41:54,080
the statement was false


2845
03:41:54,080 --> 03:41:57,199
how does this work basically


2846
03:41:57,199 --> 03:42:03,600
this else statement always has to be connected to an if statement


2847
03:42:03,600 --> 03:42:08,640
and what it does is if this condition here is false then we are not running


2848
03:42:08,640 --> 03:42:14,239
any of this but we are running anything inside of the else statement


2849
03:42:14,239 --> 03:42:20,160
since x is 5 this condition is going to be false meaning none of this will run


2850
03:42:20,160 --> 03:42:25,680
but this one here should be run and this line is going to run no matter


2851
03:42:25,680 --> 03:42:30,239
what happens so if i run the code i should be seeing the output of this line


2852
03:42:30,239 --> 03:42:33,040
and of this line let's try it


2853
03:42:33,040 --> 03:42:37,520
and there indeed we can see these two lines


2854
03:42:37,520 --> 03:42:40,319
and there's one more thing that you can do


2855
03:42:40,319 --> 03:42:45,120
and that is called an l if statement


2856
03:42:45,120 --> 03:42:50,720
and again this elf statement has to be connected to an if statement


2857
03:42:50,720 --> 03:42:55,199
basically what it means is shorthand for else if


2858
03:42:55,199 --> 03:42:59,279
it's kind of similar to the else statement except now we are adding a


2859
03:42:59,279 --> 03:43:04,160
condition which means if this condition here


2860
03:43:04,160 --> 03:43:07,439
is false then we want to run


2861
03:43:07,439 --> 03:43:13,199
this statement here but we only want to run this one if another condition is


2862
03:43:13,199 --> 03:43:17,040
true and this condition is just going to be


2863
03:43:17,040 --> 03:43:23,199
another boolean value let's say i want to check x again


2864
03:43:23,199 --> 03:43:29,520
and i want to check if x is different from 0.


2865
03:43:29,520 --> 03:43:33,520
if that is the case i once more need some indented code


2866
03:43:33,520 --> 03:43:39,199
and for this one let me print the l if statement was


2867
03:43:39,199 --> 03:43:43,920
correct and now we have a much more complex if


2868
03:43:43,920 --> 03:43:48,720
statement we first check if this condition here is true


2869
03:43:48,720 --> 03:43:54,239
which in our case right now is going to be false because 5 is smaller than 10


2870
03:43:54,239 --> 03:43:59,680
meaning this would be a false statement then we are coming to the al if


2871
03:43:59,680 --> 03:44:05,359
statement and now we are checking if let me use a different color if x is


2872
03:44:05,359 --> 03:44:10,560
different from zero and since five is different from zero this one is going to


2873
03:44:10,560 --> 03:44:14,880
be true as a consequence we are going to run or


2874
03:44:14,880 --> 03:44:20,239
expect this code here to be run let me add it properly here so we can see


2875
03:44:20,239 --> 03:44:24,960
what's inside of the line and once any of these lf statement has


2876
03:44:24,960 --> 03:44:30,000
run we are stopping this if statement meaning this else statement here would


2877
03:44:30,000 --> 03:44:34,399
not be run at all and once again this print statement here


2878
03:44:34,399 --> 03:44:39,120
is going to be happy either way because it does not care what happens in this


2879
03:44:39,120 --> 03:44:42,720
entire thing let's try all of this now and we can see


2880
03:44:42,720 --> 03:44:46,880
the al if statement was correct which is this line here and then we have some


2881
03:44:46,880 --> 03:44:52,720
other code this bit here i suppose we could be doing another example and now


2882
03:44:52,720 --> 03:44:57,680
let me add a zero in here and i would really recommend you to go over this one


2883
03:44:57,680 --> 03:45:01,279
yourself and see which line


2884
03:45:01,279 --> 03:45:06,560
you would expect to run here once again we are starting at the first


2885
03:45:06,560 --> 03:45:13,600
line and we know 0 greater than 10 is going to be false that can never be true


2886
03:45:13,600 --> 03:45:19,120
next up we are looking at x being different from 0 which in this case is


2887
03:45:19,120 --> 03:45:23,920
also going to be false which means at the end we are left with


2888
03:45:23,920 --> 03:45:28,640
this else statement which means the code we are expecting is


2889
03:45:28,640 --> 03:45:32,399
the code that was run in the if statement was false


2890
03:45:32,399 --> 03:45:36,880
and we're also expecting this one at the end although that's getting repetitive


2891
03:45:36,880 --> 03:45:40,720
let me run the code now and we get the code that was run if the


2892
03:45:40,720 --> 03:45:43,680
if statement was false and some other code


2893
03:45:43,680 --> 03:45:48,479
with that we have all the basics for an if statement if you understand if l if


2894
03:45:48,479 --> 03:45:52,319
and else you already understand what you need


2895
03:45:52,319 --> 03:45:54,800
i guess one more thing that i haven't covered yet


2896
03:45:54,800 --> 03:45:59,920
is if and else can only occur once inside of this if


2897
03:45:59,920 --> 03:46:05,120
statement but l if you can multiply as many times as you


2898
03:46:05,120 --> 03:46:08,640
want for example i could add x is greater


2899
03:46:08,640 --> 03:46:13,760
than negative 20 for example and then add something else i know print


2900
03:46:13,760 --> 03:46:17,199
something else


2901
03:46:17,359 --> 03:46:22,640
and you could add as many if statements as you want or as you need


2902
03:46:22,640 --> 03:46:29,040
but else and if can only occur once although what you could be doing is add


2903
03:46:29,040 --> 03:46:33,840
another if statement afterwards i guess we could add if


2904
03:46:33,840 --> 03:46:40,560
one in the list one two and three and then we want to print


2905
03:46:40,560 --> 03:46:46,080
another if statement when i said an if statement or an else


2906
03:46:46,080 --> 03:46:50,800
statement can only occur once i was always referring to this


2907
03:46:50,800 --> 03:46:54,319
block here where we are starting with an if and


2908
03:46:54,319 --> 03:46:58,720
inside of that we can only have one else we couldn't have a second else however


2909
03:46:58,720 --> 03:47:03,680
python is totally happy to have a completely separate if statement


2910
03:47:03,680 --> 03:47:10,319
but with that we can do an exercise and what i want you guys to do is this


2911
03:47:10,319 --> 03:47:14,239
one here we have one variable that determines how


2912
03:47:14,239 --> 03:47:17,600
much money we have and from this amount of money i want you


2913
03:47:17,600 --> 03:47:20,319
guys to figure out what we are going to eat


2914
03:47:20,319 --> 03:47:26,239
if we have greater or equal than 80 units of money i want you guys to print


2915
03:47:26,239 --> 03:47:30,080
eat something fancy if the money is greater than 45 eat


2916
03:47:30,080 --> 03:47:34,160
something nice if it is greater than 15 eat something okay


2917
03:47:34,160 --> 03:47:38,640
and else eat something cheap and obviously there should only ever be


2918
03:47:38,640 --> 03:47:41,840
one print statement running at any point in time


2919
03:47:41,840 --> 03:47:46,840
so pause the video now and try this one yourself


2920
03:47:47,520 --> 03:47:52,479
before we start i want to comment out all of this because it would otherwise


2921
03:47:52,479 --> 03:47:57,439
get kind of confusing first of all we need an if statement and now i want


2922
03:47:57,439 --> 03:48:02,080
to check the money available and i want to work on the first line


2923
03:48:02,080 --> 03:48:05,359
here and what we are being asked to do is


2924
03:48:05,359 --> 03:48:11,600
greater or equal than 80 which we get with greater or equal and


2925
03:48:11,600 --> 03:48:16,800
we want to check for 80. if you want a reminder on boolean values check out the


2926
03:48:16,800 --> 03:48:21,359
last section on boolean data types this is going to be really important for this


2927
03:48:21,359 --> 03:48:26,319
entire section but in here i now need a colon and now i


2928
03:48:26,319 --> 03:48:32,960
want to print eat something fancy i guess let's add an exclamation mark


2929
03:48:32,960 --> 03:48:36,000
because why not the really important part here this


2930
03:48:36,000 --> 03:48:40,800
print statement has to be indented but with that we have covered the first


2931
03:48:40,800 --> 03:48:45,520
line of the exercise next up we want to check if the money is


2932
03:48:45,520 --> 03:48:50,960
greater than 45 which means we want to first check if


2933
03:48:50,960 --> 03:48:55,920
the money is greater than 80 but if that is not the case and the money is still


2934
03:48:55,920 --> 03:49:01,120
greater than 45 we want to do something else which means we need an l if


2935
03:49:01,120 --> 03:49:04,960
statement else because we want something else in the if


2936
03:49:04,960 --> 03:49:08,399
statement and if because we have another condition


2937
03:49:08,399 --> 03:49:13,600
what i want to check in here if the money available is greater than 45 after


2938
03:49:13,600 --> 03:49:18,239
that again i need a colon i need an indented line and now i want


2939
03:49:18,239 --> 03:49:22,000
to print eat something nice


2940
03:49:22,000 --> 03:49:25,199
and with that we have covered this line here


2941
03:49:25,199 --> 03:49:31,439
next up we have a very similar line meaning now we again need l if


2942
03:49:31,439 --> 03:49:37,199
and what i want to check now if the money available is greater than 15.


2943
03:49:37,199 --> 03:49:41,600
if that is the case this is getting a bit repetitive i want to print it


2944
03:49:41,600 --> 03:49:44,000
something okay


2945
03:49:44,000 --> 03:49:48,239
that covers this line and finally we have an else statement


2946
03:49:48,239 --> 03:49:54,319
that if all of these conditions are false we want to do something else


2947
03:49:54,319 --> 03:50:00,479
anything else we want to do is to print eat something cheap


2948
03:50:00,479 --> 03:50:05,040
and there we go this is going to cover all of the four if statements if i run


2949
03:50:05,040 --> 03:50:11,040
this now we get each something fancy because the first if statement


2950
03:50:11,040 --> 03:50:14,160
this one here is true


2951
03:50:14,160 --> 03:50:19,279
however if i change this 100 to let's say 50


2952
03:50:19,279 --> 03:50:23,680
we get eat something nice if i change it to 20


2953
03:50:23,680 --> 03:50:28,000
we get eat something okay and if i change it to 5


2954
03:50:28,000 --> 03:50:32,399
we get eat something cheap and with that we have basic if


2955
03:50:32,399 --> 03:50:36,880
statements now that we have learned about basic if


2956
03:50:36,880 --> 03:50:41,279
statements we can work on the more complex ones because if statements can


2957
03:50:41,279 --> 03:50:45,840
be extended number one is you can combine different


2958
03:50:45,840 --> 03:50:49,520
conditions inside of one if statement on the same line


2959
03:50:49,520 --> 03:50:55,199
and number two is you can nest one if statement inside of another if statement


2960
03:50:55,199 --> 03:50:59,840
which lets you create really complex systems that check different values


2961
03:50:59,840 --> 03:51:04,720
let's start with combining conditions and in here the two keywords we need are


2962
03:51:04,720 --> 03:51:08,800
and and or kind of confusing to say but you get the


2963
03:51:08,800 --> 03:51:13,439
idea how this would look like is we have if 5


2964
03:51:13,439 --> 03:51:19,120
is smaller than 1 and e in hello or 10 is different from 4.


2965
03:51:19,120 --> 03:51:23,600
this may look confusing but let's go through it one by one to


2966
03:51:23,600 --> 03:51:27,359
understand how this works we have to understand and and or


2967
03:51:27,359 --> 03:51:31,920
and means that all the parts have to be true


2968
03:51:31,920 --> 03:51:35,040
meaning when we are talking about this and here


2969
03:51:35,040 --> 03:51:40,160
this bit in particular both of these conditions five is more


2970
03:51:40,160 --> 03:51:44,880
than one and e and hello have to be true individually


2971
03:51:44,880 --> 03:51:51,680
for this entire statement here to return true as a whole whereas or works in the


2972
03:51:51,680 --> 03:51:57,520
opposite way where only one or a statement has to be true which means if


2973
03:51:57,520 --> 03:52:02,960
this or statement here is true then it wouldn't matter if all of this is false


2974
03:52:02,960 --> 03:52:05,840
because as long as one or statement is true


2975
03:52:05,840 --> 03:52:11,760
then the entire if statement is going to return true as a whole


2976
03:52:11,760 --> 03:52:15,680
and this is probably going to sound very confusing so let's do this a bit more


2977
03:52:15,680 --> 03:52:18,720
practically let's do this actually in the simplest


2978
03:52:18,720 --> 03:52:25,040
possible way let's say i have if true and i want to print


2979
03:52:25,040 --> 03:52:28,560
true this if statement here


2980
03:52:28,560 --> 03:52:32,160
really doesn't make too much sense but to illustrate the point it's really


2981
03:52:32,160 --> 03:52:35,120
useful but since we're adding the boolean value


2982
03:52:35,120 --> 03:52:39,600
true in this if statement this is always going to run meaning if i execute the


2983
03:52:39,600 --> 03:52:47,600
code we are getting true and now what we can do is use and in here and if i add


2984
03:52:47,600 --> 03:52:52,560
false now and run this again nothing is going to happen this line


2985
03:52:52,560 --> 03:52:59,040
will not be executed because of and both the first one this one here and the


2986
03:52:59,040 --> 03:53:04,640
second one have to be true for this entire condition to be true as a whole


2987
03:53:04,640 --> 03:53:09,680
which there aren't right now but if it was true


2988
03:53:09,680 --> 03:53:14,800
then this would run again the way you have to think about and is


2989
03:53:14,800 --> 03:53:20,080
i'm only going to run this if statement if this is true and this is true and


2990
03:53:20,080 --> 03:53:25,439
anything else is true and if any single statement is false then the entire thing


2991
03:53:25,439 --> 03:53:29,359
is not going to be run i hope that makes sense it does take


2992
03:53:29,359 --> 03:53:33,199
some time to get used to it let me go back to false


2993
03:53:33,199 --> 03:53:39,439
and the other word we can use is or now we want to run this line of code if this


2994
03:53:39,439 --> 03:53:45,359
is true or this is true meaning if either of these is true then the entire


2995
03:53:45,359 --> 03:53:50,560
if statement is going to run if i run this now this is going to be true


2996
03:53:50,560 --> 03:53:54,640
because for or only one of them has to be true


2997
03:53:54,640 --> 03:54:00,479
and once you get so far you can combine and and or for example what i can do is


2998
03:54:00,479 --> 03:54:06,239
true and true and true or true now this


2999
03:54:06,239 --> 03:54:12,000
would obviously return true as a whole because we only have true values in here


3000
03:54:12,000 --> 03:54:17,520
but now if i set this to false this would still run


3001
03:54:17,520 --> 03:54:21,600
and the reason is let me add a bit of white space around it so i have more


3002
03:54:21,600 --> 03:54:26,640
space to draw on i am assuming that this is kind of confusing right now still


3003
03:54:26,640 --> 03:54:32,160
python essentially combines all of the n statements into one block inside of the


3004
03:54:32,160 --> 03:54:37,520
if statement and this entire block can either be true or false


3005
03:54:37,520 --> 03:54:43,439
for and every single value has to be true and if a single value is false then


3006
03:54:43,439 --> 03:54:48,640
the entire thing is going to be false in our case since there is one fault


3007
03:54:48,640 --> 03:54:53,040
statement the entire block here is going to be


3008
03:54:53,040 --> 03:54:56,720
false once we have that python is looking at


3009
03:54:56,720 --> 03:55:03,439
the or statement this bit here and as a consequence of this we now have false


3010
03:55:03,439 --> 03:55:08,319
from all of the and statements and then we are checking false or true and if


3011
03:55:08,319 --> 03:55:12,880
either of these are true then the entire if statement is going to be true which


3012
03:55:12,880 --> 03:55:17,120
in this case it is just to make sure let's do one exercise


3013
03:55:17,120 --> 03:55:21,279
for this one already and what i want you guys to do


3014
03:55:21,279 --> 03:55:26,000
is here we have three variables and the exercise is going to be fairly similar


3015
03:55:26,000 --> 03:55:29,199
compared to what we have done in the last video


3016
03:55:29,199 --> 03:55:32,960
what you should be working on is another if statement that checks if


3017
03:55:32,960 --> 03:55:37,359
the money available is greater than 80 and if you are hungry if those two


3018
03:55:37,359 --> 03:55:43,199
conditions are true print eat something fancy or whatever you want however this


3019
03:55:43,199 --> 03:55:48,640
should also run if board is true and for that to work you have to combine


3020
03:55:48,640 --> 03:55:56,439
end and or statements so pause the video now and try to figure this one out


3021
03:55:57,439 --> 03:56:02,319
to get started i need an if statement once again and now i want to check if


3022
03:56:02,319 --> 03:56:06,399
money available is greater than 80.


3023
03:56:06,399 --> 03:56:12,479
this covers this first bit on top of that i also want to check the


3024
03:56:12,479 --> 03:56:16,000
end if hungry


3025
03:56:16,000 --> 03:56:19,439
is equal to true


3026
03:56:19,439 --> 03:56:24,479
with that i have covered this entire bit now that i have that


3027
03:56:24,479 --> 03:56:30,080
i can print eat something


3028
03:56:30,319 --> 03:56:34,319
fancy if i run this now


3029
03:56:34,319 --> 03:56:39,520
this is going to return eat something fancy let me comment out this stuff at


3030
03:56:39,520 --> 03:56:43,040
the top so we're not getting confused eat something fancy


3031
03:56:43,040 --> 03:56:47,600
if i change hungry to false run this again we are not getting


3032
03:56:47,600 --> 03:56:50,960
anything the simple reason being


3033
03:56:50,960 --> 03:56:55,040
that both of these statements have to be true


3034
03:56:55,040 --> 03:57:00,720
because of the end statement here if either of these is


3035
03:57:00,720 --> 03:57:06,239
false then the entire thing is going to return


3036
03:57:06,239 --> 03:57:09,520
false which it does right now so none of this


3037
03:57:09,520 --> 03:57:14,560
is going to be run however now what we can do


3038
03:57:14,560 --> 03:57:21,520
is use an or statement as well to cover the last bit or if bored


3039
03:57:21,520 --> 03:57:26,880
and now i want to check our board equals to true as well


3040
03:57:26,880 --> 03:57:31,680
if we run all of this now we get eat something fancy and what


3041
03:57:31,680 --> 03:57:39,439
happened here is python first checks the two statements connected by and


3042
03:57:39,439 --> 03:57:44,720
and it sees that money available is 100 which indeed is greater than 80 meaning


3043
03:57:44,720 --> 03:57:50,319
this part here is going to be true but then for hungary equals true it


3044
03:57:50,319 --> 03:57:53,920
looks at the hungry variable and this one is false


3045
03:57:53,920 --> 03:57:58,800
meaning this one is going to return false


3046
03:57:58,800 --> 03:58:02,560
as a consequence the entire bit here


3047
03:58:02,560 --> 03:58:08,960
is going to give us a big false the difference now is we are also


3048
03:58:08,960 --> 03:58:15,680
checking this or statement which means we want to check if anything in here is


3049
03:58:15,680 --> 03:58:19,600
true or if this condition is true which it


3050
03:58:19,600 --> 03:58:23,680
actually is right now and as a consequence


3051
03:58:23,680 --> 03:58:28,840
the entire thing combined is going to return


3052
03:58:28,840 --> 03:58:33,600
true consequence being we are going to run this line of code


3053
03:58:33,600 --> 03:58:39,040
and i hope this makes sense using these and or keywords can be a bit confusing


3054
03:58:39,040 --> 03:58:42,800
definitely play around with this in your own time if you're struggling


3055
03:58:42,800 --> 03:58:47,680
that being said most of the time you are going to keep this fairly simple


3056
03:58:47,680 --> 03:58:51,840
you usually only have a single and statement in here and then you are good


3057
03:58:51,840 --> 03:58:55,040
to go don't overthink this


3058
03:58:55,040 --> 03:58:59,680
the other way to make if statements more complex is by nesting them


3059
03:58:59,680 --> 03:59:04,399
and let me do an example we could have an if statement if a is


3060
03:59:04,399 --> 03:59:08,800
inside of the list a and b right now this one would be true but


3061
03:59:08,800 --> 03:59:14,239
inside of this we can add another if statement that is indented by one line


3062
03:59:14,239 --> 03:59:18,960
and inside of that we could even add another if statement and this system we


3063
03:59:18,960 --> 03:59:23,840
could continue forever as long as we keep on adding more indentation levels


3064
03:59:23,840 --> 03:59:27,040
let's have a look at this one in a bit more detail


3065
03:59:27,040 --> 03:59:31,040
i'm going to comment out the stuff we have done earlier i guess i could


3066
03:59:31,040 --> 03:59:34,160
organize it a tiny bit better there we go


3067
03:59:34,160 --> 03:59:39,199
and now i will look at nested if statements


3068
03:59:39,199 --> 03:59:43,120
and to keep comments a bit more consistent let me add one for the first


3069
03:59:43,120 --> 03:59:47,840
part let's call it combining conditions


3070
03:59:47,840 --> 03:59:52,160
the example we have just seen is we want to check if the letter a


3071
03:59:52,160 --> 03:59:55,840
is in the list a and


3072
03:59:55,840 --> 03:59:58,640
b if that is the case


3073
03:59:58,640 --> 04:00:03,680
i let's say i want to print a is in


3074
04:00:03,680 --> 04:00:07,920
the list executing the code is going to print


3075
04:00:07,920 --> 04:00:11,600
this line this one should be fairly straightforward


3076
04:00:11,600 --> 04:00:16,319
and again remember we are on one level of indentation on this line of


3077
04:00:16,319 --> 04:00:20,720
indentation though we could add another if statement


3078
04:00:20,720 --> 04:00:23,520
we could for example check if


3079
04:00:23,520 --> 04:00:28,880
a and then use the method


3080
04:00:31,120 --> 04:00:35,760
then i need a colon again and now i need another indentation line or another


3081
04:00:35,760 --> 04:00:40,080
level of indentation and then here let me print


3082
04:00:40,080 --> 04:00:42,880
it is a letter


3083
04:00:42,880 --> 04:00:47,199
if i run this now i get a is in the list and it is a


3084
04:00:47,199 --> 04:00:51,279
letter now this example really doesn't make too


3085
04:00:51,279 --> 04:00:56,080
much sense but we can make it quite a bit more interesting for example what


3086
04:00:56,080 --> 04:01:02,160
you could be doing is create a variable and in this right now i want to have


3087
04:01:02,160 --> 04:01:07,199
let's say the string a and now i want to check if x is inside


3088
04:01:07,199 --> 04:01:11,439
of this list and i want to check x is alpha


3089
04:01:11,439 --> 04:01:15,920
if i run this again we are going to get the same result we essentially just


3090
04:01:15,920 --> 04:01:20,640
replaced the string a with a variable that contains the same string


3091
04:01:20,640 --> 04:01:26,239
but once we have that i could add another string in here that contains a 1


3092
04:01:26,239 --> 04:01:32,399
which is not in the alphabet so if i check this one here what i


3093
04:01:32,399 --> 04:01:37,760
expect now to happen is that this is still going to be inside of the list so


3094
04:01:37,760 --> 04:01:42,560
this entire condition should be true as a consequence this print statement


3095
04:01:42,560 --> 04:01:44,880
should run however


3096
04:01:44,880 --> 04:01:48,399
the number one even if it's inside of a string is not


3097
04:01:48,399 --> 04:01:53,600
in the alphabet so this condition should not be true


3098
04:01:53,600 --> 04:01:58,319
and if i run this we can indeed only see this line here was run but this was


3099
04:01:58,319 --> 04:02:03,120
false and as a consequence this line here was not executed


3100
04:02:03,120 --> 04:02:07,439
if you wanted to you could even add another level of indentation


3101
04:02:07,439 --> 04:02:11,439
i don't know let me just add true so we always execute it and inside of that you


3102
04:02:11,439 --> 04:02:16,000
could keep on adding more if statements there's absolutely no limitation on how


3103
04:02:16,000 --> 04:02:20,399
many if statements you can add the only thing you really have to consider here


3104
04:02:20,399 --> 04:02:24,800
is that each if statement has to be on a separate level of indentation


3105
04:02:24,800 --> 04:02:29,120
at the very least if you want them to be part of the other if statement


3106
04:02:29,120 --> 04:02:32,960
if you added an if statement here


3107
04:02:32,960 --> 04:02:38,880
let me get rid of this one you would check those two individually


3108
04:02:38,880 --> 04:02:42,960
the way you want to think about it is that each if statement is one block of


3109
04:02:42,960 --> 04:02:48,239
code this if statement here is one block inside of this if statement we have one


3110
04:02:48,239 --> 04:02:53,199
block for this if statement and another block for this if statement


3111
04:02:53,199 --> 04:02:58,560
and these two here are independent of each other but they both depend on this


3112
04:02:58,560 --> 04:03:04,000
if statement to run if this if statement does not run neither of those will run


3113
04:03:04,000 --> 04:03:06,720
just to have something in here let me print


3114
04:03:06,720 --> 04:03:10,080
something and let me add some purple white space


3115
04:03:10,080 --> 04:03:14,880
so this looks a bit cleaner all right with that we can do another exercise and


3116
04:03:14,880 --> 04:03:19,279
then finish this part what i want you guys to do let me copy


3117
04:03:19,279 --> 04:03:25,279
it from up here i want you guys to check these three


3118
04:03:25,279 --> 04:03:30,479
conditions but now instead of using this system here


3119
04:03:30,479 --> 04:03:34,479
i want you guys to create a nested if statement


3120
04:03:34,479 --> 04:03:39,359
and if all three conditions are true so you have enough money you are hungry and


3121
04:03:39,359 --> 04:03:42,720
you are bored then i want you guys to print eat


3122
04:03:42,720 --> 04:03:47,439
something fancy or really whatever you want it doesn't matter that much


3123
04:03:47,439 --> 04:03:53,439
let me actually uncomment them and add a comment for the exercise and now pause


3124
04:03:53,439 --> 04:03:56,960
the video and do this one yourself


3125
04:03:58,560 --> 04:04:03,920
let's start with money available is greater than 80. that's the one we have


3126
04:04:03,920 --> 04:04:06,960
already used and


3127
04:04:06,960 --> 04:04:11,040
i guess while we are here i can also print something to check on what if


3128
04:04:11,040 --> 04:04:15,520
statement we are for this one i want to print i have


3129
04:04:15,520 --> 04:04:18,960
enough money


3130
04:04:19,279 --> 04:04:23,120
after that i want to check the next if statement


3131
04:04:23,120 --> 04:04:28,640
and i just want to check if hungary is equal to true


3132
04:04:28,640 --> 04:04:36,160
and if that the case i can print and i am hungry


3133
04:04:36,160 --> 04:04:40,800
inside of that i want to check if board is equal to


3134
04:04:40,800 --> 04:04:46,640
true and if that the case i want to print the final thing eat


3135
04:04:46,640 --> 04:04:49,279
something fancy


3136
04:04:49,279 --> 04:04:55,600
before i run it i do want to comment out this part here so we keep things a bit


3137
04:04:55,600 --> 04:05:01,680
cleaner if i run this now we only get up to i have enough money this line here


3138
04:05:01,680 --> 04:05:06,239
we are not getting to if hungry because hungry is false


3139
04:05:06,239 --> 04:05:13,840
if i said this hungry too true we get let me expand this a tiny bit


3140
04:05:13,840 --> 04:05:18,560
i have enough money i am hungry and eat something fancy all three


3141
04:05:18,560 --> 04:05:23,279
conditions here are true and with that we have if statements


3142
04:05:23,279 --> 04:05:27,680
obviously you could also add else statements in here if you really wanted


3143
04:05:27,680 --> 04:05:31,840
to and make this even more complex now there's one more thing that i want


3144
04:05:31,840 --> 04:05:36,160
to cover really quick writing something like this is a bit


3145
04:05:36,160 --> 04:05:38,880
redundant all you really need


3146
04:05:38,880 --> 04:05:43,439
is hungry by itself if i run this it would still work


3147
04:05:43,439 --> 04:05:48,479
what happens here is that python looks at the hungry variable and the


3148
04:05:48,479 --> 04:05:55,199
value for hungry is true meaning this if statement here is essentially if true


3149
04:05:55,199 --> 04:05:58,560
and keeping like this is much more readable


3150
04:05:58,560 --> 04:06:02,800
if a value is truthy you could just add it in here and then python would take


3151
04:06:02,800 --> 04:06:06,479
care of the rest for you but being more explicit about it would


3152
04:06:06,479 --> 04:06:10,239
also still work perfectly fine but alright with that we have if statements


3153
04:06:10,239 --> 04:06:15,040
covered in this part we're going to cover the match case statement


3154
04:06:15,040 --> 04:06:20,800
and this one is kind of similar to an if statement the major difference is


3155
04:06:20,800 --> 04:06:25,359
you still run some code if a certain condition is true


3156
04:06:25,359 --> 04:06:31,040
but match case is more designed to check for one specific value out of a long


3157
04:06:31,040 --> 04:06:34,800
list of possible values that probably doesn't mean too much


3158
04:06:34,800 --> 04:06:39,120
let's do an example let's say you want to check the mood of


3159
04:06:39,120 --> 04:06:43,920
something if you used an if statement it might look something like this we have


3160
04:06:43,920 --> 04:06:48,399
if hungry you want to run some code and else if you're tired or bored you want


3161
04:06:48,399 --> 04:06:52,640
to run some other code all of this would be just fine but it


3162
04:06:52,640 --> 04:06:59,439
also feels kind of inefficient having one l if statement for each mood seems


3163
04:06:59,439 --> 04:07:02,319
kind of annoying to write every single time


3164
04:07:02,319 --> 04:07:06,239
and as a consequence python has a slightly different way to approach this


3165
04:07:06,239 --> 04:07:12,000
kind of case and this is a match case you would use the match keyboard and


3166
04:07:12,000 --> 04:07:16,319
then you would look at the variable in this case i am looking at the mood


3167
04:07:16,319 --> 04:07:22,319
and then you can specify different kinds of cases for example case for hungary


3168
04:07:22,319 --> 04:07:26,239
and if that is the case we have colons again and we are running some code


3169
04:07:26,239 --> 04:07:31,520
inside of it and then we can check for different cases and run some code for


3170
04:07:31,520 --> 04:07:36,239
all the different possibilities it is very very similar to an if


3171
04:07:36,239 --> 04:07:39,359
statement if you compare the two


3172
04:07:39,359 --> 04:07:44,479
match case is actually a tiny bit longer if that makes a difference to you


3173
04:07:44,479 --> 04:07:48,640
although the main thing you want to look at here is readability


3174
04:07:48,640 --> 04:07:53,120
all of these l if statements here eventually get kind of annoying to read


3175
04:07:53,120 --> 04:07:58,479
whereas case this case that gets much better and is a much easier way to check


3176
04:07:58,479 --> 04:08:03,520
the value of this mood both approaches here would be perfectly


3177
04:08:03,520 --> 04:08:06,239
fine though as a matter of fact


3178
04:08:06,239 --> 04:08:10,960
match case is a reasonably recent addition to python


3179
04:08:10,960 --> 04:08:14,640
which is the reason why very few people actually use it


3180
04:08:14,640 --> 04:08:19,040
most of the time you are going to see some kind of if statement which is still


3181
04:08:19,040 --> 04:08:24,560
perfectly fine but in some cases match is the more appropriate way to go on


3182
04:08:24,560 --> 04:08:27,520
but well let's have a look at all of this in code


3183
04:08:27,520 --> 04:08:32,000
once again i have a completely empty python file and i want to create a new


3184
04:08:32,000 --> 04:08:37,359
variable let's call it mood and right now my mood is going to be


3185
04:08:37,359 --> 04:08:41,279
hungry if that is the case i want to run some


3186
04:08:41,279 --> 04:08:44,479
code what we have seen so far you could use


3187
04:08:44,479 --> 04:08:50,880
an if statement if mood is equal to hungry


3188
04:08:50,880 --> 04:08:53,760
then let me print


3189
04:08:53,760 --> 04:08:58,880
get some food or something like that running this


3190
04:08:58,880 --> 04:09:04,319
will get me indeed get some food this one is working just as intended


3191
04:09:04,319 --> 04:09:09,279
the difference now is if we have lots of options here for our mood we could be


3192
04:09:09,279 --> 04:09:13,760
hungry bored thirsty tired and whatever else you want


3193
04:09:13,760 --> 04:09:17,040
for each of these conditions we would have to add


3194
04:09:17,040 --> 04:09:20,720
another l if statement to check for all of the


3195
04:09:20,720 --> 04:09:24,479
possibilities which does eventually get kind of


3196
04:09:24,479 --> 04:09:28,880
cumbersome to write and because of that we have


3197
04:09:28,880 --> 04:09:32,399
match and then we want to look at the variable


3198
04:09:32,399 --> 04:09:35,920
mood in my case now you need a colon


3199
04:09:35,920 --> 04:09:40,000
and if i press enter we are again indented by one line


3200
04:09:40,000 --> 04:09:46,560
and now i have to specify a case that could be one scenario for this mood


3201
04:09:46,560 --> 04:09:52,319
for example the case could be hungry if i add a color now


3202
04:09:52,319 --> 04:09:58,960
and press enter we are once again on a separate line and now i can print


3203
04:09:58,960 --> 04:10:02,239
get some food


3204
04:10:02,239 --> 04:10:07,199
if i run all of this we are again back to get some food this


3205
04:10:07,199 --> 04:10:11,439
result here is basically a simple if statement the


3206
04:10:11,439 --> 04:10:19,680
difference now is that we can specify other cases for example a case first d


3207
04:10:19,680 --> 04:10:24,960
and then let me copy this one get some water


3208
04:10:24,960 --> 04:10:30,479
i could specify a case for


3209
04:10:30,560 --> 04:10:34,880
tired and continue like this forever there


3210
04:10:34,880 --> 04:10:39,279
really isn't any limitation how many cases you can have let me just write it


3211
04:10:39,279 --> 04:10:44,399
out get some sleep with that established i can now change


3212
04:10:44,399 --> 04:10:49,520
the variable and get different outcomes i suppose there's one more thing that


3213
04:10:49,520 --> 04:10:53,199
you could include here and that would be case


3214
04:10:53,199 --> 04:10:58,080
underscore still needs a colon and now you can


3215
04:10:58,080 --> 04:11:02,880
print in here any other mood


3216
04:11:02,880 --> 04:11:08,399
because an underscore is run when none of the other cases are correct for


3217
04:11:08,399 --> 04:11:13,199
example right now if i write in here something like


3218
04:11:13,199 --> 04:11:17,439
board a case we haven't accounted for yet


3219
04:11:17,439 --> 04:11:22,560
if i run this we get any other mood if python doesn't find any of these it


3220
04:11:22,560 --> 04:11:27,520
is going to run the underscore one and with that we have match case covered


3221
04:11:27,520 --> 04:11:33,439
and i am fully aware this is about as efficient as an if-else statement it


3222
04:11:33,439 --> 04:11:38,399
really isn't that much of a difference match case really is not something you


3223
04:11:38,399 --> 04:11:42,479
absolutely have to use if you want to stick to if else statements this would


3224
04:11:42,479 --> 04:11:46,840
also be perfectly fine but all right let's do an


3225
04:11:46,840 --> 04:11:51,120
exercise what i want you guys to do is this one here


3226
04:11:51,120 --> 04:11:55,600
create a variable with an integer between 1 and 5 and this should be a


3227
04:11:55,600 --> 04:11:58,960
great a grade you could be getting at school


3228
04:11:58,960 --> 04:12:03,199
and then create a match case statement for all of the values that this grade


3229
04:12:03,199 --> 04:12:07,120
could have one would be very good and five would be


3230
04:12:07,120 --> 04:12:11,680
very bad and print something like this for each of these cases


3231
04:12:11,680 --> 04:12:16,159
and i mean all of them from one to five also don't forget to include some


3232
04:12:16,159 --> 04:12:20,560
default behavior if you get the value you didn't expect like a 10 for example


3233
04:12:20,560 --> 04:12:24,880
pause the video now and try this one yourself


3234
04:12:26,239 --> 04:12:30,640
let's get started and i want to comment out all of this


3235
04:12:30,640 --> 04:12:34,319
and then we can start by creating the great


3236
04:12:34,319 --> 04:12:40,319
variable and let's start with number one i want to start by writing my match and


3237
04:12:40,319 --> 04:12:44,720
what i want to look for is the great variable


3238
04:12:44,720 --> 04:12:49,439
then i need a double colon and now on an indented line i want to check for one


3239
04:12:49,439 --> 04:12:53,279
case and the case right now could be a one


3240
04:12:53,279 --> 04:12:57,359
now i need a colon again and once again on an indented line


3241
04:12:57,359 --> 04:13:02,720
i want to print very good i can now run this and we get


3242
04:13:02,720 --> 04:13:06,720
very good indeed with that we have one case now we can do


3243
04:13:06,720 --> 04:13:10,960
case 2 print let's say


3244
04:13:10,960 --> 04:13:17,120
still good case 3 would be print


3245
04:13:17,120 --> 04:13:20,239
ok case 4


3246
04:13:20,239 --> 04:13:28,720
would then be print needs improvement and finally case five


3247
04:13:28,720 --> 04:13:32,319
i want to print very


3248
04:13:32,319 --> 04:13:39,279
bad i think i said yeah very bad up here and this would already be a working


3249
04:13:39,279 --> 04:13:42,960
match case statement i can run this again we get very good the same we had


3250
04:13:42,960 --> 04:13:47,279
earlier let's say if i use a 3 we get ok and if


3251
04:13:47,279 --> 04:13:53,520
i use 5 we get very bad the one thing we haven't done yet is if


3252
04:13:53,520 --> 04:13:58,560
i have a 7 a value we don't have accounted for nothing is running in here


3253
04:13:58,560 --> 04:14:03,439
i guess i haven't specifically mentioned that but if the match case doesn't find


3254
04:14:03,439 --> 04:14:08,640
a value it just doesn't run we do not get an error message just keep


3255
04:14:08,640 --> 04:14:12,239
that in mind it's a specific behavior of it


3256
04:14:12,239 --> 04:14:17,199
all right but i want to add case underscore for all the other values i


3257
04:14:17,199 --> 04:14:23,760
haven't accounted for and for this one i can print let's say


3258
04:14:23,760 --> 04:14:28,239
great not recognized


3259
04:14:28,239 --> 04:14:32,159
if i run this now we get great not recognized


3260
04:14:32,159 --> 04:14:36,640
this would also work with i don't know something else python


3261
04:14:36,640 --> 04:14:39,920
doesn't really care what the value here is


3262
04:14:39,920 --> 04:14:45,040
all right with that we have match case something fairly similar to an if else


3263
04:14:45,040 --> 04:14:49,439
statement but it could be useful in very specific scenarios


3264
04:14:49,439 --> 04:14:53,920
a really important concept in python is the while loop and this one is actually


3265
04:14:53,920 --> 04:14:58,960
quite simple all it does is it repeats some code as long as the condition is


3266
04:14:58,960 --> 04:15:02,399
true for example this could look like while


3267
04:15:02,399 --> 04:15:07,439
true i want to print an infinite loop this infinite loop here


3268
04:15:07,439 --> 04:15:11,600
would run forever unless we manually break the code


3269
04:15:11,600 --> 04:15:16,159
not exactly the most realistic scenario but something we could be doing


3270
04:15:16,159 --> 04:15:21,040
i suppose something slightly more realistic would be something like this


3271
04:15:21,040 --> 04:15:26,399
we are starting with x being 0. then we are checking


3272
04:15:26,399 --> 04:15:29,920
if x keeps on being smaller than 10 and


3273
04:15:29,920 --> 04:15:35,279
inside of this while loop we want to print a certain thing and we are also


3274
04:15:35,279 --> 04:15:41,439
going to increase the value of x on this line here this condition now is only


3275
04:15:41,439 --> 04:15:44,960
going to run 10 times and this is how often we are going to


3276
04:15:44,960 --> 04:15:49,359
print this loop here and with that we have some basic theory


3277
04:15:49,359 --> 04:15:53,040
out of the way let's actually have a look at all of this in code


3278
04:15:53,040 --> 04:15:57,199
i guess we can start with the examples i just talked about


3279
04:15:57,199 --> 04:16:02,239
we always start with the while keyword once we have that we need some kind of


3280
04:16:02,239 --> 04:16:05,920
boolean statement this could either be true


3281
04:16:05,920 --> 04:16:11,199
or false although if you have false this while loop is not going to run it will


3282
04:16:11,199 --> 04:16:17,439
only run if the value is true if that is the case in here you can print i think i


3283
04:16:17,439 --> 04:16:22,479
called it infinite loop if i run this now we get


3284
04:16:22,479 --> 04:16:26,319
an infinite loop that keeps on running forever


3285
04:16:26,319 --> 04:16:30,960
it's not particularly exciting but it definitely does work the way you would


3286
04:16:30,960 --> 04:16:35,840
exit this one is by just pressing escape and it would stop although you really


3287
04:16:35,840 --> 04:16:39,840
want to be careful with while loops it can


3288
04:16:39,840 --> 04:16:44,080
not crash your code but it can make your code not work anymore


3289
04:16:44,080 --> 04:16:47,760
let's say if you have some kind of game and you end up in a while loop that you


3290
04:16:47,760 --> 04:16:51,439
can't escape from anymore your game might just stop because your computer is


3291
04:16:51,439 --> 04:16:55,120
stuck in this while loop and it doesn't continue from it


3292
04:16:55,120 --> 04:16:59,920
let me get rid of this one and let's do something a bit more reasonable instead


3293
04:16:59,920 --> 04:17:04,479
i want to create a variable x and by default this one is going to be 0.


3294
04:17:04,479 --> 04:17:09,840
and now i want to check while x is smaller than


3295
04:17:09,840 --> 04:17:14,560
i want to print x


3296
04:17:14,560 --> 04:17:18,960
look at this code if i run it what do you think is going to happen


3297
04:17:18,960 --> 04:17:23,840
what we get is if i run this we have a whole bunch of zeros that keep on


3298
04:17:23,840 --> 04:17:27,279
running forever and the reason here should be fairly


3299
04:17:27,279 --> 04:17:32,560
clear this boolean condition x smaller than 10


3300
04:17:32,560 --> 04:17:38,960
is always going to be true because x is always zero and we are never changing it


3301
04:17:38,960 --> 04:17:44,319
the consequence being that this print statement is going to run forever it is


3302
04:17:44,319 --> 04:17:47,279
never going to stop


3303
04:17:47,520 --> 04:17:52,560
to overcome that we would have to do something like x plus equals 1.


3304
04:17:52,560 --> 04:17:56,880
and now if i run this we get the values from 0 to 9.


3305
04:17:56,880 --> 04:18:02,000
i suppose what you could also be doing is combine this with an if statement for


3306
04:18:02,000 --> 04:18:09,120
example if x is equal to 5 and this has to be indented really important to tell


3307
04:18:09,120 --> 04:18:13,279
python that this if belongs to this while loop here


3308
04:18:13,279 --> 04:18:17,199
but once we have that i want to colon again and on another level of


3309
04:18:17,199 --> 04:18:22,720
indentation i want to print x is 5.


3310
04:18:22,720 --> 04:18:28,080
if i run this now we get the values from 1 to 9 and at the


3311
04:18:28,080 --> 04:18:34,000
value 5 we have x is 5. and this way you can repeat code quite easily that being


3312
04:18:34,000 --> 04:18:39,120
said there are two ways to make all of this a bit more complex let's talk about


3313
04:18:39,120 --> 04:18:42,319
it you can break an entire while loop and


3314
04:18:42,319 --> 04:18:47,279
you can also skip one iteration of the while loop and let's do this by example


3315
04:18:47,279 --> 04:18:51,439
this is a bit difficult to explain here's the example i've shown you


3316
04:18:51,439 --> 04:18:57,040
earlier and this one would just print the word loop 10 times on the screen


3317
04:18:57,040 --> 04:19:01,040
but what you can do let's say with one if statement


3318
04:19:01,040 --> 04:19:05,840
you could for example add the break keyword and just a keyword


3319
04:19:05,840 --> 04:19:10,000
no brackets just break and if you write this


3320
04:19:10,000 --> 04:19:16,880
the entire while loop is going to end whenever x is equal to 5


3321
04:19:16,880 --> 04:19:20,479
you would never get to this 10 here at the end


3322
04:19:20,479 --> 04:19:25,279
besides that you also have continue continue doesn't


3323
04:19:25,279 --> 04:19:30,080
break the while loop instead it just skips to the next iteration of the while


3324
04:19:30,080 --> 04:19:34,159
loop meaning in this case if x is 5


3325
04:19:34,159 --> 04:19:39,040
this print down here would be skipped over because after


3326
04:19:39,040 --> 04:19:43,600
continuing this line here we would go back to the while loop and then continue


3327
04:19:43,600 --> 04:19:47,199
with the next iteration i think i added a bit more text here


3328
04:19:47,199 --> 04:19:51,120
there we go so break ends an entire while loop while


3329
04:19:51,120 --> 04:19:55,439
continue skips to the next iteration of the while loop and that's basically all


3330
04:19:55,439 --> 04:19:58,800
you have to understand about it let's play around with it


3331
04:19:58,800 --> 04:20:03,520
i already have an if statement inside of the while loop and this one i want to


3332
04:20:03,520 --> 04:20:09,600
use let's start with the break keyword and you can already tell sublime is


3333
04:20:09,600 --> 04:20:13,279
coloring it differently so we know that it has some kind of special


3334
04:20:13,279 --> 04:20:16,720
functionality if i run the code now


3335
04:20:16,720 --> 04:20:22,880
we get only the numbers from 0 to 4 and this happens because of this break


3336
04:20:22,880 --> 04:20:28,000
here it ends the entire while loop as soon as xs5


3337
04:20:28,000 --> 04:20:32,560
the other keyboard we have seen is continue


3338
04:20:32,560 --> 04:20:35,840
and this one right now is not going to work


3339
04:20:35,840 --> 04:20:41,680
and maybe you can figure out why let me run it actually in this case we are


3340
04:20:41,680 --> 04:20:46,479
getting all of the numbers and try to think of why we didn't skip over one of


3341
04:20:46,479 --> 04:20:50,080
them after we are running continue we are


3342
04:20:50,080 --> 04:20:55,120
skipping the rest of the current while loop in our case though we don't have


3343
04:20:55,120 --> 04:21:00,880
anything after continue continue is on the last line of this while loop


3344
04:21:00,880 --> 04:21:04,159
which means it doesn't actually do anything


3345
04:21:04,159 --> 04:21:08,960
we could change this though by putting the print statement after continue


3346
04:21:08,960 --> 04:21:13,840
and let me add a bit more white space here this looks a bit cleaner


3347
04:21:13,840 --> 04:21:19,520
if i run this now we would expect this print statement to be skipped if x is


3348
04:21:19,520 --> 04:21:23,359
equal 5 meaning we shouldn't see 5 in the output


3349
04:21:23,359 --> 04:21:29,600
let's try it and indeed after 4 we skip straight to 6. we do not


3350
04:21:29,600 --> 04:21:34,479
have 5 because of this continue here


3351
04:21:34,479 --> 04:21:40,479
and with that we have a while loop let's do an exercise and then we are


3352
04:21:40,479 --> 04:21:43,920
done that is horrible spelling there we go


3353
04:21:43,920 --> 04:21:48,720
what i want you guys to do is to use a while loop to create a list with only


3354
04:21:48,720 --> 04:21:54,239
even values from 0 to 100 i guess as a tip here create an empty


3355
04:21:54,239 --> 04:21:58,720
list first and then from the while loop append more values


3356
04:21:58,720 --> 04:22:03,279
i haven't covered yet how to only get even or odd values


3357
04:22:03,279 --> 04:22:07,680
maybe try to do some research it should be fairly doable but let's see if you


3358
04:22:07,680 --> 04:22:10,560
can figure this one out


3359
04:22:12,000 --> 04:22:16,720
i guess this one was a slightly more challenging exercise but let's try it


3360
04:22:16,720 --> 04:22:22,479
together i first need some kind of list let me call it my list and this is just


3361
04:22:22,479 --> 04:22:26,479
empty brackets for an empty list and there's one more thing that i am going


3362
04:22:26,479 --> 04:22:31,520
to need and that is some kind of counter by default i want to set this one to


3363
04:22:31,520 --> 04:22:34,080
zero this is what we are going to use to


3364
04:22:34,080 --> 04:22:37,920
control the while loop like the x we have used up here


3365
04:22:37,920 --> 04:22:42,720
actually let me comment out this earlier stuff so we are not getting confused


3366
04:22:42,720 --> 04:22:46,560
what i want to do with that is run my while loop again


3367
04:22:46,560 --> 04:22:51,760
with counter is smaller or equal than 100


3368
04:22:51,760 --> 04:22:56,239
because this is the maximum number we want to go to and we are starting from


3369
04:22:56,239 --> 04:23:00,800
zero which is the value here and let's start by adding every single


3370
04:23:00,800 --> 04:23:04,239
value to the list for that we need my list


3371
04:23:04,239 --> 04:23:11,279
append and then the counter once we have that i can just print


3372
04:23:11,279 --> 04:23:16,239
my list and let's see what we get and we are getting nothing


3373
04:23:16,239 --> 04:23:19,600
the reason here look at this again


3374
04:23:19,600 --> 04:23:23,120
i have actually made the mistake i warned you about earlier


3375
04:23:23,120 --> 04:23:27,600
right now the code is stuck inside of the while loop


3376
04:23:27,600 --> 04:23:32,000
let me end it with the escape button this if this was an actual code example


3377
04:23:32,000 --> 04:23:38,319
would have been really bad the reason here is this counter doesn't increase


3378
04:23:38,319 --> 04:23:42,560
it always stays at 0 and as a consequence this condition will always


3379
04:23:42,560 --> 04:23:46,000
be true and as a consequence we keep on adding


3380
04:23:46,000 --> 04:23:51,279
the value 0 to this list and besides that we would do pretty much


3381
04:23:51,279 --> 04:23:55,279
nothing else i would spend my entire processing time just adding zeros to a


3382
04:23:55,279 --> 04:23:58,239
list which not only would break my code it


3383
04:23:58,239 --> 04:24:03,359
would also be a waste of resources the way around it is i want to increase


3384
04:24:03,359 --> 04:24:07,279
the value of the counter by 1. and now if i run this


3385
04:24:07,279 --> 04:24:11,760
we are very quickly getting the values from 0 to 100


3386
04:24:11,760 --> 04:24:17,279
already a pretty good start but now i don't want every single value i only


3387
04:24:17,279 --> 04:24:23,439
want the even ones meaning i want 0 2 4 6 and so on


3388
04:24:23,439 --> 04:24:28,000
for that we are going to need an if statement inside of the while loop


3389
04:24:28,000 --> 04:24:32,640
all you really need is the percentage sign


3390
04:24:32,640 --> 04:24:35,439
and this we want to use with the number 2.


3391
04:24:35,439 --> 04:24:40,560
if this is 0 we know we are getting an even number


3392
04:24:40,560 --> 04:24:46,000
if i run this now i am getting only the even numbers


3393
04:24:46,000 --> 04:24:50,800
this operation here if you forgot about it is the remainder


3394
04:24:50,800 --> 04:24:56,960
for example if the counter was at three i think early on i used dots and that's


3395
04:24:56,960 --> 04:25:02,000
a really good system to explain it let's say we have three


3396
04:25:02,000 --> 04:25:07,600
dots here representing this three and if we're dividing this number by 2


3397
04:25:07,600 --> 04:25:14,000
we have one full block and this would be 1 unit after division


3398
04:25:14,000 --> 04:25:19,840
and what this percentage sign here gives us is the remainder so this one here


3399
04:25:19,840 --> 04:25:25,279
and if this is any value besides zero we know we have an odd value


3400
04:25:25,279 --> 04:25:30,960
on the same line if there is any value so if i use different from zero we are


3401
04:25:30,960 --> 04:25:36,640
only getting the odd values and this is the most common use case for


3402
04:25:36,640 --> 04:25:42,399
this remainder operation it's a really easy way to get even or odd values


3403
04:25:42,399 --> 04:25:46,800
i guess while we are here we should also practice


3404
04:25:46,800 --> 04:25:51,439
skipping one while loop so let me extend the exercise


3405
04:25:51,439 --> 04:25:57,920
i also want you guys to do not add the value


3406
04:25:57,920 --> 04:26:01,279
58. for some reason i really do not like


3407
04:26:01,279 --> 04:26:05,840
this one try to add this one as well


3408
04:26:05,840 --> 04:26:11,040
all right this is turning kind of into extra practice for the if operator but i


3409
04:26:11,040 --> 04:26:14,560
suppose that can't hurt we can approach this in two different


3410
04:26:14,560 --> 04:26:21,040
ways we could either add another if statement in here or add an end keyword


3411
04:26:21,040 --> 04:26:26,159
after the original if condition i guess let's start with this one


3412
04:26:26,159 --> 04:26:32,399
i want to check if my counter has a remainder of 0


3413
04:26:32,399 --> 04:26:36,880
and my counter


3414
04:26:37,279 --> 04:26:42,479
is different from 58 this is the number i want to avoid


3415
04:26:42,479 --> 04:26:49,120
if i run the code now i get let me find the value we have 54 56 and then we skip


3416
04:26:49,120 --> 04:26:54,720
to 60. we do not have 58. this would be one way to add it here


3417
04:26:54,720 --> 04:26:59,760
a different approach could be another if statement inside of this counter


3418
04:26:59,760 --> 04:27:03,439
i could check in here if counter is


3419
04:27:03,439 --> 04:27:08,080
different from 58 and then


3420
04:27:08,080 --> 04:27:12,880
this append here has to be on one more level of indentation to tell


3421
04:27:12,880 --> 04:27:15,920
python it belongs to this if statement here


3422
04:27:15,920 --> 04:27:20,399
and if i run this now we are getting the same outcome here with the 58 being


3423
04:27:20,399 --> 04:27:25,040
skipped all things considered while and if work


3424
04:27:25,040 --> 04:27:29,040
really well together and all right with that we have while


3425
04:27:29,040 --> 04:27:33,920
loops something fairly similar to a while loop is a for loop and this one


3426
04:27:33,920 --> 04:27:38,880
works in a somewhat similar way we are still running code a certain amount of


3427
04:27:38,880 --> 04:27:43,600
time so we are basically repeating code the difference now is that we are


3428
04:27:43,600 --> 04:27:48,239
running code for every item inside of a container


3429
04:27:48,239 --> 04:27:51,279
this could for example look something like this


3430
04:27:51,279 --> 04:27:56,399
we want to run a for loop for every item inside of the


3431
04:27:56,399 --> 04:28:02,399
list that contains one two and three the way this works is that python goes


3432
04:28:02,399 --> 04:28:07,040
through this entire list and picks every single value one two and three here and


3433
04:28:07,040 --> 04:28:11,840
then for each cycle it assigns the value to the x in this case but you could name


3434
04:28:11,840 --> 04:28:15,600
it whatever you want meaning if you added something like a


3435
04:28:15,600 --> 04:28:19,760
print inside of this for loop you would print


3436
04:28:19,760 --> 04:28:25,279
1 2 and three four cycles over every single item in


3437
04:28:25,279 --> 04:28:29,920
the list and then it stores the value inside of x and you can treat it like a


3438
04:28:29,920 --> 04:28:32,960
variable and just like with while you can also


3439
04:28:32,960 --> 04:28:37,760
use break and continue and that is basically it let's have a


3440
04:28:37,760 --> 04:28:42,000
look at it i want to create let me call it a basic


3441
04:28:42,000 --> 04:28:46,399
list and here let's use the example i have a


3442
04:28:46,399 --> 04:28:53,199
list with the numbers 1 2 and 3. and i want to run a for loop to access every


3443
04:28:53,199 --> 04:28:58,800
single item of this list the example we have used is for x in


3444
04:28:58,800 --> 04:29:04,080
basic list and then inside of it we have printed x


3445
04:29:04,080 --> 04:29:07,920
if i run this now we're getting one two and three


3446
04:29:07,920 --> 04:29:12,560
so what happened here i think it actually makes kind of sense


3447
04:29:12,560 --> 04:29:16,720
python is going to run this block of code here


3448
04:29:16,720 --> 04:29:24,000
for every item inside of this list and on every cycle it picks one of the


3449
04:29:24,000 --> 04:29:29,600
values starting from one then two and then three and it always assigns this


3450
04:29:29,600 --> 04:29:33,439
item to the variable we have specified here


3451
04:29:33,439 --> 04:29:36,560
but you could use any python variable name


3452
04:29:36,560 --> 04:29:41,359
and then inside of the for loop we are doing something with that value right


3453
04:29:41,359 --> 04:29:44,880
now we're just printing it we could also add it to a list or doing some math


3454
04:29:44,880 --> 04:29:49,920
operations or really do whatever we want and that way we can run code for every


3455
04:29:49,920 --> 04:29:54,000
item inside of a list and this would also work with the other types of


3456
04:29:54,000 --> 04:29:58,159
containers like a tuple a dictionary or a set


3457
04:29:58,159 --> 04:30:01,359
as a matter of fact there are lots of different things you could be cycling


3458
04:30:01,359 --> 04:30:06,479
over for example a string would also work inside of a for loop and there's


3459
04:30:06,479 --> 04:30:11,520
one particular case i do want to cover if you want to cycle over a number this


3460
04:30:11,520 --> 04:30:15,199
would also work but it does need some adjustment let's actually play around


3461
04:30:15,199 --> 04:30:20,080
with all of this and i have pre-written some values these ones here we have a


3462
04:30:20,080 --> 04:30:26,000
basic tuple a basic dictionary a basic set a basic string and a basic number


3463
04:30:26,000 --> 04:30:31,760
tuples and sets work exactly like the list if i replace the basic list with a


3464
04:30:31,760 --> 04:30:35,920
basic tuple we get the very same outcome and we


3465
04:30:35,920 --> 04:30:41,359
would also get the same thing with a set there we go we always get one two and


3466
04:30:41,359 --> 04:30:47,520
three python just really doesn't care what kind of container you have it's


3467
04:30:47,520 --> 04:30:52,479
fine cycling over any of them the basic dictionary also works but it


3468
04:30:52,479 --> 04:30:54,840
looks a bit different in terms of what you


3469
04:30:54,840 --> 04:31:00,880
get let me paste it in here basic dict and now we are still getting one two and


3470
04:31:00,880 --> 04:31:04,479
three we are getting all of the keys


3471
04:31:04,479 --> 04:31:10,239
which if you cycle over a dictionary is probably not what you want to do the way


3472
04:31:10,239 --> 04:31:16,159
around it is you would use either values to get the values now get one two and


3473
04:31:16,159 --> 04:31:21,840
three the strings attach to each key or we would use items


3474
04:31:21,840 --> 04:31:27,439
and that way you're getting a tuple returned with the key and the value


3475
04:31:27,439 --> 04:31:31,600
we are going to learn later on how to work with dictionaries in a bit more


3476
04:31:31,600 --> 04:31:35,520
detail but for now i think this is all we are going to need


3477
04:31:35,520 --> 04:31:40,960
for a basic string we can just paste it in here and now


3478
04:31:40,960 --> 04:31:46,080
python takes the string apart and gives us every individual letter including the


3479
04:31:46,080 --> 04:31:48,800
space finally


3480
04:31:48,800 --> 04:31:55,520
we have a basic number and this right now is not going to work if i run it


3481
04:31:55,520 --> 04:32:00,640
we get a type error into object is not iterable


3482
04:32:00,640 --> 04:32:04,239
let's talk about why this one didn't work


3483
04:32:04,239 --> 04:32:09,359
to loop over a number so the operation we have seen was for x and three and


3484
04:32:09,359 --> 04:32:14,319
this one didn't work the reason it didn't work is because python needs some


3485
04:32:14,319 --> 04:32:20,640
kind of iterable and integers cannot be iterated over that being said iterating


3486
04:32:20,640 --> 04:32:25,279
from zero to a certain number is such a common operation that there's a specific


3487
04:32:25,279 --> 04:32:29,439
python function for it it is called range


3488
04:32:29,439 --> 04:32:34,239
how you would use that is you would add a number in it and then it creates a


3489
04:32:34,239 --> 04:32:38,399
range object if you use something like range 3


3490
04:32:38,399 --> 04:32:44,399
we would get a range object from 0 and then all the way to 3.


3491
04:32:44,399 --> 04:32:49,439
and this we can iterate over it's fairly similar to a list although


3492
04:32:49,439 --> 04:32:54,080
it is its own data type meaning if you want to iterate over a


3493
04:32:54,080 --> 04:32:58,720
number you would use for x in range and then the number


3494
04:32:58,720 --> 04:33:03,760
and i guess let's implement this one as well here we are back in the example and


3495
04:33:03,760 --> 04:33:08,639
instead of using the number i have to put the number inside of the range


3496
04:33:08,639 --> 04:33:11,279
function if i print this now


3497
04:33:11,279 --> 04:33:17,600
we are getting the numbers 0 1 and 2 which if you pay close attention is kind


3498
04:33:17,600 --> 04:33:22,799
of different from these numbers here we are not even getting 3 we are again


3499
04:33:22,799 --> 04:33:29,199
starting at 0 and then going all the way to 3 but we are not including 3 and this


3500
04:33:29,199 --> 04:33:33,760
is why we are getting two a better way of illustrating this let me


3501
04:33:33,760 --> 04:33:37,520
copy this and comment out this entire for loop


3502
04:33:37,520 --> 04:33:42,160
and just print the range object


3503
04:33:42,160 --> 04:33:46,400
running this gets me a range object from 0 to 3.


3504
04:33:46,400 --> 04:33:51,199
it very much is its own data type and this one simply gives us something


3505
04:33:51,199 --> 04:33:55,520
we can loop over and it starts from 0 and goes all the way to a number we


3506
04:33:55,520 --> 04:34:02,400
specified but it doesn't include it which granted is a bit confusing to read


3507
04:34:02,400 --> 04:34:07,199
the range function actually works very similar compared to slicing


3508
04:34:07,199 --> 04:34:12,799
because inside of range right now we only specified one value which was


3509
04:34:12,799 --> 04:34:18,879
the end point but you could specify up to three values in here


3510
04:34:18,879 --> 04:34:24,561
you could have the start the end and the step size for the values


3511
04:34:24,561 --> 04:34:30,080
start by default is going to be zero and the step size is always going


3512
04:34:30,080 --> 04:34:33,039
to be one meaning if we don't specify them


3513
04:34:33,039 --> 04:34:37,840
we are getting those values most of the time you are only specifying


3514
04:34:37,840 --> 04:34:42,000
the end value which is what we have done ourselves


3515
04:34:42,000 --> 04:34:46,320
but in here you could specify something like 10


3516
04:34:46,320 --> 04:34:51,920
let's say 20 and 2. if i run this now we are getting range


3517
04:34:51,920 --> 04:34:57,680
object from 10 20 and a step size of 2 which by itself isn't particularly


3518
04:34:57,680 --> 04:35:01,520
useful but if i cut all of this out get rid of


3519
04:35:01,520 --> 04:35:06,561
this print statement and uncomment this for loop


3520
04:35:06,561 --> 04:35:12,000
and now i want my range object to look like this


3521
04:35:12,000 --> 04:35:16,320
if i run it now we get only the even values from 10 to


3522
04:35:16,320 --> 04:35:25,760
20 and again we are not including 20. but that is essentially the for loop


3523
04:35:25,760 --> 04:35:30,561
it is very often used alongside the range function they are very much


3524
04:35:30,561 --> 04:35:35,359
connected to each other and i guess with that let's do an


3525
04:35:35,359 --> 04:35:37,600
exercise once more


3526
04:35:37,600 --> 04:35:40,959
and what i want you guys to do is this one here


3527
04:35:40,959 --> 04:35:46,160
and this list contains other lists these are nested lists


3528
04:35:46,160 --> 04:35:50,400
you are supposed to cycle through this entire list using a for loop and then


3529
04:35:50,400 --> 04:35:55,600
only print the numbers below 50. although skip the values below 10.


3530
04:35:55,600 --> 04:35:59,439
as a tip here you will need one for loop to go through


3531
04:35:59,439 --> 04:36:04,719
this list and then another nested for loop to go through each individual list


3532
04:36:04,719 --> 04:36:09,520
inside of this list finally i want you guys to break this


3533
04:36:09,520 --> 04:36:16,160
for loop if any value is above 100 which is the case here for this one you are


3534
04:36:16,160 --> 04:36:20,080
going to need a for loop inside of a for loop and also throw an if statement in


3535
04:36:20,080 --> 04:36:22,879
there somewhere see if you can figure this one out


3536
04:36:22,879 --> 04:36:25,359
yourself


3537
04:36:29,439 --> 04:36:34,639
alright let's do it together now first of all i need for


3538
04:36:34,639 --> 04:36:39,840
and now i need a good name and since i know that each of these


3539
04:36:39,840 --> 04:36:45,119
lists here are nested inside of this practice list


3540
04:36:45,119 --> 04:36:51,199
i want something like for a nested list inside of my practice list


3541
04:36:51,199 --> 04:36:55,439
meaning i'm looking at this practice list here and i'm cycling over this


3542
04:36:55,439 --> 04:36:59,520
entire list what i'm getting from that is going to


3543
04:36:59,520 --> 04:37:06,160
be let me print the nested list i am getting these three lists here


3544
04:37:06,160 --> 04:37:10,879
we still get the earlier results let me comment out all of this to make all of


3545
04:37:10,879 --> 04:37:14,719
this a bit cleaner there we go now we have a couple of lists with


3546
04:37:14,719 --> 04:37:19,119
numbers inside of them problem is this still doesn't help us


3547
04:37:19,119 --> 04:37:25,039
figure out individual values for example i want to print this 10 here


3548
04:37:25,039 --> 04:37:29,279
but right now i can't access it because it's inside of a list


3549
04:37:29,279 --> 04:37:34,480
to overcome that we are going to need another for loop


3550
04:37:34,480 --> 04:37:40,639
with for let me call it value inside of the nested list


3551
04:37:40,639 --> 04:37:46,080
and now if i print this value and let me comment out printing the


3552
04:37:46,080 --> 04:37:48,561
nested list that's going to get confusing


3553
04:37:48,561 --> 04:37:52,799
if i run this now i am getting all of the numbers


3554
04:37:52,799 --> 04:37:56,719
basically what happens here let me use different colors for this


3555
04:37:56,719 --> 04:38:03,840
the first for loop this one here is going to go through this entire list


3556
04:38:03,840 --> 04:38:10,000
and it is looking at every item and an item is counted at anything separated by


3557
04:38:10,000 --> 04:38:16,080
a comma meaning this is one item this is another item and this is the final item


3558
04:38:16,080 --> 04:38:20,879
python doesn't care if the item is a list or a number it treats all of them


3559
04:38:20,879 --> 04:38:25,199
the same and to access every value inside of this


3560
04:38:25,199 --> 04:38:28,879
nested list we have this second for loop here


3561
04:38:28,879 --> 04:38:33,680
and this one is going to go for every individual list it starts with this one


3562
04:38:33,680 --> 04:38:38,799
then it does this one and then this one and via this for loop we are going


3563
04:38:38,799 --> 04:38:44,480
through every individual value inside of the list or the nested list to be more


3564
04:38:44,480 --> 04:38:48,639
specific the result being that this value here is


3565
04:38:48,639 --> 04:38:55,520
going to be every individual value from all of the lists and this is what we are


3566
04:38:55,520 --> 04:38:59,920
printing that is a really good start so now we


3567
04:38:59,920 --> 04:39:04,879
have to cover that we only want to print the numbers below 50 and we want to skip


3568
04:39:04,879 --> 04:39:11,520
values that are below 10. i guess we can start with if the value


3569
04:39:11,520 --> 04:39:16,799
is below 50 only then do we want to print the entire


3570
04:39:16,799 --> 04:39:20,000
value let me run this now and we are only


3571
04:39:20,000 --> 04:39:25,520
getting values below 50. this is going to cover the entire first


3572
04:39:25,520 --> 04:39:28,799
line now we have to cover the part to skip if


3573
04:39:28,799 --> 04:39:34,240
a value is below 10. and this again we could either do by


3574
04:39:34,240 --> 04:39:39,920
adding an end here or we could add another if statement


3575
04:39:39,920 --> 04:39:44,080
inside of here i guess i'm going to stick with the if


3576
04:39:44,080 --> 04:39:48,320
statement inside of here although it really doesn't matter i want to skip the


3577
04:39:48,320 --> 04:39:55,840
values if we are below 10 meaning if the value is below 10


3578
04:39:55,840 --> 04:40:00,000
then i want to use continue if this is the case


3579
04:40:00,000 --> 04:40:06,320
we are stopping this entire cycle and we are not getting to the print value


3580
04:40:06,320 --> 04:40:12,560
so let's try this and indeed we are only getting values that are at least 10


3581
04:40:12,560 --> 04:40:20,080
and the values two and 4 we have skipped now finally we have to cover the last


3582
04:40:20,080 --> 04:40:26,718
part that i want to end this entire for loop if we get a value above 100 which


3583
04:40:26,718 --> 04:40:31,440
is going to be this one here and now you might be very tempted to add


3584
04:40:31,440 --> 04:40:37,040
something like if value is greater than 100


3585
04:40:37,040 --> 04:40:42,400
then i want to break this entire code or at the very least the for loop


3586
04:40:42,400 --> 04:40:48,560
however now this is not going to work i guess to demonstrate it


3587
04:40:48,560 --> 04:40:54,718
the last value after 101 is going to be this 10 here and since this is not below


3588
04:40:54,718 --> 04:40:59,200
10 we do expect this to run although i just realized that since we have a 10


3589
04:40:59,200 --> 04:41:02,638
here enter 10 here it might be a bit hard to see


3590
04:41:02,638 --> 04:41:07,040
let me change the name here to a 12 so we have a specific number


3591
04:41:07,040 --> 04:41:11,200
if we run the code now we still can't see the 12


3592
04:41:11,200 --> 04:41:18,400
and i would recommend you to look over this and see why we can still see a 12.


3593
04:41:18,400 --> 04:41:24,160
the error here is because of one of the if statements try to have a look for it


3594
04:41:24,160 --> 04:41:30,480
the error happened on this line here this if statement checks if the value is


3595
04:41:30,480 --> 04:41:36,400
below 50 meaning we are never getting a value above that 50.


3596
04:41:36,400 --> 04:41:40,160
as a consequence when we are getting to this line here if


3597
04:41:40,160 --> 04:41:44,878
value is above 100 this line doesn't even run because we


3598
04:41:44,878 --> 04:41:48,400
never get to it after this line here we are only getting


3599
04:41:48,400 --> 04:41:52,958
values below 50. so this line here is essentially


3600
04:41:52,958 --> 04:42:01,120
pointless we can however cut it out and paste it at the top of


3601
04:42:01,120 --> 04:42:05,040
of the inner for loop let me fix this one


3602
04:42:05,040 --> 04:42:10,878
now when we are looking inside of this for loop if we find any value above 100


3603
04:42:10,878 --> 04:42:15,200
we are breaking the entire thing and none of this would run


3604
04:42:15,200 --> 04:42:19,440
i guess let me run it and now the last value is 10


3605
04:42:19,440 --> 04:42:23,600
this 10 here this does look confusing especially if


3606
04:42:23,600 --> 04:42:27,760
you're just starting to program but if you get used to indentation here this


3607
04:42:27,760 --> 04:42:31,600
should eventually make more and more sense this is definitely something you


3608
04:42:31,600 --> 04:42:34,400
want to practice in your own time even more


3609
04:42:34,400 --> 04:42:39,200
when it comes to python and the flow of the code understanding indentation is


3610
04:42:39,200 --> 04:42:42,320
really important to understand what's going on


3611
04:42:42,320 --> 04:42:46,320
there's one more topic i do want to cover before finishing this section and


3612
04:42:46,320 --> 04:42:52,400
that is flow and line breaks so far we always wrote code with a colon


3613
04:42:52,400 --> 04:42:55,040
and then with an annotation on the next line


3614
04:42:55,040 --> 04:42:59,840
you don't have to do that you could just write straight after the colon for


3615
04:42:59,840 --> 04:43:04,480
example for a for loop instead of the line break


3616
04:43:04,480 --> 04:43:09,920
after the colon and the indentation here you could simply continue writing the


3617
04:43:09,920 --> 04:43:13,040
print statement here this would also work with an if


3618
04:43:13,040 --> 04:43:16,080
statement it would also work with a while loop


3619
04:43:16,080 --> 04:43:23,120
as a matter of fact you could even use a semicolon to add multiple lines of code


3620
04:43:23,120 --> 04:43:27,200
all of these here would be counted as indented python is


3621
04:43:27,200 --> 04:43:31,520
totally fine with that that being said most of the time you do


3622
04:43:31,520 --> 04:43:36,400
want to indent your code because having multiple lines is easier to read but


3623
04:43:36,400 --> 04:43:40,400
that's not always the case sometimes if you have a very simple


3624
04:43:40,400 --> 04:43:44,560
statement it might make more sense to have it on the same line


3625
04:43:44,560 --> 04:43:50,560
for example match case very often has each case on an individual line without


3626
04:43:50,560 --> 04:43:55,040
a line break between the case and the actual code because the idea here is


3627
04:43:55,040 --> 04:43:59,680
each case should be fairly simple we're gonna have a look at that in a second


3628
04:43:59,680 --> 04:44:04,400
but much more important for the if statement python does have a special


3629
04:44:04,400 --> 04:44:09,920
operation here to have a one line if statement and this is called a ternary


3630
04:44:09,920 --> 04:44:14,080
operator this one works like this let's say we


3631
04:44:14,080 --> 04:44:18,560
have x equals 5 and we want to check something like


3632
04:44:18,560 --> 04:44:23,200
if the value is below 5 we want color equals blue and else the color should be


3633
04:44:23,200 --> 04:44:28,320
red a really simple if statement the problem is that we have four lines


3634
04:44:28,320 --> 04:44:31,920
of code for something that really is very simple


3635
04:44:31,920 --> 04:44:37,200
we could make this more space efficient by skipping the line break here


3636
04:44:37,200 --> 04:44:43,120
this way we only have two lines and this i think is more readable but this may be


3637
04:44:43,120 --> 04:44:46,638
debatable here however there is an even more efficient


3638
04:44:46,638 --> 04:44:50,638
way of doing all of this and this would look like this


3639
04:44:50,638 --> 04:44:53,680
this by the way is called the ternary operator


3640
04:44:53,680 --> 04:44:57,760
this entire line would be


3641
04:44:57,760 --> 04:45:01,440
this bit here then we have the if statement as always


3642
04:45:01,440 --> 04:45:07,040
but now the if statement this bit here with the condition


3643
04:45:07,040 --> 04:45:11,360
is this part here from the original if statement


3644
04:45:11,360 --> 04:45:16,878
we also have an else and then we have the else condition so this red here


3645
04:45:16,878 --> 04:45:22,958
would be assigned to the color if the condition this one here was false


3646
04:45:22,958 --> 04:45:27,120
and the way you would understand this ternary statement here is if you read it


3647
04:45:27,120 --> 04:45:32,798
like a sentence i want the color blue if the value of x is below 5 if that is not


3648
04:45:32,798 --> 04:45:38,400
the case so else i want the color red and that way if you have a simple if


3649
04:45:38,400 --> 04:45:43,440
statement you can cover all of this on a single line of code


3650
04:45:43,440 --> 04:45:48,480
once again we have a completely empty python file and i want to start with the


3651
04:45:48,480 --> 04:45:53,120
match case statement and here is the exercise we have done


3652
04:45:53,120 --> 04:45:56,080
earlier if you see this now with the


3653
04:45:56,080 --> 04:46:00,240
understanding that we don't have to do these line breaks i think all of this


3654
04:46:00,240 --> 04:46:07,840
starts to make a whole lot more sense this one we could write like this


3655
04:46:08,000 --> 04:46:13,840
let me get rid of all of the line breaks this here


3656
04:46:13,840 --> 04:46:18,160
is something incredibly readable especially if you have some kind of


3657
04:46:18,160 --> 04:46:22,560
statement where you would expect a lot of specific values you want to check for


3658
04:46:22,560 --> 04:46:26,160
this would be a very readable way to organize all of it


3659
04:46:26,160 --> 04:46:31,280
although granted using if-else statement wouldn't look all that different


3660
04:46:31,280 --> 04:46:36,240
the much more important operator is the ternary operator


3661
04:46:36,240 --> 04:46:41,040
and let me comment out the match case stuff because we don't need it


3662
04:46:41,040 --> 04:46:46,320
the example i've used earlier was x equal 5. from this value i want to


3663
04:46:46,320 --> 04:46:50,240
assign some kind of color and in here you first of all need the


3664
04:46:50,240 --> 04:46:54,320
value in my case red if the condition you want to check for


3665
04:46:54,320 --> 04:47:00,320
is true i want to have red if the value of x is i think smaller


3666
04:47:00,320 --> 04:47:03,360
than 5 i said doesn't really matter what it is


3667
04:47:03,360 --> 04:47:08,320
if that is not the case so else i want to assign a different value which in my


3668
04:47:08,320 --> 04:47:13,520
case is blue and that is all we need if i now print


3669
04:47:13,520 --> 04:47:18,480
my color run this we are getting blue because 5


3670
04:47:18,480 --> 04:47:22,320
is well this condition here is false


3671
04:47:22,320 --> 04:47:27,280
but if i change x to 1 run this again we are getting red


3672
04:47:27,280 --> 04:47:32,798
and this way if you have a very simple if statement you can cover it on a


3673
04:47:32,798 --> 04:47:36,320
single line i guess let me go over this a bit more


3674
04:47:36,320 --> 04:47:39,840
theoretically a ternary operator always looks like


3675
04:47:39,840 --> 04:47:43,280
this we have a true


3676
04:47:43,280 --> 04:47:46,160
value if an expression


3677
04:47:46,160 --> 04:47:51,840
results in true if the expression is false let me add a


3678
04:47:51,840 --> 04:47:56,400
cross here then we are getting the else value so the false value


3679
04:47:56,400 --> 04:47:59,760
and then either the true or the false value


3680
04:47:59,760 --> 04:48:03,680
will be assigned to whatever kind of variable


3681
04:48:03,680 --> 04:48:08,160
we are assigning all of this to that way you can cover an if statement


3682
04:48:08,160 --> 04:48:12,718
on a single line of code and this is really readable and very


3683
04:48:12,718 --> 04:48:17,280
efficient if you have a simple if statement if the if statement gets more


3684
04:48:17,280 --> 04:48:21,360
complex obviously you want to use a normal if statement the ones we have


3685
04:48:21,360 --> 04:48:25,120
already seen i guess one thing i haven't covered yet


3686
04:48:25,120 --> 04:48:31,040
is that this sort of operation here this ternary operator works in a lot of


3687
04:48:31,040 --> 04:48:35,600
different tools as well for example you can use it inside of an f-string or when


3688
04:48:35,600 --> 04:48:40,080
you are creating a list let's have a look at those two examples


3689
04:48:40,080 --> 04:48:46,320
let me get rid of this print statement and instead i want to print an f string


3690
04:48:46,320 --> 04:48:51,200
and in here i want to write something like the color is


3691
04:48:51,200 --> 04:48:55,200
and then i want to have an operation and in here


3692
04:48:55,200 --> 04:48:58,560
i could copy this entire thing instead of the


3693
04:48:58,560 --> 04:49:04,160
variable and it would still work so i can copy it although there's one


3694
04:49:04,160 --> 04:49:09,120
thing that we do have to take care of and that is that right now the quotation


3695
04:49:09,120 --> 04:49:13,200
signs are going to confuse python so it doesn't know where the string ends and


3696
04:49:13,200 --> 04:49:16,320
where it begins the way around it is to use double


3697
04:49:16,320 --> 04:49:20,480
quotation marks at the end and at the start


3698
04:49:20,480 --> 04:49:25,840
and this should be working now let's try it and there we go the color is red


3699
04:49:25,840 --> 04:49:32,480
and in here we have a fairly complex statement inside of a string this way we


3700
04:49:32,480 --> 04:49:37,120
don't have to assign variables before or after we can keep everything nice and


3701
04:49:37,120 --> 04:49:42,000
neat inside of one line finally we could also do something like


3702
04:49:42,000 --> 04:49:46,400
a is equal to some kind of value in the list


3703
04:49:46,400 --> 04:49:51,520
and in here i could once again copy all of this paste it inside of the list and


3704
04:49:51,520 --> 04:49:55,760
then have some other values like i know yellow and


3705
04:49:55,760 --> 04:50:00,798
green if i now print the entire list


3706
04:50:00,798 --> 04:50:05,600
we're getting red yellow and green all i really want you guys to take away from


3707
04:50:05,600 --> 04:50:10,878
this is that this sort of operation works basically anywhere in python


3708
04:50:10,878 --> 04:50:14,958
you could also put it inside of a function or a method python really


3709
04:50:14,958 --> 04:50:19,120
doesn't mind and this can give you a ton of power and avoid you having to write


3710
04:50:19,120 --> 04:50:24,718
extra code that you wouldn't need in this section we are going to cover


3711
04:50:24,718 --> 04:50:29,360
functions and let's talk about what functions are and what purpose they


3712
04:50:29,360 --> 04:50:33,680
serve so far we covered some basic data types


3713
04:50:33,680 --> 04:50:38,080
like integers and strings and we also learned how to change them using


3714
04:50:38,080 --> 04:50:42,718
functions and methods on top of that we also learned how to


3715
04:50:42,718 --> 04:50:47,120
change the flow of the code using if else match well for statements and stuff


3716
04:50:47,120 --> 04:50:50,160
like that so we are basically able to create


3717
04:50:50,160 --> 04:50:56,400
simple programs that work just fine but all of this only gets us so far and


3718
04:50:56,400 --> 04:50:59,680
to understand why let's do a metaphor


3719
04:50:59,680 --> 04:51:03,200
and let's say we want to build a car and the


3720
04:51:03,200 --> 04:51:07,040
tools we have learned about so far are the basic parts that you would need for


3721
04:51:07,040 --> 04:51:12,240
a car like screws pipes wires plastics and all the most basic parts you can


3722
04:51:12,240 --> 04:51:17,040
have for a car the problem is these parts don't really


3723
04:51:17,040 --> 04:51:23,040
make a car we don't build a car out of plastics and wires instead we build a


3724
04:51:23,040 --> 04:51:28,240
car out of an engine out of steering systems out of control systems batteries


3725
04:51:28,240 --> 04:51:33,760
and stuff like that meaning what we want to do in our code is to take these


3726
04:51:33,760 --> 04:51:39,200
simple parts here and use them to create more complex systems like a control


3727
04:51:39,200 --> 04:51:43,760
system or like an engine and once we have these more complex


3728
04:51:43,760 --> 04:51:48,000
systems we actually create the entire car


3729
04:51:48,000 --> 04:51:53,200
and in this analogy a function is one of these more complex systems like the


3730
04:51:53,200 --> 04:51:58,000
engine the control the battery they are just more complex parts but


3731
04:51:58,000 --> 04:52:02,320
they're still made out of these simple bits here and the main purpose of this


3732
04:52:02,320 --> 04:52:06,160
is to make our code more reusable and more organized


3733
04:52:06,160 --> 04:52:10,798
so what we are going to focus on for this section is to combine these simple


3734
04:52:10,798 --> 04:52:15,520
tools to create more complex parts and that is the main purpose of


3735
04:52:15,520 --> 04:52:18,638
functions later on we are going to learn even more


3736
04:52:18,638 --> 04:52:23,520
powerful ways to organize your code using classes but that comes later for


3737
04:52:23,520 --> 04:52:28,160
now we are just going to look at functions and the one really important


3738
04:52:28,160 --> 04:52:32,560
thing i already want you guys to understand is that a function is simply


3739
04:52:32,560 --> 04:52:36,560
a block of code that can be reused we're not really learning anything


3740
04:52:36,560 --> 04:52:40,878
fundamentally new instead we are just putting our pre-existing code into a


3741
04:52:40,878 --> 04:52:45,120
simple block or container and then we are using this container to execute that


3742
04:52:45,120 --> 04:52:50,080
code that's basically it although to use functions we need a two-step process


3743
04:52:50,080 --> 04:52:53,840
let's talk about that one and then we actually create some functions


3744
04:52:53,840 --> 04:52:58,638
for function we first of all have to create the function and this is where we


3745
04:52:58,638 --> 04:53:02,240
are adding all of the code to the function or while we are creating the


3746
04:53:02,240 --> 04:53:07,040
code inside of the function once we have that we have to do what is


3747
04:53:07,040 --> 04:53:12,400
called calling the code this is a very common word calling a function means you


3748
04:53:12,400 --> 04:53:16,320
are executing the function or you're telling the function to run and execute


3749
04:53:16,320 --> 04:53:20,480
the code inside of it and you can also add information into the function when


3750
04:53:20,480 --> 04:53:23,760
you called it we will see that in just a second


3751
04:53:23,760 --> 04:53:28,240
but with all of that covered let's actually create some basic functions and


3752
04:53:28,240 --> 04:53:32,240
this we should do in our code so let's have a look at that


3753
04:53:32,240 --> 04:53:37,360
and to create a function we need a special keyword and this is called def


3754
04:53:37,360 --> 04:53:42,160
short for define and now we need a name for a function


3755
04:53:42,160 --> 04:53:46,000
and in here we have the same naming convention that we have for variable


3756
04:53:46,000 --> 04:53:49,120
naming so for example a name for function could


3757
04:53:49,120 --> 04:53:53,680
be test underscore function and this would be perfectly fine


3758
04:53:53,680 --> 04:53:59,200
and once we have the name we need a pair of brackets and those you always need i


3759
04:53:59,200 --> 04:54:03,040
will explain in a second what they actually do i am going to leave them


3760
04:54:03,040 --> 04:54:07,200
empty for now though and now we need a colon and if i now


3761
04:54:07,200 --> 04:54:10,560
press enter i am going to be in one level of


3762
04:54:10,560 --> 04:54:13,200
indentation this space here


3763
04:54:13,200 --> 04:54:18,798
tells python or while this indentation that any code we have inside of here


3764
04:54:18,798 --> 04:54:23,200
belongs to this function really important to understand


3765
04:54:23,200 --> 04:54:26,958
it works like a for loop or an if statement same principle


3766
04:54:26,958 --> 04:54:32,638
and now in here we can write any code we have already seen for example i could


3767
04:54:32,638 --> 04:54:35,600
print hello


3768
04:54:35,600 --> 04:54:40,320
i could create a new variable let me call it test and test could just be one


3769
04:54:40,320 --> 04:54:44,560
plus two and then i could print test


3770
04:54:44,560 --> 04:54:49,200
we can write the very same code in here that we can write in normal code


3771
04:54:49,200 --> 04:54:54,718
and once i have this i have created a function so this is the first step


3772
04:54:54,718 --> 04:55:00,160
and now to call it i need my test function so the name of it and then add


3773
04:55:00,160 --> 04:55:04,400
brackets afterwards and this entire process here is called calling a


3774
04:55:04,400 --> 04:55:08,240
function essentially every time you're adding


3775
04:55:08,240 --> 04:55:11,280
brackets after the name of a function you are


3776
04:55:11,280 --> 04:55:15,200
calling that function and what that essentially means is


3777
04:55:15,200 --> 04:55:20,240
you're telling python you want to execute all of this code here


3778
04:55:20,240 --> 04:55:26,080
if i run the code we can see hello and free so this hello here and the result


3779
04:55:26,080 --> 04:55:31,040
of oneplus 2 printed in this line and what i can also do now i can


3780
04:55:31,040 --> 04:55:34,638
duplicate this call of the function and run this


3781
04:55:34,638 --> 04:55:41,280
again and we can see this code run or executed multiple times and i hope you


3782
04:55:41,280 --> 04:55:46,240
can already see why this is useful you can basically create some specific


3783
04:55:46,240 --> 04:55:51,840
functionality in here and then execute it wherever you need so if you had


3784
04:55:51,840 --> 04:55:56,480
some really complex code and you wanted to organize it better this is one of the


3785
04:55:56,480 --> 04:56:02,000
main ways you would be doing it and let's actually do another example


3786
04:56:02,000 --> 04:56:06,840
and for this one let's do something more specific i want to create a


3787
04:56:06,840 --> 04:56:11,760
calculator and again i need brackets and all i


3788
04:56:11,760 --> 04:56:17,200
really want to do in here i want to create a variable result and


3789
04:56:17,200 --> 04:56:21,120
this result should be the result of number one plus


3790
04:56:21,120 --> 04:56:26,240
number two and once i have that i want to print


3791
04:56:26,240 --> 04:56:30,560
my result meaning this would be an incredibly


3792
04:56:30,560 --> 04:56:34,000
simple calculator that just adds two numbers together


3793
04:56:34,000 --> 04:56:39,520
but for this to work we kind of have a problem and that is how can we get this


3794
04:56:39,520 --> 04:56:43,120
and this number here and for that we're going to need these


3795
04:56:43,120 --> 04:56:47,920
brackets here and those brackets are called parameters


3796
04:56:47,920 --> 04:56:52,240
and what they mean is let me add them actually i can add a parameter for


3797
04:56:52,240 --> 04:56:55,920
number one and a parameter for number two


3798
04:56:55,920 --> 04:57:01,680
and let's actually do the entire function now when i call this calculator


3799
04:57:01,680 --> 04:57:08,000
and execute it with brackets i have to add arguments in here let's say two and


3800
04:57:08,000 --> 04:57:11,920
three if i run this now i can see five


3801
04:57:11,920 --> 04:57:15,520
which is the result of two plus three now


3802
04:57:15,520 --> 04:57:19,360
why did this happen essentially this number one here and


3803
04:57:19,360 --> 04:57:25,200
this number two are both parameters and a parameter is essentially a variable


3804
04:57:25,200 --> 04:57:30,240
that you can only use inside of the function meaning this number one here we


3805
04:57:30,240 --> 04:57:36,638
can use as a variable inside of this function same for this number two here


3806
04:57:36,638 --> 04:57:40,718
and then the value for these two parameters or these two variables inside


3807
04:57:40,718 --> 04:57:43,200
of the function come from


3808
04:57:43,200 --> 04:57:47,600
the information that we pass into the function when we call it meaning this


3809
04:57:47,600 --> 04:57:51,440
number two here is going to be the value for number one


3810
04:57:51,440 --> 04:57:56,400
and number three is going to become the value for number two let's actually do


3811
04:57:56,400 --> 04:58:00,160
this the other way around when we are calling the calculator by


3812
04:58:00,160 --> 04:58:04,560
calling the name of the function and adding brackets afterwards python is


3813
04:58:04,560 --> 04:58:07,120
looking what happens inside of the bracket


3814
04:58:07,120 --> 04:58:11,760
and right now we are adding two numbers two and three


3815
04:58:11,760 --> 04:58:16,798
and next up python looks at the actual function and the parameters and right


3816
04:58:16,798 --> 04:58:23,520
now it has number one and number two and now what happens is that python is


3817
04:58:23,520 --> 04:58:28,400
going to add the first argument which right now is this 2 it is going to


3818
04:58:28,400 --> 04:58:32,638
assign the value of this 2 to the first parameter


3819
04:58:32,638 --> 04:58:36,560
and then the second argument so this 3 here


3820
04:58:36,560 --> 04:58:41,360
is going to be passed into the second parameter and that way num1


3821
04:58:41,360 --> 04:58:46,080
becomes 2 and num2 becomes 3. and once we have that we can use those


3822
04:58:46,080 --> 04:58:50,160
two numbers like variables inside of the function


3823
04:58:50,160 --> 04:58:54,080
although one thing you do have to be aware of is that both of these


3824
04:58:54,080 --> 04:59:00,638
parameters only exist inside of the function meaning if i try to print num1


3825
04:59:00,638 --> 04:59:05,760
outside of the function i would get an error and that error is name 1 is not


3826
04:59:05,760 --> 04:59:11,760
defined because this name 1 here only exists inside of this function


3827
04:59:11,760 --> 04:59:15,600
so in the code besides coding the calculator once i could also call it


3828
04:59:15,600 --> 04:59:20,160
twice and add different numbers let's say 10 and 20


3829
04:59:20,160 --> 04:59:24,798
and i would get the result again so again this function here we can call


3830
04:59:24,798 --> 04:59:28,958
multiple times and well with that we already have the


3831
04:59:28,958 --> 04:59:33,200
basics of functions so let's do an


3832
04:59:33,200 --> 04:59:37,360
exercise and what i want you guys to do is to


3833
04:59:37,360 --> 04:59:41,920
work on this calculator and give it some more functionality it should still


3834
04:59:41,920 --> 04:59:47,760
accept num1 and num2 for two numbers you can add but besides that the user should


3835
04:59:47,760 --> 04:59:52,878
also be able to add an operation so a third parameter and i want you guys to


3836
04:59:52,878 --> 04:59:59,360
add a plus and a minus operation here so for example if the user adds let's


3837
04:59:59,360 --> 05:00:02,718
call it the better calculator


3838
05:00:02,718 --> 05:00:07,200
in here we can add one two and then we can add minus


3839
05:00:07,200 --> 05:00:11,440
or we can add plus and obviously if the user does that we


3840
05:00:11,440 --> 05:00:15,600
get either plus or minus operations


3841
05:00:17,200 --> 05:00:22,638
now first of all i have to create a new function by writing better calculator


3842
05:00:22,638 --> 05:00:27,200
the name of our function and now in here i need three parameters


3843
05:00:27,200 --> 05:00:33,600
i want num1 and num2 again and besides that i need an operation or operator


3844
05:00:33,600 --> 05:00:38,080
doesn't really matter what you call it and one important thing really quick


3845
05:00:38,080 --> 05:00:43,520
since these parameters are always relevant only to the function we can


3846
05:00:43,520 --> 05:00:49,440
reuse names here quite easily meaning to python these num1 and num2 parameters


3847
05:00:49,440 --> 05:00:55,600
and these up here have no relation whatsoever


3848
05:00:55,600 --> 05:01:00,400
so don't worry about naming here now what i want to do inside of this


3849
05:01:00,400 --> 05:01:06,400
function is to add an if statement and in here i want to check if the operation


3850
05:01:06,400 --> 05:01:10,400
is plus and if that is the case


3851
05:01:10,400 --> 05:01:15,680
my result should be num1 plus num2


3852
05:01:15,680 --> 05:01:20,798
and once i have that i want to print let's do this a bit more fancy i want to


3853
05:01:20,798 --> 05:01:26,320
add an f string and in here i want num1 plus


3854
05:01:26,320 --> 05:01:33,600
num2 is equal to the result and we can actually try this so i


3855
05:01:33,600 --> 05:01:36,718
already call the function with 1 2 and plus


3856
05:01:36,718 --> 05:01:39,760
and the plus we have in this if statement here


3857
05:01:39,760 --> 05:01:46,160
meaning if i run this i get 1 plus 2 is 3. and let me comment out these two


3858
05:01:46,160 --> 05:01:50,958
lines here so it's a bit cleaner and one important thing here the


3859
05:01:50,958 --> 05:01:56,320
indentations continue on each additional level i guess we haven't talked about


3860
05:01:56,320 --> 05:02:00,400
this too much yet but inside of this function all of the code has to be on


3861
05:02:00,400 --> 05:02:04,638
one level of indentation and now if we use more code inside of


3862
05:02:04,638 --> 05:02:09,200
this like an if statement for example we have to add the code for this if


3863
05:02:09,200 --> 05:02:12,400
statement inside of another level of indentation


3864
05:02:12,400 --> 05:02:18,160
and that way python knows that this code here belongs to the if statement and all


3865
05:02:18,160 --> 05:02:21,760
of this code here belongs to the function


3866
05:02:21,760 --> 05:02:25,680
it's really important to understand indentation early on python uses it


3867
05:02:25,680 --> 05:02:31,760
extensively to organize the code if i add a minus to this calculator


3868
05:02:31,760 --> 05:02:36,638
we get nothing because we have no if statement or any of this


3869
05:02:36,638 --> 05:02:41,280
but we can add it quite easily because i want to add an l if statement


3870
05:02:41,280 --> 05:02:45,440
and in here operation i want to check for


3871
05:02:45,440 --> 05:02:48,798
minus and now for this one


3872
05:02:48,798 --> 05:02:55,440
i can just copy all of this and now the result should be num1 minus


3873
05:02:55,440 --> 05:02:59,440
num2 and then for printing all of this there


3874
05:02:59,440 --> 05:03:04,240
should be num1 minus num2 and now if i run all of this again


3875
05:03:04,240 --> 05:03:08,638
i get 1 minus 2 is negative 1. that seems right


3876
05:03:08,638 --> 05:03:13,840
and now i can copy this line change the numbers let's say i don't know some


3877
05:03:13,840 --> 05:03:18,718
larger numbers let's add a plus here this is not how


3878
05:03:18,718 --> 05:03:22,878
you spell that let's run this now and we are getting something that looks pretty


3879
05:03:22,878 --> 05:03:26,320
good and i hope now that we have some better


3880
05:03:26,320 --> 05:03:29,280
examples you can see the value of functions


3881
05:03:29,280 --> 05:03:33,200
this is a really good way to organize your code because when we actually


3882
05:03:33,200 --> 05:03:38,718
execute the code we just have one line but this one line executes a whole bunch


3883
05:03:38,718 --> 05:03:42,000
of code and in actual programming examples you


3884
05:03:42,000 --> 05:03:45,280
might have hundreds of lines inside of one function


3885
05:03:45,280 --> 05:03:50,320
and what you see most of the time is that programmers create all of the


3886
05:03:50,320 --> 05:03:55,680
functions at the top of the file and then a bit further down the actual code


3887
05:03:55,680 --> 05:03:59,840
logic is written and that way you create some pretty good logic that is quite


3888
05:03:59,840 --> 05:04:04,718
easy to follow and you can just change some functions here if you wanted to


3889
05:04:04,718 --> 05:04:09,280
now with that we have basic functions although you can do quite a bit more


3890
05:04:09,280 --> 05:04:12,638
with functions and the next part we have to talk about


3891
05:04:12,638 --> 05:04:17,200
is arguments and parameters so let's talk about that in the next


3892
05:04:17,200 --> 05:04:21,120
section so let's talk about parameters and


3893
05:04:21,120 --> 05:04:25,200
arguments and let's do a quick recap because it's really important to


3894
05:04:25,200 --> 05:04:29,600
understand these names when we are creating a function we are


3895
05:04:29,600 --> 05:04:33,600
setting some parameters this would look like this for this function we are


3896
05:04:33,600 --> 05:04:37,760
creating parameter one and we are creating parameter two and these


3897
05:04:37,760 --> 05:04:42,240
parameters we can use like variables inside of the function so for example


3898
05:04:42,240 --> 05:04:46,718
inside of the function we could print perimeter one and parameter 2.


3899
05:04:46,718 --> 05:04:51,440
and again remember these parameters only exist inside of the function and now the


3900
05:04:51,440 --> 05:04:55,280
next important step is when we are calling the function we are adding an


3901
05:04:55,280 --> 05:05:02,000
argument to give the parameter a value which means when i call the function and


3902
05:05:02,000 --> 05:05:08,718
i pass in hello and 42 then the first argument is going to be


3903
05:05:08,718 --> 05:05:12,878
assigned as the value to the first parameter and the second argument will


3904
05:05:12,878 --> 05:05:17,120
become the value for the second parameter and after that we are using


3905
05:05:17,120 --> 05:05:21,360
those two parameters like variables inside of the function


3906
05:05:21,360 --> 05:05:27,440
and the output we would get in this example would be hello and 42


3907
05:05:27,440 --> 05:05:31,360
and the basic thing you have to take away from this is that a parameter is


3908
05:05:31,360 --> 05:05:35,680
basically a slot for an argument we are only using arguments when we are calling


3909
05:05:35,680 --> 05:05:41,760
the function here and the parameters are the slots that we add the arguments to


3910
05:05:41,760 --> 05:05:46,560
now there's one thing that we also have to talk about and that is how this


3911
05:05:46,560 --> 05:05:51,920
ordering happens so how do we assign this hello to parameter one


3912
05:05:51,920 --> 05:05:56,958
and by default arguments are being assigned to parameters via their


3913
05:05:56,958 --> 05:06:00,878
position meaning the first argument is going to be assigned to the first


3914
05:06:00,878 --> 05:06:05,680
parameter and the second argument to the second parameter and so on but there is


3915
05:06:05,680 --> 05:06:10,560
another options and that is called keyword arguments and for this one you


3916
05:06:10,560 --> 05:06:15,440
specified the specific parameter you want to add an argument to


3917
05:06:15,440 --> 05:06:19,360
and let's have a look at this in practice that should explain this the


3918
05:06:19,360 --> 05:06:23,600
best here again we have a completely empty


3919
05:06:23,600 --> 05:06:28,160
sheet of code and i want to create another function that i called test


3920
05:06:28,160 --> 05:06:32,480
function and right now i want to have argument 1


3921
05:06:32,480 --> 05:06:38,878
argument 2 argument 3 and argument 4. and then inside of the function i just


3922
05:06:38,878 --> 05:06:42,798
want to print all of these arguments so let me copy it


3923
05:06:42,798 --> 05:06:46,320
a few times three and four


3924
05:06:46,320 --> 05:06:50,560
and now when we are calling this test function


3925
05:06:50,560 --> 05:06:55,040
i can add for example one i can add hello


3926
05:06:55,040 --> 05:07:00,798
i could add true and let's say for a list i could add


3927
05:07:00,798 --> 05:07:03,120
one to


3928
05:07:03,120 --> 05:07:06,638
and test


3929
05:07:06,638 --> 05:07:11,200
you can essentially pass anything you want as an argument inside of a function


3930
05:07:11,200 --> 05:07:16,400
if i execute this function we get one hello true and a list


3931
05:07:16,400 --> 05:07:21,520
now the problem we have here when we are using position to assign this argument


3932
05:07:21,520 --> 05:07:27,680
to this parameter for example is that this can get messy really fast


3933
05:07:27,680 --> 05:07:30,638
and i think you can already see this one here


3934
05:07:30,638 --> 05:07:34,798
where it's kind of hard to tell where things belong to it's really starting to


3935
05:07:34,798 --> 05:07:39,280
look messy and for arguments still is a fairly low


3936
05:07:39,280 --> 05:07:44,878
amount imagine we had 20 arguments in here which isn't impossible so we want


3937
05:07:44,878 --> 05:07:49,760
to have something to organize this a bit better and for that we have keyword


3938
05:07:49,760 --> 05:07:54,000
arguments and what those are is well we're adding


3939
05:07:54,000 --> 05:07:57,520
the name of the parameter in this case arg1


3940
05:07:57,520 --> 05:08:02,240
and then we are assigning it a value like we are assigning values to a


3941
05:08:02,240 --> 05:08:06,560
variable this in this case i want to do for all


3942
05:08:06,560 --> 05:08:10,320
of these different arguments this would be


3943
05:08:10,320 --> 05:08:18,000
argument 3 and this would be argument 4. and if i run this now we can see the


3944
05:08:18,000 --> 05:08:21,920
very same result although here when we're using keyword


3945
05:08:21,920 --> 05:08:26,718
arguments python does not care about the order for example


3946
05:08:26,718 --> 05:08:30,560
i could assign argument 4 here and at the end


3947
05:08:30,560 --> 05:08:36,320
i assign argument 1. if i run this now the first item so argument 1 that we are


3948
05:08:36,320 --> 05:08:42,958
printing here is going to be this list and this would then be a clearer way to


3949
05:08:42,958 --> 05:08:46,000
call your function what you can also do


3950
05:08:46,000 --> 05:08:52,718
is to add this over multiple lines so i can do something like this


3951
05:08:52,958 --> 05:08:57,920
and call all of this again and it would still work python here is quite smart


3952
05:08:57,920 --> 05:09:01,120
and it understands that all of this is one function


3953
05:09:01,120 --> 05:09:05,600
and this one here is actually fairly readable so even if we had more


3954
05:09:05,600 --> 05:09:09,680
arguments this would be workable quite easily


3955
05:09:09,680 --> 05:09:14,480
now what you can also do is combine positional and keyword arguments


3956
05:09:14,480 --> 05:09:19,520
although you do have to be careful here and let me do one example


3957
05:09:19,520 --> 05:09:22,878
let's say i want to assign argument 1 argument 2


3958
05:09:22,878 --> 05:09:26,400
and argument 3 via keyword arguments


3959
05:09:26,400 --> 05:09:29,840
and then the final argument should just be a


3960
05:09:29,840 --> 05:09:33,680
positional argument if i run the code now python is going to


3961
05:09:33,680 --> 05:09:37,760
complain and the complaint here is positional


3962
05:09:37,760 --> 05:09:43,360
argument follows keyword argument and this is a general rule you have to


3963
05:09:43,360 --> 05:09:49,840
follow that positional arguments always have to come before keyboard arguments


3964
05:09:49,840 --> 05:09:54,638
meaning this positional argument here would have to be before all of the


3965
05:09:54,638 --> 05:09:58,798
keyword arguments let's say now i only want to have


3966
05:09:58,798 --> 05:10:02,560
argument 1 as a positional argument and all of the


3967
05:10:02,560 --> 05:10:08,958
other arguments this one is arg4 i want to have as keyword arguments if i


3968
05:10:08,958 --> 05:10:12,718
run the code now this is working just fine


3969
05:10:12,718 --> 05:10:18,400
and the basic reason why we have this is let's say i want to assign this argument


3970
05:10:18,400 --> 05:10:23,120
here via position and right now this would be the fourth


3971
05:10:23,120 --> 05:10:28,400
argument because this is the fourth item when we are calling the function


3972
05:10:28,400 --> 05:10:30,878
problem is if i


3973
05:10:30,878 --> 05:10:35,760
change this argument to to argument four then


3974
05:10:35,760 --> 05:10:38,638
this keyword argument would also be


3975
05:10:38,638 --> 05:10:44,240
referencing this argument for here and as a consequence python would get


3976
05:10:44,240 --> 05:10:48,160
confused and if we have positional arguments


3977
05:10:48,160 --> 05:10:52,400
before the keyword arguments this is somewhat mitigated


3978
05:10:52,400 --> 05:10:58,000
although you could still mess this up for example if this first argument here


3979
05:10:58,000 --> 05:11:03,520
is argument 1 and then the first keyword argument also references this arg1 and i


3980
05:11:03,520 --> 05:11:07,200
run the code we are getting an error the test


3981
05:11:07,200 --> 05:11:13,040
function got multiple values for arc 1. so you do have to be careful here but


3982
05:11:13,040 --> 05:11:17,280
it's generally quite doable now with that we have positional and


3983
05:11:17,280 --> 05:11:22,480
keyword arguments there's one more concept that i do want to cover and that


3984
05:11:22,480 --> 05:11:27,120
is default arguments and the concept here is really simple


3985
05:11:27,120 --> 05:11:32,400
let's say for this argument 4 if we don't get a value i want to assign a


3986
05:11:32,400 --> 05:11:37,680
default value and this i do by simply adding an equal sign and now adding a


3987
05:11:37,680 --> 05:11:44,400
value let's say for argument 4 i want argument 4. if i have this set up here


3988
05:11:44,400 --> 05:11:50,560
i can get rid theoretically of this argument 4 comma function and now


3989
05:11:50,560 --> 05:11:56,080
argument 4 is going to be argument for here or the parameter value is going to


3990
05:11:56,080 --> 05:12:00,480
be this string and what you could even do if you really


3991
05:12:00,480 --> 05:12:04,080
wanted to you could assign a default argument


3992
05:12:04,080 --> 05:12:08,798
to all of your parameters that would look like this i hope i


3993
05:12:08,798 --> 05:12:12,320
didn't forget anything and now you could call the function


3994
05:12:12,320 --> 05:12:17,600
without a single argument and it would still work just fine


3995
05:12:17,600 --> 05:12:22,160
although this again becomes kind of hard to read but sometimes this can be quite


3996
05:12:22,160 --> 05:12:27,040
useful now let's do an exercise


3997
05:12:27,040 --> 05:12:33,040
and let me copy in what i want you guys to do it's getting a bit long


3998
05:12:33,040 --> 05:12:37,840
so i want you guys to create a greeter function with free arguments oh well


3999
05:12:37,840 --> 05:12:44,160
free parameters we have person greet and weekday person and greed should have


4000
05:12:44,160 --> 05:12:49,600
default arguments person for the person parameter and hello for greet


4001
05:12:49,600 --> 05:12:54,480
and inside of the function use an f string to print the greet and the person


4002
05:12:54,480 --> 05:12:58,798
and also print the weekday and when you're calling the function use


4003
05:12:58,798 --> 05:13:02,958
at least one positional argument and one keyword argument


4004
05:13:02,958 --> 05:13:07,760
and pause the video now and implement all of this yourself


4005
05:13:09,040 --> 05:13:14,160
i want to create my function all the way at the top below my test function


4006
05:13:14,160 --> 05:13:20,560
and the function name is greater and in here i want three parameters let


4007
05:13:20,560 --> 05:13:25,200
me actually fix this one three parameters


4008
05:13:25,200 --> 05:13:30,160
i want to have person i want to have greed and i want to have the weekday


4009
05:13:30,160 --> 05:13:34,080
and with that we have covered the entire first line


4010
05:13:34,080 --> 05:13:39,920
now next up for person and greed we want to have default arguments for person


4011
05:13:39,920 --> 05:13:44,320
this should be person and for greed


4012
05:13:44,320 --> 05:13:47,920
this should be hello


4013
05:13:47,920 --> 05:13:52,480
and now inside of the function i want to print


4014
05:13:52,480 --> 05:13:56,958
an f string and that is the third line of the exercise


4015
05:13:56,958 --> 05:14:00,878
and in here i want to print


4016
05:14:00,878 --> 05:14:06,080
the person and i want to print the greet and i


4017
05:14:06,080 --> 05:14:12,718
guess on top of that we can print another f string and in here let's say


4018
05:14:12,718 --> 05:14:16,958
it is the weekday


4019
05:14:16,958 --> 05:14:22,320
and now with that we only have to call the function and let me comment out the


4020
05:14:22,320 --> 05:14:25,600
test function and instead


4021
05:14:25,600 --> 05:14:31,760
i want to call my greed turf and now we need one positional and one


4022
05:14:31,760 --> 05:14:35,360
keyword argument let's say the first argument has to be


4023
05:14:35,360 --> 05:14:40,560
positional because remember position arguments come before keyword arguments


4024
05:14:40,560 --> 05:14:46,480
and let's say the person then is going to be bob for me now next up we need a


4025
05:14:46,480 --> 05:14:51,040
keyword argument and for this one i want to go with weekday


4026
05:14:51,040 --> 05:14:57,920
and let's say it's tuesday and now since greed has a default value


4027
05:14:57,920 --> 05:15:03,760
this should be all we need so if i run this we are getting an error


4028
05:15:03,760 --> 05:15:08,400
and the error here is that non-default argument follows a default argument


4029
05:15:08,400 --> 05:15:13,280
meaning python is unhappy that we have a default argument a default argument and


4030
05:15:13,280 --> 05:15:17,120
then no default argument and this again can cause confusion in


4031
05:15:17,120 --> 05:15:20,560
terms of what argument we are assigning to what


4032
05:15:20,560 --> 05:15:24,878
parameter and i guess in our case to fix it


4033
05:15:24,878 --> 05:15:30,638
for the weekday we can also assign a default argument let's say monday is our


4034
05:15:30,638 --> 05:15:34,638
default weekday so now if i run this this function is


4035
05:15:34,638 --> 05:15:40,560
working just fine and i can assign arguments via keyword


4036
05:15:40,560 --> 05:15:47,120
arguments so i have person weekday and for greed let's say i can say


4037
05:15:47,120 --> 05:15:50,560
welcome this would also work


4038
05:15:50,560 --> 05:15:57,200
and i can also use positional arguments to assign the values like so


4039
05:15:57,200 --> 05:16:02,400
and if i run this we would get something slightly weird because now we are


4040
05:16:02,400 --> 05:16:07,680
assigning this tuesday here to this greet so you do have to be careful


4041
05:16:07,680 --> 05:16:13,600
but at the very least this is working and i guess let me put this exercise


4042
05:16:13,600 --> 05:16:16,798
on top of the greeter so it's a bit easier to read


4043
05:16:16,798 --> 05:16:22,000
and right with that we have some default arguments and keyword and positional


4044
05:16:22,000 --> 05:16:24,958
arguments the main thing you should be taking away


4045
05:16:24,958 --> 05:16:28,878
from this video is how you assign arguments to parameters understanding


4046
05:16:28,878 --> 05:16:32,320
that is really important to use functions


4047
05:16:32,320 --> 05:16:37,280
we can actually do some more things with arguments so let's put this in the next


4048
05:16:37,280 --> 05:16:42,560
section okay so let's talk a bit more about parameters and arguments and the


4049
05:16:42,560 --> 05:16:47,440
main question we have to answer for this part is what if you don't know the


4050
05:16:47,440 --> 05:16:51,200
number of arguments can you still make a function


4051
05:16:51,200 --> 05:16:55,360
and the answer for that is absolutely yes although we do have to learn some


4052
05:16:55,360 --> 05:16:58,878
new things and let's do this trading code


4053
05:16:58,878 --> 05:17:04,160
here i have a completely empty file and i want to create a new function that i


4054
05:17:04,160 --> 05:17:08,560
want to call print all and this function


4055
05:17:08,560 --> 05:17:11,840
should take an unlimited number of arguments


4056
05:17:11,840 --> 05:17:17,440
and then inside of the function i want to print all arguments


4057
05:17:17,440 --> 05:17:23,120
but the problem is i don't know how many arguments i am going to get now one


4058
05:17:23,120 --> 05:17:27,120
thing that you might have already figured out you could add some parameter


4059
05:17:27,120 --> 05:17:31,280
called arguments and this arguments would be a list


4060
05:17:31,280 --> 05:17:36,638
meaning if i run print all and add a list in here with let's say


4061
05:17:36,638 --> 05:17:43,440
one two three four five and hello now inside of the function i could run


4062
05:17:43,440 --> 05:17:47,120
for argument that is not how you spell that


4063
05:17:47,120 --> 05:17:51,958
in arguments and i want to print the


4064
05:17:51,958 --> 05:17:56,560
argument and this is indeed working


4065
05:17:56,560 --> 05:18:01,440
via the list we can basically add as many arguments as we want


4066
05:18:01,440 --> 05:18:05,440
and this would still be working just fine there's no limit on this


4067
05:18:05,440 --> 05:18:09,520
although this is kind of annoying to work with


4068
05:18:09,520 --> 05:18:16,080
and because of that python has a special way to work with unlimited arguments and


4069
05:18:16,080 --> 05:18:22,718
this is called let me add a comment here it is called list unpacking


4070
05:18:22,718 --> 05:18:26,560
and how this works is we are adding a star


4071
05:18:26,560 --> 05:18:30,320
before the parameter that we want to unpack


4072
05:18:30,320 --> 05:18:35,920
and now what i can do when i'm calling the function i can remove this list here


4073
05:18:35,920 --> 05:18:40,798
and just have unlimited values and if i run this now we are getting the same


4074
05:18:40,798 --> 05:18:45,280
result so what is happening here and i think


4075
05:18:45,280 --> 05:18:50,320
the best way to understand this is just to print what we get so let me print the


4076
05:18:50,320 --> 05:18:53,680
arguments and run the code again


4077
05:18:53,680 --> 05:18:58,638
and now you can see we have a tuple with all of these values


4078
05:18:58,638 --> 05:19:02,798
here and then later on inside of the function we are just looping over this


4079
05:19:02,798 --> 05:19:08,240
tuple and printing each item inside of it that's all that's happening in here


4080
05:19:08,240 --> 05:19:13,840
and that is essentially all the unpacking operator does it looks at all


4081
05:19:13,840 --> 05:19:19,200
of the arguments we potentially have and then return all of them as a tuple and


4082
05:19:19,200 --> 05:19:22,718
we can use it along with other parameters


4083
05:19:22,718 --> 05:19:27,440
for example if i added another parameter here let's call it first


4084
05:19:27,440 --> 05:19:32,798
i want to print my arguments and i want to print first and let's see what we get


4085
05:19:32,798 --> 05:19:36,798
we get one and then we get all of the other items


4086
05:19:36,798 --> 05:19:39,520
meaning what happened in


4087
05:19:39,520 --> 05:19:44,878
this function call here python sees that this one here


4088
05:19:44,878 --> 05:19:50,080
is the first position argument and we have one parameter so python is putting


4089
05:19:50,080 --> 05:19:54,320
this one in there and then it sees we have


4090
05:19:54,320 --> 05:20:00,320
a list unpacking arguments and we have a ton of arguments here so all of these


4091
05:20:00,320 --> 05:20:04,240
are being stored in this arguments as a tuple


4092
05:20:04,240 --> 05:20:08,400
and once we have that we can work with them inside of the function


4093
05:20:08,400 --> 05:20:14,160
and this would also work with a parameter after the list


4094
05:20:14,160 --> 05:20:20,320
unpacking although for this one here we would need keyword arguments so let


4095
05:20:20,320 --> 05:20:24,240
me print the extra parameter here the one that


4096
05:20:24,240 --> 05:20:28,080
comes after the list unpacking if i run this now


4097
05:20:28,080 --> 05:20:33,440
we have print all is missing one required keyword only argument extra


4098
05:20:33,440 --> 05:20:39,280
and python here is quite specific we want a keyboard argument for extra


4099
05:20:39,280 --> 05:20:44,480
and this extra here since it comes after the unpacking has to be a keyboard


4100
05:20:44,480 --> 05:20:47,600
argument the reason for that is that python by


4101
05:20:47,600 --> 05:20:52,000
default doesn't know when this list unpacking ends and when this parameter


4102
05:20:52,000 --> 05:20:56,480
starts but well we can fix that quite easily


4103
05:20:56,480 --> 05:21:01,760
let me remove the error message i can assign extra another value let's


4104
05:21:01,760 --> 05:21:07,200
say 12 and remove this 12 here if i run this now this would be working again


4105
05:21:07,200 --> 05:21:12,320
and here are the values we are getting and with that we have simple list


4106
05:21:12,320 --> 05:21:15,760
unpacking and now we can essentially add unlimited


4107
05:21:15,760 --> 05:21:19,280
numbers of arguments inside of our functions


4108
05:21:19,280 --> 05:21:22,878
now this you can actually make even more powerful


4109
05:21:22,878 --> 05:21:26,798
and how this would be working is with


4110
05:21:26,798 --> 05:21:31,760
keyword unpacking and for that let's create another


4111
05:21:31,760 --> 05:21:37,440
function and this let's call it print more and here i again want to have my


4112
05:21:37,440 --> 05:21:41,200
arguments and those i want to unpack


4113
05:21:41,200 --> 05:21:46,400
but now i want to unpack them again and those i want to unpack but now i


4114
05:21:46,400 --> 05:21:49,680
want to use two stars and you see in a second why


4115
05:21:49,680 --> 05:21:54,718
and i guess inside of this function let's just print the arguments of what


4116
05:21:54,718 --> 05:21:59,280
we are going to get and let me comment out print all


4117
05:21:59,280 --> 05:22:06,080
and let's call print more what this double star arguments does is it looks


4118
05:22:06,080 --> 05:22:11,280
for keyword arguments and then unpacks all of them inside of a dictionary


4119
05:22:11,280 --> 05:22:19,280
so we have arg1 could be one then we have arc 2 is going to be test


4120
05:22:19,280 --> 05:22:26,480
and finally we have arg3 is going to be let's say a list with 1 2 and 3.


4121
05:22:26,480 --> 05:22:31,120
if i run this now we get a dictionary with three key value


4122
05:22:31,120 --> 05:22:34,878
pairs we have arc one with the value one arc


4123
05:22:34,878 --> 05:22:40,000
two with test and arc three with a list and those are the three arguments we


4124
05:22:40,000 --> 05:22:45,200
passed in here or keyword arguments to be more specific and we're getting this


4125
05:22:45,200 --> 05:22:48,558
dictionary because of this double star here


4126
05:22:48,558 --> 05:22:53,360
now so far we haven't really learned how to work with dictionaries so we don't


4127
05:22:53,360 --> 05:22:56,400
really know how to use this dictionary but we're going to learn about that in


4128
05:22:56,400 --> 05:23:00,798
the next major section so for now don't worry too much about this but we are


4129
05:23:00,798 --> 05:23:04,400
going to work with this quite a bit more later on when we learn more about


4130
05:23:04,400 --> 05:23:09,280
dictionaries for now all you have to understand is if we're using double star


4131
05:23:09,280 --> 05:23:15,280
and arguments then we get all of our keyword arguments as a dictionary


4132
05:23:15,280 --> 05:23:20,000
returned in our function and what you can also do finally is


4133
05:23:20,000 --> 05:23:24,638
combine these arguments or the list unpacking arguments and the keyword


4134
05:23:24,638 --> 05:23:27,360
unpacking arguments inside of one function


4135
05:23:27,360 --> 05:23:32,400
and for that let's create a final function let's call this one print


4136
05:23:32,400 --> 05:23:34,638
even more


4137
05:23:34,638 --> 05:23:38,878
and in here i want to have my arguments and i want


4138
05:23:38,878 --> 05:23:44,798
to have my keyword arguments and these arcs and quarks is what you


4139
05:23:44,798 --> 05:23:49,760
see quite often it's just a shorthand for arguments and keyword arguments


4140
05:23:49,760 --> 05:23:54,480
and now inside of this function we could basically pass in whatever we want it


4141
05:23:54,480 --> 05:23:57,600
would all be captured by these two parameters


4142
05:23:57,600 --> 05:24:02,718
let me print the arcs and the quarks


4143
05:24:02,718 --> 05:24:08,878
and now i can comment out this function call and


4144
05:24:08,878 --> 05:24:14,558
add print even more and now in here i can just add whatever


4145
05:24:14,558 --> 05:24:18,718
i want let me add hello and


4146
05:24:18,718 --> 05:24:23,040
true and then besides that i can also add i


4147
05:24:23,040 --> 05:24:28,080
know test is going to be one test two is going to be five whatever


4148
05:24:28,080 --> 05:24:33,600
you want in here and now if i execute the code we get a tuple from the arcs


4149
05:24:33,600 --> 05:24:37,360
parameter and the dictionary from the quarks parameter


4150
05:24:37,360 --> 05:24:40,718
and even if you didn't add anything in here


4151
05:24:40,718 --> 05:24:44,000
so if i didn't have any keyword arguments


4152
05:24:44,000 --> 05:24:48,400
it would still work i would just get an empty dictionary and that means if you


4153
05:24:48,400 --> 05:24:52,558
have this kind of setup as long as you add any kind of parameter that is valid


4154
05:24:52,558 --> 05:24:56,878
python code into the function you are going to execute that function or at


4155
05:24:56,878 --> 05:25:00,240
least you're not going to get an error in this stage of the code


4156
05:25:00,240 --> 05:25:04,718
and well with that we have covered some really powerful stuff


4157
05:25:04,718 --> 05:25:10,400
and let's practice it actually and what i want you guys to do let me add an


4158
05:25:10,400 --> 05:25:15,040
exercise down here and what i want you guys to do let me


4159
05:25:15,040 --> 05:25:20,718
paste it in here i want you guys to create a calculator function that prints


4160
05:25:20,718 --> 05:25:24,638
the sum of an unlimited number of numbers or what a limited amount of


4161
05:25:24,638 --> 05:25:31,480
numbers so pause the video now and try to figure this one out yourself


4162
05:25:32,000 --> 05:25:37,440
all right let me paste this exercise here so we have all of our function at


4163
05:25:37,440 --> 05:25:41,120
the top of the code and i want to create a new function that


4164
05:25:41,120 --> 05:25:46,240
i'm going to call calculator and in here we want to have an unlimited


4165
05:25:46,240 --> 05:25:51,680
number of numbers so i want the tuple or the list unpacking operator and let's


4166
05:25:51,680 --> 05:25:56,558
call it args and now essentially what i am going to


4167
05:25:56,558 --> 05:26:02,480
get in here is a list let's actually print it so i want to print my arguments


4168
05:26:02,480 --> 05:26:06,240
and now let me comment out this function here


4169
05:26:06,240 --> 05:26:12,320
and i want to have my calculator and add a random amount of numbers


4170
05:26:12,320 --> 05:26:15,920
if i run this now we are getting a tuple with the numbers


4171
05:26:15,920 --> 05:26:19,760
we are passing into it that's a really good start


4172
05:26:19,760 --> 05:26:23,920
what we have to figure out now is to get the sum of all of these numbers


4173
05:26:23,920 --> 05:26:29,840
and this we can actually do quite easily but let me do it over two lines so it's


4174
05:26:29,840 --> 05:26:33,360
a bit easier to read i first of all want to create a new


4175
05:26:33,360 --> 05:26:39,040
variable let's call this one the result and the result is going to be the sum of


4176
05:26:39,040 --> 05:26:43,360
my arguments remember here this argument or these


4177
05:26:43,360 --> 05:26:49,040
arcs is going to be a tuple and tuples can be used with the sum function and


4178
05:26:49,040 --> 05:26:54,240
the sum function is just going to return the sum of all the numbers inside of


4179
05:26:54,240 --> 05:27:00,480
that list this list here in our case and once i have that i want to print the


4180
05:27:00,480 --> 05:27:04,320
result so now if i run this and we are getting


4181
05:27:04,320 --> 05:27:08,240
21 this seems accurate if you wanted to be more efficient with


4182
05:27:08,240 --> 05:27:11,760
your code you wouldn't actually need this result here


4183
05:27:11,760 --> 05:27:17,120
so you could just print some of the arguments and not the result


4184
05:27:17,120 --> 05:27:22,240
at all let me comment it out this one would also work just fine


4185
05:27:22,240 --> 05:27:25,920
although the earlier one was a bit easier to read so let's stick with this


4186
05:27:25,920 --> 05:27:28,958
one and with that we have a function that


4187
05:27:28,958 --> 05:27:33,760
uses list unpacking alrighty welcome back in this part we


4188
05:27:33,760 --> 05:27:36,798
are going to talk about functions and scope


4189
05:27:36,798 --> 05:27:41,680
which can be a really annoying but very important topic


4190
05:27:41,680 --> 05:27:46,320
basically what it means is that variables created inside of a function


4191
05:27:46,320 --> 05:27:50,638
are only available inside of that function


4192
05:27:50,638 --> 05:27:55,840
and this is called a local scope and if we are creating variables outside


4193
05:27:55,840 --> 05:28:00,480
of a function we are creating a variable in the global scope


4194
05:28:00,480 --> 05:28:05,120
and the problem a lot of beginners have is to combine the local and the global


4195
05:28:05,120 --> 05:28:09,760
scope and i think all of this is going to sound a bit cryptic so let's do this


4196
05:28:09,760 --> 05:28:14,718
in a bit more of a practical way here we have a completely empty python file and


4197
05:28:14,718 --> 05:28:19,360
i want to create a variable i called a and assigned a value 10. it doesn't


4198
05:28:19,360 --> 05:28:23,040
really matter what it is and after that i want to create a


4199
05:28:23,040 --> 05:28:29,360
function let's call it test func we don't need any parameters and in here


4200
05:28:29,360 --> 05:28:32,080
i want to print a


4201
05:28:32,080 --> 05:28:38,480
and this is going to work if i print test func i can run this we get 10 all


4202
05:28:38,480 --> 05:28:43,520
of this is working perfectly fine and there are no problems whatsoever


4203
05:28:43,520 --> 05:28:47,680
however now we can do something weird


4204
05:28:47,680 --> 05:28:53,840
let's say i want to get a and add some kind of value to it let's say 2.


4205
05:28:53,840 --> 05:28:59,680
if i now run the code we are getting an error and the error we get is a local


4206
05:28:59,680 --> 05:29:05,360
variable a was referenced before the assignment


4207
05:29:05,360 --> 05:29:09,280
now to understand that we have to understand the local and the global


4208
05:29:09,280 --> 05:29:14,000
scope and this a here is a global variable


4209
05:29:14,000 --> 05:29:18,638
and we know it is a global variable because it was not created inside of a


4210
05:29:18,638 --> 05:29:25,360
function it is just there by itself however this test function has a local


4211
05:29:25,360 --> 05:29:29,200
scope and the reason why we got an error is


4212
05:29:29,200 --> 05:29:34,878
because when we are creating a variable like this a inside of the function


4213
05:29:34,878 --> 05:29:41,200
we are creating a new variable inside of the scope of this function only here


4214
05:29:41,200 --> 05:29:45,840
and since we are now adding a value to it when we are creating it python gets


4215
05:29:45,840 --> 05:29:50,878
confused because there is no original value at least according to python what


4216
05:29:50,878 --> 05:29:56,240
we could be doing is set this a just to 2 and now run this again and this is


4217
05:29:56,240 --> 05:30:01,360
going to work and now this might be even more confusing because now we have an a


4218
05:30:01,360 --> 05:30:06,718
inside of the function and an a outside of it and to python


4219
05:30:06,718 --> 05:30:09,840
those two are completely separate variables there


4220
05:30:09,840 --> 05:30:14,240
are no connections for python and the reason why there is no connection is


4221
05:30:14,240 --> 05:30:20,320
again because this is a local scope of the test function and all the variables


4222
05:30:20,320 --> 05:30:24,878
we are creating inside of it only exist inside of this function


4223
05:30:24,878 --> 05:30:29,680
meaning what i could also do now is create another function let's call it


4224
05:30:29,680 --> 05:30:32,480
test func 2


4225
05:30:32,480 --> 05:30:39,280
and in here again i can create variable a again let's give it another value 200


4226
05:30:39,280 --> 05:30:45,280
and print a again and now i can run test func 2


4227
05:30:45,280 --> 05:30:51,840
and run all of this and now the value for this a here


4228
05:30:51,840 --> 05:30:56,400
is going to be 200 the one we are getting down here


4229
05:30:56,400 --> 05:31:00,320
and again the reason why this works is that each of these functions have their


4230
05:31:00,320 --> 05:31:05,040
own local scope and on top of that we have this global


4231
05:31:05,040 --> 05:31:09,360
variable here and understanding scope does take some


4232
05:31:09,360 --> 05:31:13,600
time but there's one really important thing i do want to cover


4233
05:31:13,600 --> 05:31:18,958
and that is that functions are supposed to be separate from the rest of the code


4234
05:31:18,958 --> 05:31:22,558
this scope isn't a necessity it's by design


4235
05:31:22,558 --> 05:31:28,320
and the reason is that once the code becomes more complex it is really easy


4236
05:31:28,320 --> 05:31:33,520
to run out of variable names which can be very annoying for example for the car


4237
05:31:33,520 --> 05:31:37,360
we have we could have one function for the battery and one function for the


4238
05:31:37,360 --> 05:31:42,080
tank and both might have some kind of capacity variable


4239
05:31:42,080 --> 05:31:47,840
and because of the local scope this is perfectly fine we can reuse that word


4240
05:31:47,840 --> 05:31:51,600
if we didn't have functions we would have to play around with that like


4241
05:31:51,600 --> 05:31:56,638
capacity battery capacity tank but then if we have more more capacities this


4242
05:31:56,638 --> 05:32:01,520
gets really annoying and this is one of the main reasons for scope inside of


4243
05:32:01,520 --> 05:32:06,080
functions that we want functions to be separate from each other so we can focus


4244
05:32:06,080 --> 05:32:10,878
on one function at the time so let me put it in red local scopes


4245
05:32:10,878 --> 05:32:15,840
inside of a function help us keep things organized especially later on when we


4246
05:32:15,840 --> 05:32:19,920
are writing more complex code this is becoming incredibly important and


4247
05:32:19,920 --> 05:32:24,000
incredibly useful as well but right still when you get started


4248
05:32:24,000 --> 05:32:29,120
with this it's very very annoying so let's talk about the rules of scope they


4249
05:32:29,120 --> 05:32:33,440
are not that complicated the first one is that every function has


4250
05:32:33,440 --> 05:32:38,080
its own local scope and every local scope is separate


4251
05:32:38,080 --> 05:32:42,958
and let's play around with that one and this we have actually already seen


4252
05:32:42,958 --> 05:32:49,200
in practice we have test func here and testfund2 and both of those have the


4253
05:32:49,200 --> 05:32:54,718
variable a inside of them and this variable a is completely separate for


4254
05:32:54,718 --> 05:32:58,240
each function and i guess just to keep with the


4255
05:32:58,240 --> 05:33:02,480
example from earlier this could be something like capacity


4256
05:33:02,480 --> 05:33:10,080
and i could print that capacity as well and we will get different numbers


4257
05:33:10,080 --> 05:33:15,360
and i am probably repeating myself but this capacity here for example only


4258
05:33:15,360 --> 05:33:22,320
exists inside of this function here and this also means i couldn't print


4259
05:33:22,320 --> 05:33:25,920
capacity or well i could but python would give me an error that name


4260
05:33:25,920 --> 05:33:30,878
capacity is not defined and the problem here


4261
05:33:30,878 --> 05:33:36,878
is that this capacity we are trying to print in the global scope


4262
05:33:36,878 --> 05:33:42,000
but capacity does not exist in the global scope so i can't do that i can


4263
05:33:42,000 --> 05:33:46,638
only print capacity inside of the local scope of the test function because in


4264
05:33:46,638 --> 05:33:52,638
there it does exist and well that is the first rule of scope


4265
05:33:52,638 --> 05:33:57,680
inside of a function for number two we have global variables


4266
05:33:57,680 --> 05:34:01,840
and those can be accessed in the local scope but they cannot be changed or


4267
05:34:01,840 --> 05:34:06,718
created at least not by default and let's have a look at this one and


4268
05:34:06,718 --> 05:34:10,558
practice a bit more this one is really important


4269
05:34:10,558 --> 05:34:15,520
and let me comment out all of this so we have an easier example


4270
05:34:15,520 --> 05:34:19,200
and this is actually what we have seen earlier so let me run


4271
05:34:19,200 --> 05:34:24,558
test func let's call it test function to keep things a bit more organized


4272
05:34:24,558 --> 05:34:31,280
when we started this part i just printed a and this did work meaning now


4273
05:34:31,280 --> 05:34:36,080
if i run test func 3 we get 10.


4274
05:34:36,080 --> 05:34:40,558
and what happened here is we are creating a variable inside of the global


4275
05:34:40,558 --> 05:34:45,840
scope and then inside of the local scope of the test function we are printing


4276
05:34:45,840 --> 05:34:50,558
this and if we are running all of this we don't get an error and we are


4277
05:34:50,558 --> 05:34:55,120
printing the global variable this is working just fine


4278
05:34:55,120 --> 05:35:00,080
and the reason why it is working is because we can access global variables


4279
05:35:00,080 --> 05:35:04,638
inside of a function however what we cannot do


4280
05:35:04,638 --> 05:35:09,040
is update the value meaning we couldn't do something like a


4281
05:35:09,040 --> 05:35:13,520
plus equals two because then we are updating the value which python doesn't


4282
05:35:13,520 --> 05:35:17,440
like now with that we have the problem of


4283
05:35:17,440 --> 05:35:21,440
scope the question now is how can we solve it


4284
05:35:21,440 --> 05:35:27,600
and for that we can use parameters global and return


4285
05:35:27,600 --> 05:35:32,320
and parameters we have already seen it's just normal function parameters and


4286
05:35:32,320 --> 05:35:37,520
those allow us to pass global variables inside of the local scope of a function


4287
05:35:37,520 --> 05:35:42,638
the more interesting ones are global and return


4288
05:35:42,638 --> 05:35:47,520
and i do want to emphasize straight away that global is a very easy solution to


4289
05:35:47,520 --> 05:35:52,000
scope but not a good one you will see in a second why but the one you want to use


4290
05:35:52,000 --> 05:35:57,280
the most is return this one is much better and global you generally want to


4291
05:35:57,280 --> 05:35:59,760
avoid but let's actually have a look at how


4292
05:35:59,760 --> 05:36:04,000
they work the first way to overcome the local


4293
05:36:04,000 --> 05:36:09,760
scope of a function is by declaring a variable to be global and this you do by


4294
05:36:09,760 --> 05:36:14,080
just typing global and then the name of the variable you want to declare as


4295
05:36:14,080 --> 05:36:19,520
global in my case a and now if i run this this is working


4296
05:36:19,520 --> 05:36:22,878
just fine the reason why it is working just fine


4297
05:36:22,878 --> 05:36:27,360
is because when python now sees this a plus equal to


4298
05:36:27,360 --> 05:36:31,440
we are telling it that this a is a global variable


4299
05:36:31,440 --> 05:36:36,160
which means python is now looking in our global scope for the variable a


4300
05:36:36,160 --> 05:36:41,440
and then we're using that value and if you really wanted to


4301
05:36:41,440 --> 05:36:46,000
you could declare global all of your local variables inside of every function


4302
05:36:46,000 --> 05:36:49,840
you ever write and then never worry about scope ever again


4303
05:36:49,840 --> 05:36:55,040
which i guess would be possible but a really bad solution you are supposed to


4304
05:36:55,040 --> 05:36:59,280
be using a local scope and keep variables inside of that


4305
05:36:59,280 --> 05:37:04,718
which is why global is not really used that often and when it's used it's not


4306
05:37:04,718 --> 05:37:09,040
really looked at favorably upon you generally want to avoid it


4307
05:37:09,040 --> 05:37:12,878
a better way would be using parameters and return


4308
05:37:12,878 --> 05:37:17,840
and parameters we have already seen so for this test function we can just


4309
05:37:17,840 --> 05:37:22,320
create a parameter let's call it a as well and now when i'm calling this test


4310
05:37:22,320 --> 05:37:28,160
function free i want to pass in my and if i run this now we are getting 12


4311
05:37:28,160 --> 05:37:32,160
again meaning if you want to update a global


4312
05:37:32,160 --> 05:37:37,920
variable inside of a function you would want to use a parameter


4313
05:37:37,920 --> 05:37:41,760
that is generally how you get global variables inside of a function and then


4314
05:37:41,760 --> 05:37:45,600
work with them and to get values outside of a function


4315
05:37:45,600 --> 05:37:51,760
you usually want to use the return value and in my case for this function i want


4316
05:37:51,760 --> 05:37:57,760
to return the value a and this return is the same return that


4317
05:37:57,760 --> 05:38:01,600
basically anything in python does it's just a custom implementation of that


4318
05:38:01,600 --> 05:38:04,638
principle meaning if i have that


4319
05:38:04,638 --> 05:38:09,360
i can comment out my print a and now when i run this function it is going to


4320
05:38:09,360 --> 05:38:15,760
return the value of this a i could for example print it and if i


4321
05:38:15,760 --> 05:38:20,718
run this i get 12 again or 10 plus 2.


4322
05:38:20,718 --> 05:38:23,200
and just to go over what's happening here


4323
05:38:23,200 --> 05:38:28,240
i first declare a 10 inside of the variable a inside of the global scope


4324
05:38:28,240 --> 05:38:33,760
then this a i pass into the function so we have a parameter inside of the


4325
05:38:33,760 --> 05:38:37,520
function that is local to this function only


4326
05:38:37,520 --> 05:38:41,680
and to this value we are adding the integer 2.


4327
05:38:41,680 --> 05:38:47,600
and after we are doing this we are returning this new value


4328
05:38:47,600 --> 05:38:52,480
and then this value is being printed with the print function and we are


4329
05:38:52,480 --> 05:38:57,280
getting 12 and all of this is working really well


4330
05:38:57,280 --> 05:39:02,320
and if you wanted to update this value here you could even do something like a


4331
05:39:02,320 --> 05:39:07,680
equals the test function with a and now we could print a


4332
05:39:07,680 --> 05:39:12,080
and get the same result and this is then how you would actually


4333
05:39:12,080 --> 05:39:17,120
want to work with functions that you're using parameters and a return statement


4334
05:39:17,120 --> 05:39:20,878
to keep everything inside of the function organized and separate from the


4335
05:39:20,878 --> 05:39:25,120
rest of the code and especially for beginners this is


4336
05:39:25,120 --> 05:39:29,280
generally something kind of confusing so i guess when you are just getting


4337
05:39:29,280 --> 05:39:33,840
started using global can be okay sometimes but you generally want to


4338
05:39:33,840 --> 05:39:37,120
rather use return it is a much cleaner way


4339
05:39:37,120 --> 05:39:41,920
all right let's do an exercise on all of this and let's see how well you


4340
05:39:41,920 --> 05:39:45,520
understand it and basically what i want you guys to do


4341
05:39:45,520 --> 05:39:50,400
let me copy all of it i want you guys to create two global


4342
05:39:50,400 --> 05:39:54,718
variables called multiplier and has calculated


4343
05:39:54,718 --> 05:39:58,320
multiplier should have an integer and has calculated should be set to the


4344
05:39:58,320 --> 05:40:03,520
boolean false what integer you set is entirely up to you i really don't care


4345
05:40:03,520 --> 05:40:07,840
after you have done that create a function called multiply calculator in


4346
05:40:07,840 --> 05:40:12,240
this one should take one argument and then calculate the multiplication


4347
05:40:12,240 --> 05:40:17,200
let me put this on another line it simply multiplies that number that's


4348
05:40:17,200 --> 05:40:20,240
just about it all you really have to do is inside of


4349
05:40:20,240 --> 05:40:25,440
the function multiply the parameter with the global variable multiplier


4350
05:40:25,440 --> 05:40:31,280
and once the calculation is done set has calculated to true and that is this


4351
05:40:31,280 --> 05:40:36,798
global variable has calculated then store the new number in a variable


4352
05:40:36,798 --> 05:40:41,200
called result and return it from the function and finally print a return


4353
05:40:41,200 --> 05:40:45,680
value of the function after it was called with the number


4354
05:40:45,680 --> 05:40:50,320
okay um probably read for this a couple of times it's a tiny bit longer but


4355
05:40:50,320 --> 05:40:55,400
pause the video now and try this one yourself


4356
05:40:56,160 --> 05:41:00,798
alrighty let's do it together now and let me comment out all of this at the


4357
05:41:00,798 --> 05:41:06,480
beginning so we don't get confused first of all i have to create two global


4358
05:41:06,480 --> 05:41:11,200
variables one is called multiply


4359
05:41:11,200 --> 05:41:15,200
and this one i want to set to an integer let's say 5.


4360
05:41:15,200 --> 05:41:21,280
and after i have that i want another variable called has calculated and this


4361
05:41:21,280 --> 05:41:27,440
one by default is going to be false and with that we have these two parts


4362
05:41:27,440 --> 05:41:32,240
already covered next up i want to create a function


4363
05:41:32,240 --> 05:41:34,400
called mold


4364
05:41:34,400 --> 05:41:39,280
supply calculator


4365
05:41:39,280 --> 05:41:44,000
and this one takes one argument so it needs one parameter


4366
05:41:44,000 --> 05:41:49,680
let's call it number meaning now we are basically here


4367
05:41:49,680 --> 05:41:55,120
so next up i want to do this step here i want to multiply


4368
05:41:55,120 --> 05:41:59,040
my number with my multiplier


4369
05:41:59,040 --> 05:42:02,798
and this is perfectly fine for python because remember


4370
05:42:02,798 --> 05:42:06,798
we can use global variables inside of the local scope


4371
05:42:06,798 --> 05:42:12,160
so this multiplier here is from the global scope so we can use it but we


4372
05:42:12,160 --> 05:42:17,920
couldn't update it but next up we have to take care of the


4373
05:42:17,920 --> 05:42:22,000
has calculated and set it to true this part here


4374
05:42:22,000 --> 05:42:26,878
and for that i want to set has calculated to


4375
05:42:26,878 --> 05:42:31,680
true but here now we have the problem this is


4376
05:42:31,680 --> 05:42:36,160
the local scope so we cannot update this global variable here


4377
05:42:36,160 --> 05:42:41,520
and i guess for now the easiest way of doing this would be to set global has


4378
05:42:41,520 --> 05:42:46,080
calculated and well with that we have this part


4379
05:42:46,080 --> 05:42:50,320
covered here now next up we have to store the new number


4380
05:42:50,320 --> 05:42:55,600
generated inside of a variable called result and return it


4381
05:42:55,600 --> 05:43:01,520
and all i really want to do in here is the result


4382
05:43:01,520 --> 05:43:04,958
is the result of well this operation here


4383
05:43:04,958 --> 05:43:08,638
and let me put this below has calculated that feels a bit


4384
05:43:08,638 --> 05:43:13,120
cleaner and now what i want to do is to return


4385
05:43:13,120 --> 05:43:16,798
that result meaning whenever we call this


4386
05:43:16,798 --> 05:43:21,360
multiplication function we are returning this value here


4387
05:43:21,360 --> 05:43:27,280
and this i want to use with print and i want to


4388
05:43:27,280 --> 05:43:31,920
multiply calculator and in here i can add any number i want


4389
05:43:31,920 --> 05:43:35,360
let's say 10 and let's see what we get 50


4390
05:43:35,360 --> 05:43:40,000
which is 10 times 5. so this is working just fine


4391
05:43:40,000 --> 05:43:46,878
and what i can also do now i can print as calculated and this is now true


4392
05:43:46,878 --> 05:43:49,200
so as soon as we're calling this function


4393
05:43:49,200 --> 05:43:53,760
this is being updated although there's one really important


4394
05:43:53,760 --> 05:43:57,680
thing about the return statement that i forgot to mention earlier and that is


4395
05:43:57,680 --> 05:44:01,840
that return ends the execution of the function


4396
05:44:01,840 --> 05:44:07,040
for example if has calculated is after return and i run this again has


4397
05:44:07,040 --> 05:44:12,000
calculated is still false because this has calculated is equal to


4398
05:44:12,000 --> 05:44:17,680
true is not being executed and that happens because return ends


4399
05:44:17,680 --> 05:44:21,680
this function call the function essentially ends here


4400
05:44:21,680 --> 05:44:24,798
this is something you do want to be careful about


4401
05:44:24,798 --> 05:44:31,280
but right with that we have scope and again scope very early on can be kind of


4402
05:44:31,280 --> 05:44:34,798
a tricky topic so i hope all of that makes sense


4403
05:44:34,798 --> 05:44:38,638
but for now don't worry too much about it just play around with different


4404
05:44:38,638 --> 05:44:42,080
examples of code and come back to this video when you get to something more


4405
05:44:42,080 --> 05:44:45,520
complex it will become more important and i hope


4406
05:44:45,520 --> 05:44:51,520
eventually starts to make more sense for this part we are going to cover lambda


4407
05:44:51,520 --> 05:44:56,320
functions and lambda functions are fortunately fairly simple


4408
05:44:56,320 --> 05:45:00,480
all they really are are single line very simple functions


4409
05:45:00,480 --> 05:45:04,240
and the syntax for them looks like this we have


4410
05:45:04,240 --> 05:45:09,120
the lambda keyword then we get whatever parameters we want to use


4411
05:45:09,120 --> 05:45:14,400
and then we have a colon and at the end we have an expression and


4412
05:45:14,400 --> 05:45:19,120
this is the actual code that's really all it does it's a single


4413
05:45:19,120 --> 05:45:22,798
line function if you have some very simple functions you want to work with


4414
05:45:22,798 --> 05:45:25,680
and you don't really want to write a whole function


4415
05:45:25,680 --> 05:45:31,280
this for example could look like this where we have lambda then we have an x


4416
05:45:31,280 --> 05:45:36,958
parameter and inside of the function we are just adding x plus 1. and an


4417
05:45:36,958 --> 05:45:42,000
important thing about lambdas is that the result of this expression this one


4418
05:45:42,000 --> 05:45:47,520
here is returned automatically meaning when we are passing 10 in here this


4419
05:45:47,520 --> 05:45:53,520
lambda function returns 11 automatically and i guess let's have a look at this in


4420
05:45:53,520 --> 05:45:58,000
practice this shouldn't be too hard all right once more we have a completely


4421
05:45:58,000 --> 05:46:02,480
empty python file and i want to create a lambda function


4422
05:46:02,480 --> 05:46:05,360
and let's use the example i've just mentioned


4423
05:46:05,360 --> 05:46:12,080
so i have a lambda function and the one parameter i want to use is x


4424
05:46:12,080 --> 05:46:16,638
and what i want to return is x plus one


4425
05:46:16,638 --> 05:46:21,920
and this is then the entire function how you would use this is by assigning


4426
05:46:21,920 --> 05:46:26,958
it to a variable and this variable now contains a


4427
05:46:26,958 --> 05:46:32,320
function meaning we can call it by using brackets again and passing in any number


4428
05:46:32,320 --> 05:46:36,798
we want let's say a 10 and if i run the code now we don't get


4429
05:46:36,798 --> 05:46:41,200
anything because we have to print this value


4430
05:46:41,200 --> 05:46:47,360
let me print it and we get 11. and that is the main idea of lambda


4431
05:46:47,360 --> 05:46:52,718
functions it's basically very very simple functions that only consist of


4432
05:46:52,718 --> 05:46:56,878
one line of code i guess a slightly more useful one could


4433
05:46:56,878 --> 05:47:03,120
be let me copy this one here let's call this one simple calculator


4434
05:47:03,120 --> 05:47:09,840
and for this lambda i want a and b and all i really want to do is return a


4435
05:47:09,840 --> 05:47:13,760
plus b meaning now i can call my simple


4436
05:47:13,760 --> 05:47:19,920
calculator and pass in let's say two and three if i run this we get five


4437
05:47:19,920 --> 05:47:24,400
obviously right now these examples are so simple that you wouldn't even create


4438
05:47:24,400 --> 05:47:28,798
a function for it in the first place i guess instead of this simple


4439
05:47:28,798 --> 05:47:33,360
calculator you just write 2 plus 3 and you would get the same result if you can


4440
05:47:33,360 --> 05:47:37,200
type properly so why would you ever use these kind of


4441
05:47:37,200 --> 05:47:42,480
lambda functions and there are two main reasons that we


4442
05:47:42,480 --> 05:47:45,840
don't really are going to cover in too much detail


4443
05:47:45,840 --> 05:47:52,160
the first one is that some functions want our functions as


4444
05:47:52,160 --> 05:47:55,600
argument and this is something we are going to


4445
05:47:55,600 --> 05:48:01,520
see later for example python has a sort function and this one sorts any kind of


4446
05:48:01,520 --> 05:48:05,280
list for example a list like one two three four and five


4447
05:48:05,280 --> 05:48:11,280
and we could sort this if it was unordered let me mess it up a bit


4448
05:48:11,280 --> 05:48:16,638
to something like this to order this function python is


4449
05:48:16,638 --> 05:48:20,878
expecting another function to tell it how to order this list


4450
05:48:20,878 --> 05:48:25,440
and this function would usually be a lambda because we


4451
05:48:25,440 --> 05:48:30,320
don't want anything too complicated we are going to cover this later on the


4452
05:48:30,320 --> 05:48:36,718
other examples where you see lambdas fairly often is with graphical


4453
05:48:36,718 --> 05:48:41,680
user interfaces and essentially what happens in there is


4454
05:48:41,680 --> 05:48:45,200
that every button gets one lambda function because a button would only


4455
05:48:45,200 --> 05:48:50,160
return a value like 5 for example so you don't really want a full function you


4456
05:48:50,160 --> 05:48:54,400
just want some very simple line of code that executes some basic thing when a


4457
05:48:54,400 --> 05:48:58,160
button is being pressed so this could be really useful but for


4458
05:48:58,160 --> 05:49:01,920
this introduction to python we are not going to cover it


4459
05:49:01,920 --> 05:49:06,958
but alright with that let's do an exercise and then we should be done with


4460
05:49:06,958 --> 05:49:10,320
it and for the exercise


4461
05:49:10,320 --> 05:49:14,400
i want you guys to create a lambda function that accepts one argument that


4462
05:49:14,400 --> 05:49:18,798
should be an integer and if the integer is greater than 5


4463
05:49:18,798 --> 05:49:23,920
return hello and otherwise return by and then obviously


4464
05:49:23,920 --> 05:49:29,280
when you have created this call this function and print the result


4465
05:49:30,480 --> 05:49:35,600
let me comment out these lambda functions here and i want to create a


4466
05:49:35,600 --> 05:49:40,480
new lambda function that accepts one argument let's call this one x for the


4467
05:49:40,480 --> 05:49:43,760
parameter name and now


4468
05:49:43,760 --> 05:49:48,400
i want to return hello if this x is greater than 5


4469
05:49:48,400 --> 05:49:54,480
and by if it is below 5 and for that i want hello


4470
05:49:54,480 --> 05:50:02,240
if x is greater than 5 and if that is not the case so else i want to print by


4471
05:50:02,240 --> 05:50:07,760
and this lambda function i now want to assign to a variable let's call it x but


4472
05:50:07,760 --> 05:50:13,520
it doesn't really matter what it is and now i can print my x


4473
05:50:13,520 --> 05:50:20,480
and pass in a free we get by and if i pass in a 10 we get hello


4474
05:50:20,480 --> 05:50:25,520
and with that we have covered lambdas they honestly aren't that difficult and


4475
05:50:25,520 --> 05:50:30,160
you really aren't going to use them that often so don't worry too much about them


4476
05:50:30,160 --> 05:50:34,558
all right next up we have one final topic for functions that is actually


4477
05:50:34,558 --> 05:50:38,480
really important although it might not seem that much


4478
05:50:38,480 --> 05:50:42,798
for this part we are going to talk about documenting functions


4479
05:50:42,798 --> 05:50:47,280
and this is incredibly important although we are not adding more


4480
05:50:47,280 --> 05:50:51,040
functionality all we are doing in here is explaining


4481
05:50:51,040 --> 05:50:55,520
what our function does and this might not seem important but it


4482
05:50:55,520 --> 05:50:59,120
really is because functions can get really


4483
05:50:59,120 --> 05:51:04,480
complicated so you want to explain them and this is something you are going to


4484
05:51:04,480 --> 05:51:08,240
notice when you are starting to code where you are writing a function and


4485
05:51:08,240 --> 05:51:10,958
then don't look at it for a couple of weeks


4486
05:51:10,958 --> 05:51:14,320
you probably have absolutely no idea what you did


4487
05:51:14,320 --> 05:51:18,798
and when you look at other people's code it might be even worse and well


4488
05:51:18,798 --> 05:51:23,280
explaining what your function does is just good form and really helps you when


4489
05:51:23,280 --> 05:51:26,798
you work with other people and there are two things you can do to


4490
05:51:26,798 --> 05:51:32,080
your functions to explain what they do the most common one is you just add some


4491
05:51:32,080 --> 05:51:35,520
explainer text and this is called a docs string


4492
05:51:35,520 --> 05:51:40,400
and besides that you can also add what is called type hinting and all that


4493
05:51:40,400 --> 05:51:44,080
really means is you indicate what you expect for the parameters and for the


4494
05:51:44,080 --> 05:51:48,400
return value of the function and if you have all of that your


4495
05:51:48,400 --> 05:51:51,440
function should make quite a bit more sense


4496
05:51:51,440 --> 05:51:55,040
so let's implement all of this all right


4497
05:51:55,040 --> 05:52:00,558
here we have a very simple example of a function if i run this we are just


4498
05:52:00,558 --> 05:52:05,360
printing two arguments so obviously this isn't complicated but i


4499
05:52:05,360 --> 05:52:10,400
just want to keep it simple and to explain what your function does


4500
05:52:10,400 --> 05:52:16,240
you can add what is called a dog string at the beginning of a function


4501
05:52:16,240 --> 05:52:22,000
and a dog string you create with quotation marks like any other string


4502
05:52:22,000 --> 05:52:28,400
and for a dog string you always want three quotation marks on each side it


4503
05:52:28,400 --> 05:52:33,280
looks like this and sublime essentially turns this into a comment by default


4504
05:52:33,280 --> 05:52:37,440
and now for this dock string you can write whatever you want or well whatever


4505
05:52:37,440 --> 05:52:42,080
explains your function the best let's say i could call this one a simple


4506
05:52:42,080 --> 05:52:47,840
function that prints two parameters


4507
05:52:47,840 --> 05:52:52,558
and if i run the function we don't see any difference


4508
05:52:52,558 --> 05:52:56,558
however now what you can do you can print


4509
05:52:56,558 --> 05:53:00,718
the name of the function test in my case then dodge


4510
05:53:00,718 --> 05:53:06,160
underscore underscore dock and underscore underscore again


4511
05:53:06,160 --> 05:53:11,120
and if i run this i get the docs string of the function or


4512
05:53:11,120 --> 05:53:14,320
a simple function that prints two parameters


4513
05:53:14,320 --> 05:53:19,600
now why we're using two underscores before and after this dog you are going


4514
05:53:19,600 --> 05:53:24,480
to understand later on for now just write it like this it really isn't too


4515
05:53:24,480 --> 05:53:28,320
important for you right now just remember how it looks like


4516
05:53:28,320 --> 05:53:32,480
i suppose another way you could be accessing this is by writing help and


4517
05:53:32,480 --> 05:53:35,840
then test and if i run this


4518
05:53:35,840 --> 05:53:39,200
we get some more information about the function


4519
05:53:39,200 --> 05:53:43,200
and in here we also can see the docs string a simple function that prints two


4520
05:53:43,200 --> 05:53:46,798
parameters and it is fairly common to use either of


4521
05:53:46,798 --> 05:53:52,638
those to understand what a function does meaning if you write code with a team


4522
05:53:52,638 --> 05:53:57,440
you really want to use this but well that's basically it it isn't


4523
05:53:57,440 --> 05:54:02,798
that complicated now besides that what you can also do is


4524
05:54:02,798 --> 05:54:07,680
to hint what you are expecting for these parameters and what the function should


4525
05:54:07,680 --> 05:54:10,400
return and right now this function doesn't


4526
05:54:10,400 --> 05:54:16,320
return anything so let's add return a plus b


4527
05:54:16,320 --> 05:54:23,280
and now i want to indicate that for these parameters i am expecting integers


4528
05:54:23,280 --> 05:54:28,320
all you have to do for that is to add a colon after the parameter and then add


4529
05:54:28,320 --> 05:54:32,240
integer if you wanted to you could also set a


4530
05:54:32,240 --> 05:54:36,400
default parameter for this and this you do in a normal way by just adding an


4531
05:54:36,400 --> 05:54:39,760
equal sign and let's say 10 for this value


4532
05:54:39,760 --> 05:54:43,600
and all this really means i am telling other programmers that for this a


4533
05:54:43,600 --> 05:54:48,878
parameter i am expecting an integer and by default this parameter is going to be


4534
05:54:48,878 --> 05:54:53,520
10. and for b i also want an integer but i


4535
05:54:53,520 --> 05:54:59,680
don't have a default value and with that we have some default parameters where we


4536
05:54:59,680 --> 05:55:03,040
are indicating that we are looking for integers


4537
05:55:03,040 --> 05:55:07,760
and let's say for b i want the default value of 0.


4538
05:55:07,760 --> 05:55:13,120
and with that we are indicating to other programmers that we want two integer


4539
05:55:13,120 --> 05:55:16,320
values that both have a default parameter


4540
05:55:16,320 --> 05:55:20,480
meaning if i run the code now we can't see well not much of a


4541
05:55:20,480 --> 05:55:23,600
difference because this isn't supposed to influence


4542
05:55:23,600 --> 05:55:29,120
what the function actually does and besides that we can also indicate


4543
05:55:29,120 --> 05:55:33,440
what is being returned from this function so this line here


4544
05:55:33,440 --> 05:55:38,480
and this could do by adding an arrow after the function but before the colon


4545
05:55:38,480 --> 05:55:42,958
that's really important and then here you again add the name


4546
05:55:42,958 --> 05:55:45,440
of the type


4547
05:55:45,440 --> 05:55:50,320
and here again use the name of the type you want to return for an integer this


4548
05:55:50,320 --> 05:55:55,680
would be int i guess other data types could be str for string


4549
05:55:55,680 --> 05:56:01,120
bool for a boolean list for well a list


4550
05:56:01,120 --> 05:56:06,000
and dictionary for a dictionary but in my case i want to stick with an


4551
05:56:06,000 --> 05:56:09,440
integer and now i can run this again and we


4552
05:56:09,440 --> 05:56:14,320
again don't see any kind of difference and a really important thing you have to


4553
05:56:14,320 --> 05:56:18,878
understand about type hinting is that all of this is optional and it can be


4554
05:56:18,878 --> 05:56:22,798
ignored so for example what i could be doing


4555
05:56:22,798 --> 05:56:26,958
is add a string in here


4556
05:56:26,958 --> 05:56:30,638
and also a string in here i know let's say test


4557
05:56:30,638 --> 05:56:34,480
if i run this now the function is still going to work let


4558
05:56:34,480 --> 05:56:38,878
me comment out those two lines here to make it a bit more readable


4559
05:56:38,878 --> 05:56:43,840
so now we have indicated for the function we are expecting an integer but


4560
05:56:43,840 --> 05:56:49,120
when we actually call the function we are adding two strings and python


4561
05:56:49,120 --> 05:56:52,958
doesn't really mind it still works just fine


4562
05:56:52,958 --> 05:56:57,040
so you don't have to follow it it's mostly indication of what is being


4563
05:56:57,040 --> 05:57:01,360
expected but alright with that we have covered


4564
05:57:01,360 --> 05:57:05,920
all you need to know about functions in this section we are going to cover


4565
05:57:05,920 --> 05:57:10,080
more advanced data operators and this is one of the parts where


4566
05:57:10,080 --> 05:57:15,760
python is incredibly powerful there are lots of ways to manipulate data and get


4567
05:57:15,760 --> 05:57:20,558
a certain kind of outcome there is a reason why python is really popular for


4568
05:57:20,558 --> 05:57:24,638
data science and machine learning it is because there are lots of


4569
05:57:24,638 --> 05:57:29,440
different ways to work with data so let's have a look what we can do


4570
05:57:29,440 --> 05:57:32,958
what we are going to cover in this section is more advanced ways to loop


4571
05:57:32,958 --> 05:57:37,680
over data we are going to sort data we are going to learn list comprehension a


4572
05:57:37,680 --> 05:57:42,320
really important topic even though the name here is probably a bit weird and


4573
05:57:42,320 --> 05:57:47,120
finally data handling if we want to import or export data


4574
05:57:47,120 --> 05:57:51,920
let's get started by looking at more advanced ways to loop over data


4575
05:57:51,920 --> 05:57:56,320
so in this part we are going to manipulate lists to get stronger for


4576
05:57:56,320 --> 05:58:02,320
loops and this is a super powerful topic because very often python you want to


4577
05:58:02,320 --> 05:58:07,280
merge a list and then loop over this merged list and for this for example


4578
05:58:07,280 --> 05:58:11,760
python has a zip function that zips together two lists and you could also


4579
05:58:11,760 --> 05:58:16,480
get the index for each of the lists when you use a for loop and i suppose all of


4580
05:58:16,480 --> 05:58:20,160
this is going to sound a bit abstract so let's do all of this a bit more


4581
05:58:20,160 --> 05:58:24,718
practically here we have a nearly empty python file


4582
05:58:24,718 --> 05:58:30,638
and i already have two lists we have inventory names and inventory numbers


4583
05:58:30,638 --> 05:58:35,440
and the scenario we have here is you are running some kind of warehouse and


4584
05:58:35,440 --> 05:58:39,600
people gave you two lists one with the things in your inventory


4585
05:58:39,600 --> 05:58:44,400
and then how much of that thing you have and for the order here you are looking


4586
05:58:44,400 --> 05:58:50,480
at the index meaning the first item and the first number belong together


4587
05:58:50,480 --> 05:58:55,920
then we have the second item and the second number then the third one and so


4588
05:58:55,920 --> 05:58:59,520
on we are sorting things here by their order


4589
05:58:59,520 --> 05:59:03,680
this could for example happen if somebody copies a column from excel it's


4590
05:59:03,680 --> 05:59:07,600
very easy to get the problem for you is if you want to


4591
05:59:07,600 --> 05:59:12,558
write a for loop and you have two lists you kind of have a problem if you want


4592
05:59:12,558 --> 05:59:17,200
to access both of these lists at the same time so the scenario here might be


4593
05:59:17,200 --> 05:59:21,520
you have some kind of website and on this website you want to display all of


4594
05:59:21,520 --> 05:59:27,120
this information for customers so you want to loop over both of these lists


4595
05:59:27,120 --> 05:59:34,080
but this you can't do right now you can either do for name in inventory names


4596
05:59:34,080 --> 05:59:41,760
or you could do for let's call it num in inventory numbers but both of these for


4597
05:59:41,760 --> 05:59:46,160
loops are going to be independent of each other so you have no way to connect


4598
05:59:46,160 --> 05:59:52,240
the two python in this case has one specific function and that is called zip


4599
05:59:52,240 --> 05:59:58,480
what zip does is it wants two lists we want inventory names in our case and


4600
05:59:58,480 --> 06:00:02,160
inventory numbers if i


4601
06:00:02,160 --> 06:00:08,080
print the result we are getting a zip object some point in our memory not


4602
06:00:08,080 --> 06:00:12,240
particularly useful we're going to see how to use this in


4603
06:00:12,240 --> 06:00:18,160
just a second but for now what you can do is to convert all of this into a list


4604
06:00:18,160 --> 06:00:21,360
with the list function if i run this now


4605
06:00:21,360 --> 06:00:25,440
we can see something much more useful we have a list


4606
06:00:25,440 --> 06:00:31,280
with tuples inside and each tuple is right now the combination in this case


4607
06:00:31,280 --> 06:00:34,638
of screws and of the number


4608
06:00:34,638 --> 06:00:40,000
and these are again sorted by the index which is what i want in this case


4609
06:00:40,000 --> 06:00:44,480
that being said this zip you hardly ever use in the list and inside of a print


4610
06:00:44,480 --> 06:00:47,840
statement instead you would usually use it inside


4611
06:00:47,840 --> 06:00:51,520
of a for loop and the follow-up here could be let's


4612
06:00:51,520 --> 06:00:55,600
say for thing in and now i want to have the zip of


4613
06:00:55,600 --> 06:01:02,320
inventory names and inventory numbers and this i can now print as the thing


4614
06:01:02,320 --> 06:01:06,638
and let's see what we get there we go this is looking not too bad


4615
06:01:06,638 --> 06:01:12,240
we have a tuple with our screws and how many of these we have


4616
06:01:12,240 --> 06:01:16,878
but the issue still is we want to have each individual value to work with we


4617
06:01:16,878 --> 06:01:21,440
don't want to have an entire list i guess what you could be doing here is


4618
06:01:21,440 --> 06:01:25,520
use indexing to get one value from this tuple


4619
06:01:25,520 --> 06:01:30,958
0 would give you the items and one would give you the inventory number


4620
06:01:30,958 --> 06:01:34,638
and you could access both


4621
06:01:34,638 --> 06:01:37,920
like this and you would get the name of the item


4622
06:01:37,920 --> 06:01:42,798
and how many you have this would work but it's kind of hard to


4623
06:01:42,798 --> 06:01:46,878
read thing here really isn't too specific


4624
06:01:46,878 --> 06:01:51,280
for that python has some really interesting functionality


4625
06:01:51,280 --> 06:01:56,240
basically what we have seen earlier when we assign two values to two variable


4626
06:01:56,240 --> 06:01:58,558
name instead of writing thing


4627
06:01:58,558 --> 06:02:03,280
we could write for example name and number


4628
06:02:03,280 --> 06:02:06,320
and now when python goes through this list


4629
06:02:06,320 --> 06:02:12,958
and it sees a tuple let's say for the first example we have screws and we have


4630
06:02:12,958 --> 06:02:18,558
43 so this screws here and this 43 this


4631
06:02:18,558 --> 06:02:23,760
would be the first item we get inside of this zip operation here it's kind of


4632
06:02:23,760 --> 06:02:27,280
hard to read if you have a tuple and you write more


4633
06:02:27,280 --> 06:02:32,558
than one variable name here python is going to unpack this tuple into these


4634
06:02:32,558 --> 06:02:36,160
separate variables meaning in this case


4635
06:02:36,160 --> 06:02:42,558
screws would be stored in name and the 43 would be stored in number


4636
06:02:42,558 --> 06:02:47,040
and that way we can access them much easier inside of the for loop so name


4637
06:02:47,040 --> 06:02:52,400
and number if i run this now this is still giving us the same result


4638
06:02:52,400 --> 06:02:56,798
except now this is much easier to read and this is an operation you do


4639
06:02:56,798 --> 06:03:00,958
surprisingly often i guess what we can do here to make all


4640
06:03:00,958 --> 06:03:04,798
of this a bit easier to read we could use an f string


4641
06:03:04,798 --> 06:03:09,520
and then i want to write something like let's say


4642
06:03:09,520 --> 06:03:11,680
name and


4643
06:03:11,680 --> 06:03:14,480
current index


4644
06:03:14,480 --> 06:03:18,240
with the number if i run this now


4645
06:03:18,240 --> 06:03:24,400
we get screws current index 43. i guess index isn't ideal let's use


4646
06:03:24,400 --> 06:03:29,440
inventory that's better so we have screws current inventory 43


4647
06:03:29,440 --> 06:03:33,120
and this information if you give it to somebody designing a website would be


4648
06:03:33,120 --> 06:03:37,040
very easy to work with another thing that you could be using


4649
06:03:37,040 --> 06:03:39,280
here is


4650
06:03:39,280 --> 06:03:43,280
called the enumerate function


4651
06:03:43,280 --> 06:03:48,718
and this one is basically used to get the current


4652
06:03:48,718 --> 06:03:54,080
index inside of the for loop i guess an example here could be if you are cycling


4653
06:03:54,080 --> 06:03:58,000
over this list and when you get halfway into this list


4654
06:03:58,000 --> 06:04:01,600
somewhere here you want to run some other code the


4655
06:04:01,600 --> 06:04:06,320
question then would be how do you know when you are halfway into the list


4656
06:04:06,320 --> 06:04:09,600
and for that you would have to know the current index


4657
06:04:09,600 --> 06:04:12,798
i guess let me demonstrate how this actually works that should make much


4658
06:04:12,798 --> 06:04:17,360
more sense we need enumerate and this is a function


4659
06:04:17,360 --> 06:04:22,240
what it wants is some kind of list or something you can iterate over in my


4660
06:04:22,240 --> 06:04:26,240
case i want to go with my inventory names


4661
06:04:26,240 --> 06:04:31,040
and now if i print what this is giving us


4662
06:04:31,040 --> 06:04:33,920
we are getting once again an enumerate object


4663
06:04:33,920 --> 06:04:39,200
doesn't help us too much but if i convert all of this into a list


4664
06:04:39,200 --> 06:04:41,840
i am getting the index


4665
06:04:41,840 --> 06:04:48,000
and the item from the list this zero here is the index of this


4666
06:04:48,000 --> 06:04:52,080
screws inside of the list wheels would be number one metal parts


4667
06:04:52,080 --> 06:04:56,160
would be number two rubber bits number three and these are the numbers we are


4668
06:04:56,160 --> 06:05:02,160
getting down here and again this enumerate you would basically


4669
06:05:02,160 --> 06:05:07,360
always use inside of a for loop let's say again for thing


4670
06:05:07,360 --> 06:05:09,840
in and now i want to have the enumerate


4671
06:05:09,840 --> 06:05:13,440
function and inside of this let me print the


4672
06:05:13,440 --> 06:05:17,120
thing if i run this now we are getting again a


4673
06:05:17,120 --> 06:05:21,280
tuple with the index and with the name of the item


4674
06:05:21,280 --> 06:05:26,480
and just like we have done up here we can unpack this again what you usually


4675
06:05:26,480 --> 06:05:31,360
see is index and then the name of the item or whatever you want to call it


4676
06:05:31,360 --> 06:05:34,798
this is entirely up to you but index here is


4677
06:05:34,798 --> 06:05:37,760
the common name for what enumerator returns


4678
06:05:37,760 --> 06:05:42,558
once i have that i could do something let me print an f string again


4679
06:05:42,558 --> 06:05:47,520
and here index with the name of the thing


4680
06:05:47,520 --> 06:05:51,600
and there we have the current index and the screws


4681
06:05:51,600 --> 06:05:56,558
and this i could for example use if the index


4682
06:05:56,558 --> 06:06:00,080
is let's say the example i had earlier if


4683
06:06:00,080 --> 06:06:04,080
we are halfway into this list i want to run some other code


4684
06:06:04,080 --> 06:06:08,558
maybe i want to notify my boss that my operation here is halfway done something


4685
06:06:08,558 --> 06:06:12,878
like that i want to check if the length of my


4686
06:06:12,878 --> 06:06:16,958
inventory names is equal to the index and this will give


4687
06:06:16,958 --> 06:06:21,360
me the whole list but i only want half of that


4688
06:06:21,360 --> 06:06:25,520
and then here you do want a flow operator so you're getting an integer or


4689
06:06:25,520 --> 06:06:29,360
a whole number because the index is always going to be a whole number in and


4690
06:06:29,360 --> 06:06:32,958
of itself and if that is the case i can print


4691
06:06:32,958 --> 06:06:37,920
something like half way done now if i run this


4692
06:06:37,920 --> 06:06:42,480
i am getting the first half and then the second half although you might have to


4693
06:06:42,480 --> 06:06:46,160
tinker around with this to get exactly to the halfway point


4694
06:06:46,160 --> 06:06:50,080
the most important part here is that enumerate gives you the current index


4695
06:06:50,080 --> 06:06:55,200
where you are inside of the list when you are using a for loop and with


4696
06:06:55,200 --> 06:07:00,320
that we have two functions you see very often alongside four loops


4697
06:07:00,320 --> 06:07:04,638
the other one we have seen earlier was the range function which also is almost


4698
06:07:04,638 --> 06:07:10,320
always used alongside the for loop we can do an exercise and then finish


4699
06:07:10,320 --> 06:07:13,520
this part and what i want you guys to do is to


4700
06:07:13,520 --> 06:07:18,718
combine zip and enumerate to get some kind of string like screws then in


4701
06:07:18,718 --> 06:07:24,638
square brackets id 0 and then inventory and then the number of inventory items


4702
06:07:24,638 --> 06:07:29,360
for each of these numbers from this list here


4703
06:07:29,360 --> 06:07:35,040
so pause the video now and try to figure this one out yourself


4704
06:07:36,240 --> 06:07:40,320
let's go through it step by step first of all we need some kind of for


4705
06:07:40,320 --> 06:07:44,160
loop and let me start by just writing thing


4706
06:07:44,160 --> 06:07:49,840
we can refine this in a bit and i want for thing in let's start with inventory


4707
06:07:49,840 --> 06:07:53,760
names in here i can already print


4708
06:07:53,760 --> 06:07:56,558
something we definitely didn't have string


4709
06:07:56,558 --> 06:08:02,480
and i want to have my thing this should be in curly brackets


4710
06:08:02,480 --> 06:08:05,280
let me run this now i forgot


4711
06:08:05,280 --> 06:08:09,120
we got lots of stuff because i have to comment out all of this


4712
06:08:09,120 --> 06:08:13,680
if i run this now we get the different items from this list


4713
06:08:13,680 --> 06:08:18,160
not a bad start we have the first word but well we're getting there


4714
06:08:18,160 --> 06:08:24,000
i suppose next up i can put all of this inside of the zip


4715
06:08:24,000 --> 06:08:26,480
function and then combine


4716
06:08:26,480 --> 06:08:32,958
inventory names and the inventory numbers i called it


4717
06:08:32,958 --> 06:08:36,878
if i run this now we're getting a tuple we essentially


4718
06:08:36,878 --> 06:08:41,440
create a new list full of tuples and each tuple will be captured by the


4719
06:08:41,440 --> 06:08:46,320
variable thing and this is what we are pasting inside of here


4720
06:08:46,320 --> 06:08:52,240
this we can unpack i want to have my name and i want to have the number


4721
06:08:52,240 --> 06:08:55,040
this is basically what we have done up here


4722
06:08:55,040 --> 06:08:59,360
i want to have a name and then i can add


4723
06:08:59,360 --> 06:09:04,718
my inventory with a colon now i need curly brackets


4724
06:09:04,718 --> 06:09:08,080
and the number running this now gets me screws


4725
06:09:08,080 --> 06:09:13,680
inventory 43. we are definitely making progress


4726
06:09:13,680 --> 06:09:19,440
finally we need to get the current id of each of these objects and for that we


4727
06:09:19,440 --> 06:09:23,920
need enumerate what that means is i want to wrap the


4728
06:09:23,920 --> 06:09:30,480
entire zip function inside of a numerit i find this one very hard to write you


4729
06:09:30,480 --> 06:09:35,120
might struggle as well and before we work more on this


4730
06:09:35,120 --> 06:09:39,840
i want to check out what we actually get returned from


4731
06:09:39,840 --> 06:09:43,760
this thing here it's quite a complex one


4732
06:09:43,760 --> 06:09:49,920
so let's see if i print thing in here we have one tuple and inside of


4733
06:09:49,920 --> 06:09:54,320
this tuple we have two values the first one is the index the second one is


4734
06:09:54,320 --> 06:09:59,440
another tuple that we got from this zip operation here


4735
06:09:59,440 --> 06:10:04,400
unfortunately now this thing is kind of annoying to unpack we can't do this


4736
06:10:04,400 --> 06:10:07,840
easily what you might be very tempted to do


4737
06:10:07,840 --> 06:10:13,680
here is something like index name and number but if you run this


4738
06:10:13,680 --> 06:10:16,958
python is not going to be happy because


4739
06:10:16,958 --> 06:10:22,958
we have not enough values to unpack what that means is that python here returned


4740
06:10:22,958 --> 06:10:30,000
two items inside of some kind of data structure in our case this is a tuple


4741
06:10:30,000 --> 06:10:35,680
with the index let's say 1 and then the other value is a tuple with the let me


4742
06:10:35,680 --> 06:10:40,638
call it the name and let's say 43 for the number


4743
06:10:40,638 --> 06:10:44,718
and don't let me forget the closing brackets that is important


4744
06:10:44,718 --> 06:10:49,680
now python looks at this tuple and it's these two items this one and this one


4745
06:10:49,680 --> 06:10:53,760
but we are telling python inside of the for loop down here that we want to


4746
06:10:53,760 --> 06:10:58,400
unpack all of this into three parts but python doesn't know how to do this


4747
06:10:58,400 --> 06:11:04,160
because it only sees two items as a consequence we are getting an error


4748
06:11:04,160 --> 06:11:08,958
what is most efficient here is to only use two unpacking variables we have


4749
06:11:08,958 --> 06:11:13,600
index and then we have let's call it the inventory


4750
06:11:13,600 --> 06:11:17,680
to pill let me print the index here


4751
06:11:17,680 --> 06:11:22,080
and the inventory tuple


4752
06:11:22,080 --> 06:11:26,718
now we're getting all of this not ideal but definitely something you


4753
06:11:26,718 --> 06:11:30,638
can work with let me get rid of this one here and


4754
06:11:30,638 --> 06:11:34,718
uncomment all of this now what we want the name


4755
06:11:34,718 --> 06:11:40,000
is going to be part of the inventory tuple and it is the one with the index


4756
06:11:40,000 --> 06:11:45,440
zero because remember this one is just a tuple nothing else


4757
06:11:45,440 --> 06:11:50,638
after we have that i want something like this square brackets with id and then


4758
06:11:50,638 --> 06:11:54,798
the current id meaning i need square brackets inside of


4759
06:11:54,798 --> 06:12:00,798
that the word id a colon and then curly brackets with my index


4760
06:12:00,798 --> 06:12:05,520
finally i want to have my inventory


4761
06:12:05,520 --> 06:12:09,120
tuple and now i need the first item inside of


4762
06:12:09,120 --> 06:12:12,400
this tuple and with that let me run it


4763
06:12:12,400 --> 06:12:15,920
we get all of the different items properly


4764
06:12:15,920 --> 06:12:19,520
formatted i suppose the most important part here


4765
06:12:19,520 --> 06:12:24,080
is to understand this and what different values are being returned


4766
06:12:24,080 --> 06:12:27,920
definitely play around with this one and understand how these things interlock


4767
06:12:27,920 --> 06:12:32,878
with each other zip first of all returns a new list with


4768
06:12:32,878 --> 06:12:39,120
tuples inside that are zip values from names and numbers and then enumerate


4769
06:12:39,120 --> 06:12:43,760
creates a whole new tuple by adding an index and then adding the original tuple


4770
06:12:43,760 --> 06:12:48,958
it got from the zip operation for this part we are going to cover one


4771
06:12:48,958 --> 06:12:54,558
of the most powerful parts of python and that is called list comprehension


4772
06:12:54,558 --> 06:12:59,600
a very strange name but it is for a super powerful concept


4773
06:12:59,600 --> 06:13:05,680
basically what a list comprehension is is a way to create a list on one line of


4774
06:13:05,680 --> 06:13:10,000
code and this can get surprisingly powerful


4775
06:13:10,000 --> 06:13:14,718
you can either use it to create a list or to manipulate existing lists like to


4776
06:13:14,718 --> 06:13:19,840
filter out values for example but let's keep it simple for now


4777
06:13:19,840 --> 06:13:25,200
and let's say you want to create a list with the numbers from 0 to 99


4778
06:13:25,200 --> 06:13:29,840
for that right now you will probably write something like this you start with


4779
06:13:29,840 --> 06:13:35,280
an empty list then use before loop so for num in range


4780
06:13:35,280 --> 06:13:40,878
from 0 to 100 because remember we only go up to this number we don't include it


4781
06:13:40,878 --> 06:13:46,320
and we want to end at 99 and then inside of this for loop we are


4782
06:13:46,320 --> 06:13:51,280
getting our list and we are appending the number we are getting from this for


4783
06:13:51,280 --> 06:13:54,798
loop fairly simple operation and since it is


4784
06:13:54,798 --> 06:13:58,400
so simple wasting three lines of code on it feels


4785
06:13:58,400 --> 06:14:02,240
kind of pointless as a consequence we would use list


4786
06:14:02,240 --> 06:14:06,240
comprehension this one would look like this


4787
06:14:06,240 --> 06:14:10,400
it's kind of comparable to a ternary operator actually


4788
06:14:10,400 --> 06:14:14,400
we still keep most of the words here so we have four


4789
06:14:14,400 --> 06:14:20,080
the same four we had here then we have num we still have the num here then we


4790
06:14:20,080 --> 06:14:26,080
have the in in both of them and also the range stays the same as well


4791
06:14:26,080 --> 06:14:32,878
we pretty much put the whole line here after the number the major difference


4792
06:14:32,878 --> 06:14:37,600
now is instead of writing my list dot append we


4793
06:14:37,600 --> 06:14:43,440
only need num inside of this this one automatically gets appended


4794
06:14:43,440 --> 06:14:49,280
to the list you are assigning it to and that way you can write all of this


4795
06:14:49,280 --> 06:14:53,840
much more efficiently and this is only a very simple example


4796
06:14:53,840 --> 06:14:58,080
this can get significantly more powerful but let's have a look at some easy


4797
06:14:58,080 --> 06:15:01,760
examples here is the operation i have just shown


4798
06:15:01,760 --> 06:15:07,440
you in the slides and this if i print my list


4799
06:15:07,440 --> 06:15:12,558
we are getting the values from 0 to 100 inside of a list


4800
06:15:12,558 --> 06:15:18,080
and again here this is three lines of code for something that ultimately is


4801
06:15:18,080 --> 06:15:23,040
kind of simple so let's do all of this in one line and


4802
06:15:23,040 --> 06:15:27,600
let me call it my list comprehension or just comp


4803
06:15:27,600 --> 06:15:31,520
and in here we always need square brackets this


4804
06:15:31,520 --> 06:15:36,320
always has to come in there and then we again need this entire line


4805
06:15:36,320 --> 06:15:40,160
here as a matter of fact let me actually copy it


4806
06:15:40,160 --> 06:15:44,878
so we have four num in range 100. the difference now


4807
06:15:44,878 --> 06:15:50,240
is we don't add a colon and then the operation we want to do like my list dot


4808
06:15:50,240 --> 06:15:54,000
append none of this is going to happen instead


4809
06:15:54,000 --> 06:16:00,160
the value we want to return to this list comes as the first word inside of it


4810
06:16:00,160 --> 06:16:04,558
and this will automatically be appended to this list


4811
06:16:04,558 --> 06:16:11,120
as a consequence we would just need this we need num for num in range 0 to 100


4812
06:16:11,120 --> 06:16:17,120
if i print this now we are getting exactly the same outcome


4813
06:16:17,120 --> 06:16:23,280
all we really have done is condensed this entire line here into a single word


4814
06:16:23,280 --> 06:16:27,280
with the entire rest of the for loop staying identical


4815
06:16:27,280 --> 06:16:31,680
that being said now you can make more changes to this part


4816
06:16:31,680 --> 06:16:35,760
here for example you could multiply all of this by two


4817
06:16:35,760 --> 06:16:40,878
run this again and now you have every value multiplied you could also put all


4818
06:16:40,878 --> 06:16:47,120
of this inside of let's say a tuple and then add num num and num


4819
06:16:47,120 --> 06:16:52,240
and now python would automatically assign each value inside of the number


4820
06:16:52,240 --> 06:16:56,000
basically what we are doing is this num


4821
06:16:56,000 --> 06:17:00,400
looks at the range and gets the values from 0 to


4822
06:17:00,400 --> 06:17:03,280
99 and then it assigns each of these


4823
06:17:03,280 --> 06:17:09,200
numbers to one of the values inside of the tuple and this is then what we're


4824
06:17:09,200 --> 06:17:15,840
getting here so we'll get 0 0 0 1 1 1 2 2 and so on


4825
06:17:15,840 --> 06:17:20,798
and this is only the most basic kind of list comprehension you can do and


4826
06:17:20,798 --> 06:17:24,878
there's one way to make this significantly more powerful


4827
06:17:24,878 --> 06:17:28,718
you can combine list comprehension with the ternary operator which is just a


4828
06:17:28,718 --> 06:17:32,320
fancy way of saying you can add if to a list comprehension


4829
06:17:32,320 --> 06:17:38,160
there are actually two ways of doing it the first one would be at the end


4830
06:17:38,160 --> 06:17:43,920
so num for num in range 0 to 100 if a certain condition is true


4831
06:17:43,920 --> 06:17:50,878
although an important thing here is else does not work i don't actually know


4832
06:17:50,878 --> 06:17:55,520
why but you just get an error if you add an else after this


4833
06:17:55,520 --> 06:18:00,160
however the other way would look like this where you first add the value you


4834
06:18:00,160 --> 06:18:06,958
want to return and then the conditional statement so if num is 10 else 0 and


4835
06:18:06,958 --> 06:18:12,878
then the for loop we have seen up here and choose whichever works better for


4836
06:18:12,878 --> 06:18:17,440
you both are totally fine just keep in mind the second one is a tiny bit more


4837
06:18:17,440 --> 06:18:20,240
powerful i honestly have no idea why the first


4838
06:18:20,240 --> 06:18:24,878
one doesn't work with else statements it might be something internal


4839
06:18:24,878 --> 06:18:29,600
and this is something really powerful because you could be using it to filter


4840
06:18:29,600 --> 06:18:32,480
other lists let's have a look at this in practice


4841
06:18:32,480 --> 06:18:36,240
actually and let's do some basic examples first


4842
06:18:36,240 --> 06:18:40,638
i can add an if statement here at the end and i only want to get


4843
06:18:40,638 --> 06:18:44,478
these values here if the number


4844
06:18:44,478 --> 06:18:49,360
is let's say below 20. if i run this now my list comprehension


4845
06:18:49,360 --> 06:18:54,958
stops at 19. although again keep in mind else 0 for


4846
06:18:54,958 --> 06:19:00,638
example would not work i would get an error that says invalid syntax


4847
06:19:00,638 --> 06:19:07,200
so this is not good but what i have to do to get around that


4848
06:19:07,200 --> 06:19:10,840
i would have to cut all of this out and paste it


4849
06:19:10,840 --> 06:19:15,200
here now if i run this this is working just fine


4850
06:19:15,200 --> 06:19:20,478
we get all of the two bits from 0 to 19 and then for any other value we are


4851
06:19:20,478 --> 06:19:24,320
getting 0. and that is basically a trade if


4852
06:19:24,320 --> 06:19:29,040
statements in here one example how you could be using this


4853
06:19:29,040 --> 06:19:32,798
here are the two lists you have seen from the last part


4854
06:19:32,798 --> 06:19:39,120
and i want to clean them up let's say i want to create a list


4855
06:19:39,120 --> 06:19:45,920
with all of the parts that have less than 25 items so i want to select wheels


4856
06:19:45,920 --> 06:19:50,798
because they only have 12 items and i want to select the screwdrivers because


4857
06:19:50,798 --> 06:19:55,520
they only have 23 items and for that list comprehension could be


4858
06:19:55,520 --> 06:19:59,520
really really powerful along with the other stuff we have


4859
06:19:59,520 --> 06:20:03,600
already seen let me call it the


4860
06:20:03,600 --> 06:20:08,798
replenish that's not how you spell that replenish


4861
06:20:08,798 --> 06:20:11,600
list and now in here


4862
06:20:11,600 --> 06:20:16,080
we want to look through all of these items


4863
06:20:16,080 --> 06:20:19,680
and for that first of all we again


4864
06:20:19,680 --> 06:20:25,600
need square brackets and let's start with thing for thing in


4865
06:20:25,600 --> 06:20:29,760
and i want to again use my zip list because i want to access both of these


4866
06:20:29,760 --> 06:20:34,718
lists and here i need inventory not numbers but names


4867
06:20:34,718 --> 06:20:39,200
and now inventory numbers


4868
06:20:39,440 --> 06:20:45,520
if i print now my replenish list i get the entire list


4869
06:20:45,520 --> 06:20:51,680
inside of the square brackets so far this isn't helpful at all


4870
06:20:51,680 --> 06:20:57,440
but now what i can do first of all this thing here instead of thing i want to


4871
06:20:57,440 --> 06:21:02,240
name let's call it name and number


4872
06:21:02,240 --> 06:21:07,680
and to get the same outcome again i would need my name and my number


4873
06:21:07,680 --> 06:21:11,920
so far again we are still going to get the same outcome


4874
06:21:11,920 --> 06:21:16,718
but now i only want to do all of this if a certain condition is true and in my


4875
06:21:16,718 --> 06:21:21,120
case the condition is if the number is below 25.


4876
06:21:21,120 --> 06:21:25,200
if i run this now we are only getting two items with the


4877
06:21:25,200 --> 06:21:32,080
name and the number attached to it which is a very nice way to get data out


4878
06:21:32,080 --> 06:21:36,400
of this list here and this is a kind of operation you would actually do fairly


4879
06:21:36,400 --> 06:21:40,878
often in python and list comprehension for that is what you would use very very


4880
06:21:40,878 --> 06:21:45,680
often now what you can also do is to combine different list


4881
06:21:45,680 --> 06:21:53,120
comprehensions let me add a comment here let's call it combine list comprehension


4882
06:21:53,120 --> 06:21:58,240
although this one is going to get a little bit more complex but let's go


4883
06:21:58,240 --> 06:22:03,600
through it in a really simple example let me create a new variable combined


4884
06:22:03,600 --> 06:22:08,558
comprehension and in here first of all i want to have


4885
06:22:08,558 --> 06:22:15,760
something really simple let's say x for x in range 5


4886
06:22:15,760 --> 06:22:20,878
then i'm going to comment out all the stuff we have done so far and print what


4887
06:22:20,878 --> 06:22:24,558
we are getting from the combined comprehension


4888
06:22:24,558 --> 06:22:30,558
we are getting the numbers from 0 to 4. this should make sense it is fairly


4889
06:22:30,558 --> 06:22:35,600
simple at least i hope it is but now what we can do is put all of


4890
06:22:35,600 --> 06:22:39,920
this inside of another list comprehension


4891
06:22:39,920 --> 06:22:44,798
so all of the stuff we have seen so far for y in range


4892
06:22:44,798 --> 06:22:48,478
let's say 10. if i now run this


4893
06:22:48,478 --> 06:22:53,200
we're getting something that possibly looks a bit weird


4894
06:22:53,200 --> 06:22:57,360
i think there's a better way of presenting this instead of printing the


4895
06:22:57,360 --> 06:23:02,718
list by itself i want for row in combined comp


4896
06:23:02,718 --> 06:23:04,878
print row


4897
06:23:04,878 --> 06:23:10,798
and now if i run this we can see the entire output like this


4898
06:23:10,798 --> 06:23:14,638
much easier to read and let's go through what happened here


4899
06:23:14,638 --> 06:23:18,958
that is probably kind of confusing right now


4900
06:23:18,958 --> 06:23:23,520
i think the best way to go over this is to separate these two lists we have an


4901
06:23:23,520 --> 06:23:28,638
inner list this x for x in range five and then we have an outer range the


4902
06:23:28,638 --> 06:23:32,798
entire list comprehension that's a terrible line let's do it like that's


4903
06:23:32,798 --> 06:23:36,080
still a terrible line let's do it like this


4904
06:23:36,080 --> 06:23:41,440
the yellow part is always this inner part here and this we now got multiple


4905
06:23:41,440 --> 06:23:45,280
times we have one here one here one here and so on


4906
06:23:45,280 --> 06:23:49,920
they are all x for x and range five the reason why we got this multiple


4907
06:23:49,920 --> 06:23:56,718
times is because of this part here we basically created this


4908
06:23:56,718 --> 06:24:00,878
list 10 times and that way you can create a list that


4909
06:24:00,878 --> 06:24:03,920
contains other lists although


4910
06:24:03,920 --> 06:24:09,440
still not particularly useful but where this system becomes incredibly powerful


4911
06:24:09,440 --> 06:24:14,080
is you can put this yq for example


4912
06:24:14,080 --> 06:24:18,320
into the original list let me actually demonstrate


4913
06:24:18,320 --> 06:24:21,920
instead of just having the x as the value for this


4914
06:24:21,920 --> 06:24:26,958
list i want to have instead a tuple with x and y


4915
06:24:26,958 --> 06:24:30,718
if i run this now we are getting


4916
06:24:30,718 --> 06:24:35,760
let me use different colors for this we have a tuple this tuple here


4917
06:24:35,760 --> 06:24:41,520
and this tuple is inside of a list this list here


4918
06:24:41,520 --> 06:24:46,878
that is the list we are getting from this inner list comprehension


4919
06:24:46,878 --> 06:24:54,160
finally then we have a list of lists and this is the entire list comprehension


4920
06:24:54,160 --> 06:25:02,160
and i suppose inside of the tuple we have the x and we have the y value


4921
06:25:02,160 --> 06:25:08,558
x increases on every column and y is increasing on every single row


4922
06:25:08,558 --> 06:25:15,200
e is y0 y1 y2 and so on with the system you can create


4923
06:25:15,200 --> 06:25:21,120
incredibly complex data structures you could theoretically even add a third


4924
06:25:21,120 --> 06:25:26,240
and a fourth list comprehension but by that point things are a bit overkill i


4925
06:25:26,240 --> 06:25:29,600
think i would not recommend overthinking this


4926
06:25:29,600 --> 06:25:33,440
it can get really complex and it doesn't have to be as complex


4927
06:25:33,440 --> 06:25:37,760
if you really wanted to make something more complex you probably want to use a


4928
06:25:37,760 --> 06:25:42,638
for loop but alright with that we can do an


4929
06:25:42,638 --> 06:25:46,478
exercise and then we are basically good to go


4930
06:25:46,478 --> 06:25:52,160
and what i want you guys to do is to create the fields for a chess


4931
06:25:52,160 --> 06:25:55,760
board and just in case you had actually fun


4932
06:25:55,760 --> 06:26:02,000
hobbies at school a chessboard has the fields a b c d e f g and h


4933
06:26:02,000 --> 06:26:06,718
which is eight letters in total and then we also have the fields from


4934
06:26:06,718 --> 06:26:12,160
one let's say one two three four five six seven and eight


4935
06:26:12,160 --> 06:26:17,840
which basically means the first field you are going to get is a one


4936
06:26:17,840 --> 06:26:23,120
and then you keep on creating more fields and at some point all the way at


4937
06:26:23,120 --> 06:26:27,200
the bottom you should have h8


4938
06:26:27,200 --> 06:26:32,240
and if you want an extra challenge this is not actually a chess board because a


4939
06:26:32,240 --> 06:26:40,000
real chess board would have the a1 at the bottom and the h8 in the top right i


4940
06:26:40,000 --> 06:26:44,478
guess i can cover both see how far you get but pause the video now and try this


4941
06:26:44,478 --> 06:26:47,120
one yourself


4942
06:26:48,798 --> 06:26:53,040
let's get started by commenting out all of this


4943
06:26:53,040 --> 06:26:57,840
and then i want to start let me call it chess


4944
06:26:57,840 --> 06:27:02,160
board and in here i want to start with the


4945
06:27:02,160 --> 06:27:05,120
square brackets for my list comprehension


4946
06:27:05,120 --> 06:27:10,798
and i guess we can start with the numbers so num for num


4947
06:27:10,798 --> 06:27:13,360
in and now we want range


4948
06:27:13,360 --> 06:27:18,558
and let's start with 8 and let's see what we get


4949
06:27:18,558 --> 06:27:23,920
i want to print my chessboard and i get the numbers from zero to seven


4950
06:27:23,920 --> 06:27:30,080
which is not a chess board we need the numbers from one to eight


4951
06:27:30,080 --> 06:27:35,200
for that i'm going to specify a start value here and now the end value is


4952
06:27:35,200 --> 06:27:38,558
going to be 9. if i run this now we get the numbers


4953
06:27:38,558 --> 06:27:43,200
from 0 to 8. we have the inner


4954
06:27:43,200 --> 06:27:47,280
list comprehension now for the outer


4955
06:27:47,280 --> 06:27:51,520
and now this might have been the one part where you struggled that was how to


4956
06:27:51,520 --> 06:27:55,680
get each individual letter here and the solution is actually really


4957
06:27:55,680 --> 06:28:01,600
simple all you need is to type the string a b c d e f g and h


4958
06:28:01,600 --> 06:28:06,478
if you have this and i run this again we get this entire list except it's very


4959
06:28:06,478 --> 06:28:10,478
hard to read so let me do it again for row in


4960
06:28:10,478 --> 06:28:13,600
chessboard print


4961
06:28:13,600 --> 06:28:19,200
the row there we go this is much easier to read


4962
06:28:19,200 --> 06:28:24,160
the problem now is that we want to have the letter and the number this happens


4963
06:28:24,160 --> 06:28:30,878
inside of this part here i want to have the letter


4964
06:28:30,878 --> 06:28:33,920
and then the number if i run this now


4965
06:28:33,920 --> 06:28:39,360
we have a 1 in the top left and h8 in the bottom right


4966
06:28:39,360 --> 06:28:44,958
that's a good start although i guess doing this as a tuple isn't ideal


4967
06:28:44,958 --> 06:28:48,798
but you don't have to you could totally create an f string here


4968
06:28:48,798 --> 06:28:55,680
and in there i want to have the letter and i want to have the number


4969
06:28:55,680 --> 06:28:59,680
now running this gets me something like this i think that looks a bit more


4970
06:28:59,680 --> 06:29:03,040
appropriate the difference here really doesn't


4971
06:29:03,040 --> 06:29:07,040
matter all that much and now if you wanted to invert all of


4972
06:29:07,040 --> 06:29:10,718
this meaning that instead of the


4973
06:29:10,718 --> 06:29:14,478
a1 here you would want this top part to be


4974
06:29:14,478 --> 06:29:21,120
h1 and then this part down here would be a1


4975
06:29:21,120 --> 06:29:26,718
in a chess board the bottom left field is always a1 and the top right one this


4976
06:29:26,718 --> 06:29:31,280
one here would be h8 to achieve that


4977
06:29:31,280 --> 06:29:36,958
you could just type out this string here in reverse but that would be kind of


4978
06:29:36,958 --> 06:29:42,478
annoying and not exactly scalable if you wanted to make something larger


4979
06:29:42,478 --> 06:29:47,600
but here we can do something really clever we can use slicing


4980
06:29:47,600 --> 06:29:54,000
remember this from quite a few videos ago we are specifying a start an end and


4981
06:29:54,000 --> 06:29:58,718
a step size now the start and the end


4982
06:29:58,718 --> 06:30:02,878
if we leave them empty is giving us the entire string


4983
06:30:02,878 --> 06:30:07,120
but now if we specify for the step size negative one


4984
06:30:07,120 --> 06:30:11,600
then we are going to go backwards over the string


4985
06:30:11,600 --> 06:30:16,240
now to understand this part you have to understand return statements basically


4986
06:30:16,240 --> 06:30:22,558
what happens here is originally we just returned this string but now because of


4987
06:30:22,558 --> 06:30:26,958
this slicing operation the four letter in


4988
06:30:26,958 --> 06:30:34,320
is looking at the entire operation here because this is what gets returned


4989
06:30:34,320 --> 06:30:37,840
this is really something you eventually understand when you play around more


4990
06:30:37,840 --> 06:30:42,160
with python it does take some time but now if i run this we are starting with


4991
06:30:42,160 --> 06:30:46,000
h1 in the top left and a8 in the bottom right


4992
06:30:46,000 --> 06:30:50,478
and with that we have a proper chest field


4993
06:30:50,478 --> 06:30:54,558
i hope that wasn't too bad list comprehension especially early on can


4994
06:30:54,558 --> 06:30:59,040
get very confusing besides a list comprehension we have


4995
06:30:59,040 --> 06:31:04,160
other types of comprehension as well one for each type of container at least kind


4996
06:31:04,160 --> 06:31:07,600
of and before i cover them i really want to


4997
06:31:07,600 --> 06:31:12,638
emphasize that list comprehension are by far the most common comprehension you


4998
06:31:12,638 --> 06:31:16,638
are going to do i am going to include these mostly for


4999
06:31:16,638 --> 06:31:21,120
completion sake but you probably aren't going to use them very much


5000
06:31:21,120 --> 06:31:25,440
comprehensions work quite easily with dictionaries and sets this would look


5001
06:31:25,440 --> 06:31:31,040
like this for a dictionary and like this for a set set is actually super easy


5002
06:31:31,040 --> 06:31:35,200
all we are doing here is we are replacing the square brackets with curly


5003
06:31:35,200 --> 06:31:39,600
brackets and then we are done that is literally the only difference


5004
06:31:39,600 --> 06:31:43,920
for a dictionary the one thing you really have to keep in mind is that we


5005
06:31:43,920 --> 06:31:47,520
always need the key then a colon


5006
06:31:47,520 --> 06:31:51,680
and then a value in this case


5007
06:31:51,680 --> 06:31:56,320
both of them would be num meaning we would create a dictionary that would


5008
06:31:56,320 --> 06:32:02,958
have key value pairs like 1 and 1. then 2 and 2 three and three and so on


5009
06:32:02,958 --> 06:32:07,200
not exactly useful but it's something you can refine


5010
06:32:07,200 --> 06:32:12,000
and that brings us to the final type of comprehension a tuple comprehension this


5011
06:32:12,000 --> 06:32:16,958
one works a bit differently in here you are still using num for num


5012
06:32:16,958 --> 06:32:22,080
in range 10. the problem is for python this kind of operation was already


5013
06:32:22,080 --> 06:32:26,798
covered using the normal brackets as a consequence this operation gets a bit


5014
06:32:26,798 --> 06:32:30,478
weird to create a proper tuple out of it you


5015
06:32:30,478 --> 06:32:34,558
would need the tuple function but after you have done that


5016
06:32:34,558 --> 06:32:39,760
you are back to a normal tuple with whatever operation you have in here so


5017
06:32:39,760 --> 06:32:44,558
not that much of a change and that is basically it


5018
06:32:44,558 --> 06:32:49,520
let's have a look at all of this in code and let's get started with a set


5019
06:32:49,520 --> 06:32:53,040
comprehension this one we are creating with curly


5020
06:32:53,040 --> 06:32:55,840
brackets and now in here we can just do the


5021
06:32:55,840 --> 06:33:01,280
normal comprehension stuff for example num for num in range


5022
06:33:01,280 --> 06:33:06,478
let's say 100 and if i print the set comprehension


5023
06:33:06,478 --> 06:33:10,080
i am getting all the numbers from 0 to 99


5024
06:33:10,080 --> 06:33:14,958
this is basically all you have to know and well let's get to the next one the


5025
06:33:14,958 --> 06:33:21,040
much more interesting one the dictionary comprehension


5026
06:33:21,040 --> 06:33:24,320
for this one we again need curly brackets


5027
06:33:24,320 --> 06:33:29,760
but now the important thing is we need a key and we need a value


5028
06:33:29,760 --> 06:33:34,958
but once you have those two you would still continue with four x in some kind


5029
06:33:34,958 --> 06:33:41,200
of list in my case let's go with num in


5030
06:33:41,200 --> 06:33:46,320
range 100 and now i have to define values for key


5031
06:33:46,320 --> 06:33:50,160
and for value i guess from the example i could name


5032
06:33:50,160 --> 06:33:55,200
both num and then print the entire


5033
06:33:55,200 --> 06:34:00,240
dictionary comprehension and now we are getting a dictionary although i do want


5034
06:34:00,240 --> 06:34:06,240
to fix the typo that is annoying me there we go


5035
06:34:06,240 --> 06:34:10,718
now what we are getting in here is a dictionary with lots of key value pairs


5036
06:34:10,718 --> 06:34:15,600
this is one this is another this is the third and so on


5037
06:34:15,600 --> 06:34:20,638
and in here we have set the key and the value to the same number as a


5038
06:34:20,638 --> 06:34:26,080
consequence they both have the same number which really is not useful


5039
06:34:26,080 --> 06:34:29,840
to make this a bit more interesting we could for example


5040
06:34:29,840 --> 06:34:34,718
get the power of num and run this again now we can see a bit


5041
06:34:34,718 --> 06:34:40,080
more of a difference the key is 2 for this one and the value is 4. 3 gets us 9


5042
06:34:40,080 --> 06:34:44,080
and so on this way you can at least see different values


5043
06:34:44,080 --> 06:34:49,600
that is basically it for dictionary comprehensions finally we have tuple


5044
06:34:49,600 --> 06:34:53,440
comprehensions and in here you would use normal


5045
06:34:53,440 --> 06:34:57,120
brackets and now you would still write something


5046
06:34:57,120 --> 06:35:04,718
like num for a num in range 100. if i print this tuple comprehension


5047
06:35:04,718 --> 06:35:08,718
we are getting a generator object at some


5048
06:35:08,718 --> 06:35:13,520
location in our memory which well is really not useful


5049
06:35:13,520 --> 06:35:18,320
that being said you could work with this super comprehension for example in a for


5050
06:35:18,320 --> 06:35:23,520
loop i could write for let's say value in tuple comprehension


5051
06:35:23,520 --> 06:35:28,000
and i want to print the value if i run this now


5052
06:35:28,000 --> 06:35:31,600
we are getting all of the values inside of it


5053
06:35:31,600 --> 06:35:36,160
meaning this object is working as intended we just can't really see the


5054
06:35:36,160 --> 06:35:39,440
result to actually see it we would have to


5055
06:35:39,440 --> 06:35:43,360
convert it to a tuple and then we are done


5056
06:35:43,360 --> 06:35:47,280
if i print the tuple comprehension run this again


5057
06:35:47,280 --> 06:35:50,320
now we can see the result we would expect


5058
06:35:50,320 --> 06:35:56,240
the reason for this is that these normal brackets are used quite often in python


5059
06:35:56,240 --> 06:36:00,160
and in this case they are in conflict with the tuple comprehension but that's


5060
06:36:00,160 --> 06:36:02,878
not something you have to worry about too much


5061
06:36:02,878 --> 06:36:07,440
i have never ever seen anybody use a tupel comprehension to be honest


5062
06:36:07,440 --> 06:36:11,840
the one thing you see once in a while is a dictionary comprehension but most of


5063
06:36:11,840 --> 06:36:15,440
the time you see a list comprehension and nothing else


5064
06:36:15,440 --> 06:36:19,440
and i guess with that we can do an exercise


5065
06:36:19,440 --> 06:36:26,160
what i want you guys to do is to create a dictionary with the keys a b c d and e


5066
06:36:26,160 --> 06:36:30,320
and each key should have a list as a value with the values one two three four


5067
06:36:30,320 --> 06:36:33,920
and five that should be one list for each of


5068
06:36:33,920 --> 06:36:37,760
these keys pause the video now and try to figure


5069
06:36:37,760 --> 06:36:41,240
this one out yourself


5070
06:36:42,080 --> 06:36:47,920
all right let me start by creating an exercise comprehension or whatever you


5071
06:36:47,920 --> 06:36:51,120
want to name it since we are creating a dictionary i


5072
06:36:51,120 --> 06:36:55,280
want to have my curly brackets now in here let's get started by


5073
06:36:55,280 --> 06:37:01,040
creating the keys we need to format key and value


5074
06:37:01,040 --> 06:37:04,320
then for x in


5075
06:37:04,320 --> 06:37:09,360
some kind of iterable and since these are the values that


5076
06:37:09,360 --> 06:37:16,000
change the iterable here should be a string with a b c d and e


5077
06:37:16,000 --> 06:37:20,798
for proper naming here let me rename this x to a letter


5078
06:37:20,798 --> 06:37:27,840
and now my key should be this letter and since the value doesn't change it is


5079
06:37:27,840 --> 06:37:33,600
always one two three four and five i can just type the value in here and now all


5080
06:37:33,600 --> 06:37:38,958
i have to do is to print the exercise comprehension run all of this


5081
06:37:38,958 --> 06:37:42,878
and we can see we have the dictionary here


5082
06:37:42,878 --> 06:37:46,878
this one worked pretty well let me comment out the earlier part


5083
06:37:46,878 --> 06:37:52,000
there we go this looks much cleaner in this part we are going to cover


5084
06:37:52,000 --> 06:37:56,718
functions that take functions as argument which is probably going to


5085
06:37:56,718 --> 06:38:00,400
sound a bit weird but let's talk about it


5086
06:38:00,400 --> 06:38:06,000
when you pass arguments into a function it is perfectly fine to pass a function


5087
06:38:06,000 --> 06:38:11,280
as an argument into another function and let's do this by example to actually


5088
06:38:11,280 --> 06:38:14,798
illustrate what i mean and for that i want to use the sorted


5089
06:38:14,798 --> 06:38:19,920
function this one sorts some kind of iterable in some kind of way it looks


5090
06:38:19,920 --> 06:38:24,000
like this the name of the function is sorted we


5091
06:38:24,000 --> 06:38:28,638
have to pass in some kind of iterable most of the time it's going to be a list


5092
06:38:28,638 --> 06:38:34,080
but it doesn't have to be and then we need some kind of function


5093
06:38:34,080 --> 06:38:37,920
to tell python how it needs to sort this list


5094
06:38:37,920 --> 06:38:44,798
for example do you want to sort the list from the smallest to the largest number


5095
06:38:44,798 --> 06:38:51,360
do you want the opposite of that or if you have for example a list that


5096
06:38:51,360 --> 06:38:56,718
contains strings how do you want to sort that do you want to go by the character


5097
06:38:56,718 --> 06:39:00,400
in the alphabet do you want to go by the amount of characters inside of each


5098
06:39:00,400 --> 06:39:03,520
string it really depends here python doesn't


5099
06:39:03,520 --> 06:39:07,600
know by itself meaning you have to write a function to


5100
06:39:07,600 --> 06:39:14,160
tell how to sort this iterable and this is the function we have to


5101
06:39:14,160 --> 06:39:19,360
create ourselves which well isn't that difficult but you


5102
06:39:19,360 --> 06:39:22,798
do have to understand the system so let's have a look at this straight in


5103
06:39:22,798 --> 06:39:28,638
code in my code i already have one list and


5104
06:39:28,638 --> 06:39:35,840
this list right now is kind of unsorted it's a bit random and to sort it i need


5105
06:39:35,840 --> 06:39:40,400
the sorted function and in here at the very least i have to


5106
06:39:40,400 --> 06:39:45,040
pass in one argument and that is the list i want to sort


5107
06:39:45,040 --> 06:39:49,280
what i get returned from this let me print it


5108
06:39:49,280 --> 06:39:55,200
i am getting the list sorted and this you usually do with a list as a


5109
06:39:55,200 --> 06:40:02,478
matter of fact a list even has a sword method that sorts the entire list


5110
06:40:02,478 --> 06:40:06,558
if i run this and let me comment out


5111
06:40:06,558 --> 06:40:11,920
this line here list.sort after i run this i can print my list1 and now the


5112
06:40:11,920 --> 06:40:16,558
list was sorted as well this method and this function they are


5113
06:40:16,558 --> 06:40:20,718
basically doing the same thing but this is not what we are here for


5114
06:40:20,718 --> 06:40:25,920
we want to look at sorted via the other arguments and there are


5115
06:40:25,920 --> 06:40:31,440
two you can pass in here one is really easy and one is the


5116
06:40:31,440 --> 06:40:35,440
function i just talked about but let's start with the easier one


5117
06:40:35,440 --> 06:40:39,600
the one argument you can use here and let me use a keyboard argument we want


5118
06:40:39,600 --> 06:40:44,878
to specify a reverse and then here python expects a boolean


5119
06:40:44,878 --> 06:40:48,878
if i set this to true it reverses the entire list


5120
06:40:48,878 --> 06:40:52,718
now we go from the highest to lowest instead of the lowest to the highest


5121
06:40:52,718 --> 06:40:58,160
that's basically it what is much more interesting is the key


5122
06:40:58,160 --> 06:41:03,280
argument or parameter because in here python is expecting some


5123
06:41:03,280 --> 06:41:07,360
kind of function and let me actually demonstrate a use


5124
06:41:07,360 --> 06:41:13,760
case where you would need it for that i have another list that i want


5125
06:41:13,760 --> 06:41:19,920
to store in let's call it list 2. in here i have a list that contains two


5126
06:41:19,920 --> 06:41:26,478
builds in each tuple we have for example a and 3 we have b and 10 c and 6 and so


5127
06:41:26,478 --> 06:41:29,200
on and this would be


5128
06:41:29,200 --> 06:41:35,200
really difficult to sort if i print sorted and list 2 let me comment out the


5129
06:41:35,200 --> 06:41:41,120
first part and run this again we now get well no change in the list


5130
06:41:41,120 --> 06:41:44,878
python just doesn't know what to do with this list


5131
06:41:44,878 --> 06:41:48,878
but in my case i want to sort this list by


5132
06:41:48,878 --> 06:41:54,718
the integer inside of each tuple meaning this one here should be first


5133
06:41:54,718 --> 06:41:58,718
then the second then this third and then this last


5134
06:41:58,718 --> 06:42:03,360
and for that behavior i have to tell python which value to access


5135
06:42:03,360 --> 06:42:06,878
and for that we have to create a function


5136
06:42:06,878 --> 06:42:10,878
let me do it straight below the list although most of the time you would do


5137
06:42:10,878 --> 06:42:14,478
it straight at the top of the code but in my case i'm going to keep this a bit


5138
06:42:14,478 --> 06:42:19,760
more readable i want to create let me call it a sort


5139
06:42:19,760 --> 06:42:22,958
function and this is always going to need one


5140
06:42:22,958 --> 06:42:28,638
argument let me call it item and now how this is going to work inside


5141
06:42:28,638 --> 06:42:33,120
of my sorted function i have to specify a key


5142
06:42:33,120 --> 06:42:37,280
and for this key i want to have my sort function


5143
06:42:37,280 --> 06:42:42,160
and really important now you do not call this function


5144
06:42:42,160 --> 06:42:46,798
there should not be any brackets after the sort function except to close sorted


5145
06:42:46,798 --> 06:42:51,040
and print you are only passing in the function you are not calling the


5146
06:42:51,040 --> 06:42:54,958
function python or well sorted does this one


5147
06:42:54,958 --> 06:43:01,120
internally so you don't have to do it and basically what is happening is that


5148
06:43:01,120 --> 06:43:08,000
sorted goes through each of these tuples in this example and passes each tuple


5149
06:43:08,000 --> 06:43:12,558
inside of the sort function as an argument


5150
06:43:12,558 --> 06:43:18,798
and then this function has to return some kind of integer


5151
06:43:18,798 --> 06:43:24,638
let me write i n t and the size of this integer is going to


5152
06:43:24,638 --> 06:43:30,080
determine how we are ordering this list so in my case


5153
06:43:30,080 --> 06:43:36,798
all i want to do inside of the function i want to return item and then 1.


5154
06:43:36,798 --> 06:43:41,680
for example if i'm getting this tuple here as an argument all i really want to


5155
06:43:41,680 --> 06:43:49,200
do is to pick this integer and return it and then python knows what to look for


5156
06:43:49,200 --> 06:43:52,320
inside of this list for the sorting algorithm


5157
06:43:52,320 --> 06:43:58,160
and that is literally it if i run this now we can see the list is sorted now


5158
06:43:58,160 --> 06:44:04,558
via the integer inside of the tuple so we have 3 5 6 and 10.


5159
06:44:04,558 --> 06:44:10,000
and of course inside of this function you can be really fancy and add a whole


5160
06:44:10,000 --> 06:44:14,160
bunch of stuff the thing is most of the time you are


5161
06:44:14,160 --> 06:44:18,798
not going to do that in almost all cases you simply want to


5162
06:44:18,798 --> 06:44:23,200
tell python a bit more in detail what kind of value you are looking for this


5163
06:44:23,200 --> 06:44:28,798
is very rarely becoming complicated as a consequence you hardly ever write a


5164
06:44:28,798 --> 06:44:33,840
dedicated function instead you use lambdas


5165
06:44:33,840 --> 06:44:37,280
let me actually copy this line


5166
06:44:37,280 --> 06:44:41,840
and now i want to have my list 2 and for the key now


5167
06:44:41,840 --> 06:44:47,040
i don't want a function instead i want a lambda function


5168
06:44:47,040 --> 06:44:52,080
and for this one we again as the first argument here we have to specify what


5169
06:44:52,080 --> 06:44:57,440
kind of parameter we want that is this item here this one would be equivalent


5170
06:44:57,440 --> 06:45:00,958
to this item here inside of this


5171
06:45:00,958 --> 06:45:04,558
we have to tell python what to do with this item


5172
06:45:04,558 --> 06:45:10,878
in this case all i want to do is get the item and then pick the first index


5173
06:45:10,878 --> 06:45:15,920
and since this item here will be returned automatically this is


5174
06:45:15,920 --> 06:45:22,080
equivalent to all of this and with that we are done i can run this


5175
06:45:22,080 --> 06:45:25,360
now and we get the same result so this is


5176
06:45:25,360 --> 06:45:32,080
working just fine and that is essentially it now with that


5177
06:45:32,080 --> 06:45:36,400
we can do an exercise and for the exercise


5178
06:45:36,400 --> 06:45:40,798
i want to stick with the same data we have used earlier this one here we have


5179
06:45:40,798 --> 06:45:45,920
inventory names inventory numbers and i already used zip to zip these two


5180
06:45:45,920 --> 06:45:49,840
together meaning now let me comment out all of


5181
06:45:49,840 --> 06:45:52,080
this


5182
06:45:52,160 --> 06:45:56,000
i want to print my combined list


5183
06:45:56,000 --> 06:46:01,600
run this one now and we have a list with tuples inside and inside of each tuple


5184
06:46:01,600 --> 06:46:05,760
we have the name of the item and the amount of how much we have of that item


5185
06:46:05,760 --> 06:46:09,120
and i want you guys to do two operations actually


5186
06:46:09,120 --> 06:46:15,280
number one is sort this list by inventory


5187
06:46:15,280 --> 06:46:19,600
numbers for this list the first item


5188
06:46:19,600 --> 06:46:23,360
should be this 12 year with wheels


5189
06:46:23,360 --> 06:46:27,840
next up should be 23 with screwdrivers and so on


5190
06:46:27,840 --> 06:46:33,200
and number two sort this list by length of


5191
06:46:33,200 --> 06:46:38,000
the inventory name


5192
06:46:38,000 --> 06:46:43,520
this means that the longer the word gets the later it should be in the list i


5193
06:46:43,520 --> 06:46:47,920
guess what should be first and screwdrivers should


5194
06:46:47,920 --> 06:46:51,200
be last we are looking at the length of each


5195
06:46:51,200 --> 06:46:54,878
string here and well pause the video now and try


5196
06:46:54,878 --> 06:46:58,280
this one yourself


5197
06:46:58,958 --> 06:47:03,280
let's start let me call the first one sorted


5198
06:47:03,280 --> 06:47:06,638
comp by numbers


5199
06:47:06,638 --> 06:47:11,120
and here i want to have the sorted function and inside of list i have to


5200
06:47:11,120 --> 06:47:17,440
first of all pass my combined list now i have to specify a key and for this


5201
06:47:17,440 --> 06:47:21,440
one i want to have a lambda function let me use


5202
06:47:21,440 --> 06:47:27,360
a num here as the parameter name since the argument we are expecting is


5203
06:47:27,360 --> 06:47:33,440
some kind of tuple let's call this one the inventory tuple


5204
06:47:33,440 --> 06:47:38,000
all we want to do with this one is to get the inventory tuple


5205
06:47:38,000 --> 06:47:44,000
inventory tuple and get the item with index number one


5206
06:47:44,000 --> 06:47:48,718
we should be done let me print this sorted comp by num


5207
06:47:48,718 --> 06:47:53,760
and there we go the first tuple is now with 12 then 23


5208
06:47:53,760 --> 06:47:59,920
43 43 95 and 421 this is working just fine


5209
06:47:59,920 --> 06:48:05,760
so next one we get the sorted comprehension


5210
06:48:05,760 --> 06:48:07,760
by name


5211
06:48:07,760 --> 06:48:12,558
once again we are going to need sorted i want the combined list


5212
06:48:12,558 --> 06:48:18,080
and now we have to specify a key i guess here again we are still going to


5213
06:48:18,080 --> 06:48:22,478
get the inventory tuple inside of this


5214
06:48:22,478 --> 06:48:27,840
we still want to look at the inventory tuple but now we want to have the index


5215
06:48:27,840 --> 06:48:34,400
0 because we want to look at the strings and we don't want to return the strings


5216
06:48:34,400 --> 06:48:37,920
we want to return the length of the string


5217
06:48:37,920 --> 06:48:42,240
meaning we want to have the length function and then the result of that is


5218
06:48:42,240 --> 06:48:47,280
going to get returned i can now print the sorted comp name


5219
06:48:47,280 --> 06:48:51,920
and we get the first item is wood there are four


5220
06:48:51,920 --> 06:48:57,280
letters in here then we have screws this is six characters


5221
06:48:57,280 --> 06:49:02,558
wheels is also six and metal parts is definitely more than six


5222
06:49:02,558 --> 06:49:07,360
meaning this seems to be working just fine and with that we have the sorted


5223
06:49:07,360 --> 06:49:10,240
function but there are two more functions like it


5224
06:49:10,240 --> 06:49:14,320
that i would like to cover for this part we are going to look at


5225
06:49:14,320 --> 06:49:19,600
two more functions that take functions as arguments besides sorted we also have


5226
06:49:19,600 --> 06:49:24,878
map and filter at least for basic python now that being said


5227
06:49:24,878 --> 06:49:29,840
you probably are very rarely going to actually use or see them they have


5228
06:49:29,840 --> 06:49:32,798
basically been replaced by list comprehension


5229
06:49:32,798 --> 06:49:36,958
which is a more elegant way to do all of this but let's have a look at all of


5230
06:49:36,958 --> 06:49:41,360
this in practice once again i have an empty python file


5231
06:49:41,360 --> 06:49:47,440
except now i have my list that contains a list with the numbers from 1 to 5.


5232
06:49:47,440 --> 06:49:52,718
the two functions let's start with map all that this one really does is it


5233
06:49:52,718 --> 06:50:00,240
changes values with a function inside of a iterable


5234
06:50:00,240 --> 06:50:05,520
just like we've sorted we have to start by using the map function name and in


5235
06:50:05,520 --> 06:50:12,478
here we need two arguments we need some kind of key and then we need an iterable


5236
06:50:12,478 --> 06:50:16,798
in my case the iterable is going to be my list


5237
06:50:16,798 --> 06:50:22,160
for the key i want to create some kind of function


5238
06:50:22,160 --> 06:50:27,200
and in my case i want to create a power function


5239
06:50:27,200 --> 06:50:33,120
so basically what map does is it cycles through this list which in


5240
06:50:33,120 --> 06:50:37,360
our case is going to give us one two three four and five


5241
06:50:37,360 --> 06:50:42,638
every single one of these values will be passed into the power function


5242
06:50:42,638 --> 06:50:46,240
as an argument and then whatever the power function


5243
06:50:46,240 --> 06:50:50,798
returns will be used to create a new list


5244
06:50:50,798 --> 06:50:54,798
instead of sorting it we are just changing every single value


5245
06:50:54,798 --> 06:51:00,000
map in a way is simpler than sorted i want to create a power function


5246
06:51:00,000 --> 06:51:04,638
and this one again is going to need some kind of parameter in my case i'm going


5247
06:51:04,638 --> 06:51:08,478
to call it num and now we have to return


5248
06:51:08,478 --> 06:51:13,040
what we want this new value to be in my case i just want to take the power of


5249
06:51:13,040 --> 06:51:17,680
this num and that is all we needed


5250
06:51:17,680 --> 06:51:22,400
now i can print all of this and let's see what we get


5251
06:51:22,400 --> 06:51:27,360
we are getting a map object cool completely useless


5252
06:51:27,360 --> 06:51:32,958
but we can convert this to a list and then we can actually read it if i


5253
06:51:32,958 --> 06:51:37,520
run this now you can see we have taken the power of


5254
06:51:37,520 --> 06:51:41,120
every single value inside of this original list


5255
06:51:41,120 --> 06:51:47,200
one remained a one but the two became a four and the three


5256
06:51:47,200 --> 06:51:52,160
became a nine and so on we went through this list and we applied


5257
06:51:52,160 --> 06:51:57,680
this function to every single value and that is literally all that happened here


5258
06:51:57,680 --> 06:52:01,040
once again since it's kind of annoying to write a


5259
06:52:01,040 --> 06:52:07,120
whole function for something so simple we are usually going to use a lambda


5260
06:52:07,120 --> 06:52:11,680
function we need the lambda keyword and now the


5261
06:52:11,680 --> 06:52:16,558
name of the parameter in my case i want to go with num all i want to return here


5262
06:52:16,558 --> 06:52:21,440
is num and the power of that if i run this now


5263
06:52:21,440 --> 06:52:24,718
we get the same outcome if you compare this to list


5264
06:52:24,718 --> 06:52:29,360
comprehension it really should look kind of familiar we're going to talk about


5265
06:52:29,360 --> 06:52:32,400
this in a bit more detail but first of all


5266
06:52:32,400 --> 06:52:39,360
i want to look at the filter function and this one filters out values


5267
06:52:39,360 --> 06:52:42,478
from a condition


5268
06:52:42,478 --> 06:52:48,400
for example let's say in this list here i only want to get the values that are


5269
06:52:48,400 --> 06:52:53,680
smaller than four one two and three we would need the filter function and in


5270
06:52:53,680 --> 06:52:58,400
here again we are going to need some kind of


5271
06:52:58,400 --> 06:53:02,638
key and then an iterable we want to change


5272
06:53:02,638 --> 06:53:07,200
the iterable in my case is going to be my list


5273
06:53:07,200 --> 06:53:12,000
and for the key i guess we can create another function


5274
06:53:12,000 --> 06:53:15,680
let me call it get below


5275
06:53:15,680 --> 06:53:19,920
4 that is not an underscore and for this


5276
06:53:19,920 --> 06:53:23,680
function we are going to need another parameter


5277
06:53:23,680 --> 06:53:29,360
once again i'm going to stick with num i want to check if this number is below


5278
06:53:29,360 --> 06:53:34,160
4 so if num is below 4


5279
06:53:34,160 --> 06:53:36,958
i want to return true


5280
06:53:36,958 --> 06:53:40,718
and if that is not the case i want to return false


5281
06:53:40,718 --> 06:53:44,400
and this is the function i want to pass in here


5282
06:53:44,400 --> 06:53:49,040
and this let me comment out all of the stuff we have seen earlier


5283
06:53:49,040 --> 06:53:54,160
now i can print my filter and you might already expect what we are


5284
06:53:54,160 --> 06:53:58,400
going to see we are getting a filter object which is


5285
06:53:58,400 --> 06:54:02,878
useless for us but we can convert it to a list


5286
06:54:02,878 --> 06:54:07,600
and then we can see now we only have values smaller than four


5287
06:54:07,600 --> 06:54:13,040
essentially what happened in here is that filter looks for every item inside


5288
06:54:13,040 --> 06:54:17,920
of this list we are again looking at 1 2 3 4 and 5.


5289
06:54:17,920 --> 06:54:22,240
each of these numbers is going to be passed into


5290
06:54:22,240 --> 06:54:27,360
this get below 4 as an argument and depending on what python gets


5291
06:54:27,360 --> 06:54:31,200
returned here this item either stays inside of a list


5292
06:54:31,200 --> 06:54:34,878
or it gets filtered out if python is getting true from this


5293
06:54:34,878 --> 06:54:40,718
function the number is going to stay inside of the list one two and three all


5294
06:54:40,718 --> 06:54:47,200
have the function returning true however four and five


5295
06:54:47,200 --> 06:54:52,558
had the function return false as a consequence they were filtered out out


5296
06:54:52,558 --> 06:54:57,440
of the list that is literally all that filter does


5297
06:54:57,440 --> 06:55:02,558
i guess once again i can duplicate the entire line because we don't have to


5298
06:55:02,558 --> 06:55:07,440
create a whole function we can use lambdas for that which is kind of how


5299
06:55:07,440 --> 06:55:13,600
this was intended to be used i want a lambda in here i want my number


5300
06:55:13,600 --> 06:55:18,798
and in here i want to run num is smaller than 4


5301
06:55:18,798 --> 06:55:23,280
and this works because python is going to convert all of this into a boolean


5302
06:55:23,280 --> 06:55:27,280
value so if i run all of this now we are


5303
06:55:27,280 --> 06:55:32,638
getting the same outcome except this line here is much easier and shorter


5304
06:55:32,638 --> 06:55:38,558
than all of this and with that we have filter and map


5305
06:55:38,558 --> 06:55:43,120
basically two functions you very rarely see nowadays


5306
06:55:43,120 --> 06:55:47,680
why that is we can actually see from the exercise


5307
06:55:47,680 --> 06:55:53,520
what i want you guys to do is to convert both of the power


5308
06:55:53,520 --> 06:55:58,798
and the filter function so this one and this one here let me uncomment all of


5309
06:55:58,798 --> 06:56:02,320
this i want you guys to convert this one and


5310
06:56:02,320 --> 06:56:08,558
this one to a list comprehension and see how much you remember


5311
06:56:10,160 --> 06:56:16,240
let me copy the two functions first and now i can comment out all of this here


5312
06:56:16,240 --> 06:56:22,718
so we are not getting confused the first one is the map function


5313
06:56:22,718 --> 06:56:26,798
and for this one let me do it straight inside of a print statement


5314
06:56:26,798 --> 06:56:30,478
in here i need to square brackets for the list comprehension


5315
06:56:30,478 --> 06:56:36,320
and now i want num for num in my list


5316
06:56:36,320 --> 06:56:39,600
this is the list we have gotten all the way up here


5317
06:56:39,600 --> 06:56:43,440
all we want to do is to get the power of it


5318
06:56:43,440 --> 06:56:49,040
and with that we are actually already done if i run this now we're getting the


5319
06:56:49,040 --> 06:56:53,520
same result except i think it's pretty obvious this


5320
06:56:53,520 --> 06:56:59,040
is much easier to read than all of this which is why map is very rarely used


5321
06:56:59,040 --> 06:57:02,798
nowadays if you really wanted to you could even


5322
06:57:02,798 --> 06:57:08,320
use a function in here as well and this would imitate map even more


5323
06:57:08,320 --> 06:57:13,680
so there's very rarely a reason nowadays to use map the main reason why you are


5324
06:57:13,680 --> 06:57:18,558
still learning it is because some older code examples might use it and you know


5325
06:57:18,558 --> 06:57:23,440
what they mean but chances are that you aren't going to use it yourself


5326
06:57:23,440 --> 06:57:28,160
all right now besides that we can do the same thing for filter and


5327
06:57:28,160 --> 06:57:33,200
let me comment out those two for this one again i want to have my


5328
06:57:33,200 --> 06:57:38,400
list comprehension and i want num for num


5329
06:57:38,400 --> 06:57:41,280
in my list


5330
06:57:41,280 --> 06:57:44,718
which if i run this is giving me the entire list


5331
06:57:44,718 --> 06:57:51,840
but now i only want this number if the number is smaller than four


5332
06:57:51,840 --> 06:57:57,920
and running this is giving me the exact same result and again this is much


5333
06:57:57,920 --> 06:58:03,200
easier to read than this one here which again is why filter is very very


5334
06:58:03,200 --> 06:58:07,920
rarely used nowadays in this part we are going to cover file


5335
06:58:07,920 --> 06:58:11,600
handling meaning we are going to open a file and


5336
06:58:11,600 --> 06:58:16,558
we are going to write into that file which is surprisingly simple


5337
06:58:16,558 --> 06:58:22,000
python is very capable of opening simple file formats the one we are going to see


5338
06:58:22,000 --> 06:58:26,478
in this video is dot txt which is the simplest form of storing


5339
06:58:26,478 --> 06:58:32,000
text on windows computers also works on a mac they are kind of universal


5340
06:58:32,000 --> 06:58:35,840
besides that you could also open a picture and there are a couple of other


5341
06:58:35,840 --> 06:58:41,120
basic file formats you could be working with but i'm going to stick to txt


5342
06:58:41,120 --> 06:58:45,520
now that being said python could at least in theory open


5343
06:58:45,520 --> 06:58:51,120
basically any kind of file let's say a blender file an excel file a


5344
06:58:51,120 --> 06:58:56,878
word file a pdf document python can open all of them but most of the time you are


5345
06:58:56,878 --> 06:58:59,600
going to need external modules to do that


5346
06:58:59,600 --> 06:59:04,160
what those are and how to use them we are going to cover later in this series


5347
06:59:04,160 --> 06:59:08,878
i guess as a good example here for some self-promotion a while back i made a


5348
06:59:08,878 --> 06:59:12,718
video on how to create a snake game in excel using python


5349
06:59:12,718 --> 06:59:17,040
totally doable kind of fun although very strange but


5350
06:59:17,040 --> 06:59:19,680
anyway let's have a look at all of this in code


5351
06:59:19,680 --> 06:59:24,878
before we start coding i want to look at my folder this one is looking like this


5352
06:59:24,878 --> 06:59:30,240
let me extend it a tiny bit inside of the code i have the python file itself


5353
06:59:30,240 --> 06:59:34,400
and i have a txt file called test if i open this one


5354
06:59:34,400 --> 06:59:40,478
i am getting a simple txt file with a bit of text inside nothing complicated


5355
06:59:40,478 --> 06:59:43,840
but well we don't want to over complicate things


5356
06:59:43,840 --> 06:59:48,558
this is the file i want to open and this is also the file i want to write in keep


5357
06:59:48,558 --> 06:59:53,760
in mind here both the python file and the text file are in the same folder


5358
06:59:53,760 --> 06:59:58,878
that is important to open it you have two ways


5359
06:59:58,878 --> 07:00:04,160
you could either open and close it manually


5360
07:00:04,160 --> 07:00:07,200
this means i want to create a new variable let me


5361
07:00:07,200 --> 07:00:11,600
call it file and the function you're looking for here is called open


5362
07:00:11,600 --> 07:00:17,600
and this open wants a file path and the name of the file in my case this is


5363
07:00:17,600 --> 07:00:22,958
going to be test.txt let me actually print what we get so i


5364
07:00:22,958 --> 07:00:28,320
want to print the file we are once again get some random thing


5365
07:00:28,320 --> 07:00:34,558
that we can't read but this we could convert to a list


5366
07:00:34,558 --> 07:00:40,000
and now we have the document as a list with all of the text inside


5367
07:00:40,000 --> 07:00:45,920
notice here at the end of each line we have a line break the one we have


5368
07:00:45,920 --> 07:00:50,080
seen all the way at the beginning this way the document knows where to end


5369
07:00:50,080 --> 07:00:53,120
one line the one thing you want to be aware of


5370
07:00:53,120 --> 07:00:57,600
right now is that we only need the file name because both files are in the same


5371
07:00:57,600 --> 07:01:00,638
folder if that wasn't the case


5372
07:01:00,638 --> 07:01:06,080
you would have to specify in what folder you are for example if the text was


5373
07:01:06,080 --> 07:01:10,840
inside of a folder you would need folder then a slash and then the name of the


5374
07:01:10,840 --> 07:01:17,520
file and if you want to go up one folder you would need two dots and that's


5375
07:01:17,520 --> 07:01:21,440
basically it this way you can create file paths and


5376
07:01:21,440 --> 07:01:27,600
find specific documents you want to open besides that there's one more thing that


5377
07:01:27,600 --> 07:01:31,280
you do want to keep in mind and that is


5378
07:01:31,280 --> 07:01:35,840
we have to close the file again if we had a longer code example and kept


5379
07:01:35,840 --> 07:01:40,718
it like this we would keep this file in memory which


5380
07:01:40,718 --> 07:01:46,160
wouldn't be necessary to do that you would need file.close


5381
07:01:46,160 --> 07:01:49,760
if you run this again now you are not going to see any difference


5382
07:01:49,760 --> 07:01:54,878
but this line removes the file out of the memory which is more efficient


5383
07:01:54,878 --> 07:01:58,080
and with that you can open and close a file


5384
07:01:58,080 --> 07:02:02,718
that being said this approach isn't really used that often


5385
07:02:02,718 --> 07:02:08,400
because the better way is let me call it open and close it


5386
07:02:08,400 --> 07:02:11,400
automatically


5387
07:02:11,520 --> 07:02:16,798
the way you would most of the time import a file is with the with statement


5388
07:02:16,798 --> 07:02:21,120
in here we need with open and then the file name this is still


5389
07:02:21,120 --> 07:02:25,280
going to be test dot txt and now


5390
07:02:25,280 --> 07:02:31,840
you have to write s and give this a name in my case i am going to go with file


5391
07:02:31,840 --> 07:02:37,120
what's happened here is basically the same that we have done


5392
07:02:37,120 --> 07:02:41,120
up here we opened a file just like we have done


5393
07:02:41,120 --> 07:02:44,160
here and this file we are storing in a


5394
07:02:44,160 --> 07:02:49,040
variable called file the same thing we have done up here


5395
07:02:49,040 --> 07:02:55,200
the difference now is we have to write some indented code in here


5396
07:02:55,200 --> 07:03:00,320
and as soon as this indentation is over then we are closing the file


5397
07:03:00,320 --> 07:03:05,280
automatically that way we are not going to need this line here this is also more


5398
07:03:05,280 --> 07:03:10,638
deliberate and possibly easier to read it's basically up to you both approaches


5399
07:03:10,638 --> 07:03:14,320
are fine but this is the one you are going to see more often


5400
07:03:14,320 --> 07:03:19,760
in here we could for example print and let me use the same line


5401
07:03:19,760 --> 07:03:25,120
i want to print the list of my file and we get exactly the same outcome


5402
07:03:25,120 --> 07:03:28,718
let me comment out the earlier part because this is the one i want to work


5403
07:03:28,718 --> 07:03:35,200
with the most now python has a few functions that you can use to read


5404
07:03:35,200 --> 07:03:39,840
documents especially txt files the one you're probably going to use the


5405
07:03:39,840 --> 07:03:44,400
most is file.read don't forget the brackets if you're


5406
07:03:44,400 --> 07:03:50,400
calling this you get a proper output from all of the stuff


5407
07:03:50,400 --> 07:03:53,840
read basically converts this into something that you can work with more


5408
07:03:53,840 --> 07:03:57,920
easily although keep in mind this read


5409
07:03:57,920 --> 07:04:03,840
is going to return if i use the type function it is going to give me a string


5410
07:04:03,840 --> 07:04:07,360
which means if i convert all of this to a list


5411
07:04:07,360 --> 07:04:12,000
i would get a whole bunch of individual characters that don't help me that much


5412
07:04:12,000 --> 07:04:16,478
the way you want to use this read function is just to get an overview of


5413
07:04:16,478 --> 07:04:21,200
what you have it's kind of difficult to cycle through this


5414
07:04:21,200 --> 07:04:25,280
but for that you could use something like for


5415
07:04:25,280 --> 07:04:29,760
line and then i want the list of the file and


5416
07:04:29,760 --> 07:04:34,080
now i can print the line and i want to comment out this


5417
07:04:34,080 --> 07:04:38,160
part here and now i get basically the same thing


5418
07:04:38,160 --> 07:04:41,920
since i'm not going to use this too much i'm going to keep it short but this is


5419
07:04:41,920 --> 07:04:46,878
kind of all you need to know about it if you had other kind of data you could


5420
07:04:46,878 --> 07:04:51,040
work more with this but that's beyond this video


5421
07:04:51,040 --> 07:04:55,760
what is not beyond this video is write some


5422
07:04:55,760 --> 07:05:00,638
file let me comment all of this out


5423
07:05:00,638 --> 07:05:05,760
and to write a file we again need with open


5424
07:05:05,760 --> 07:05:11,040
and in here i again want to open my document


5425
07:05:11,040 --> 07:05:15,280
but now i have to specify another argument


5426
07:05:15,280 --> 07:05:20,400
and this has to be a string most of the time this could be r it


5427
07:05:20,400 --> 07:05:23,680
could be a or it could be w


5428
07:05:23,680 --> 07:05:29,440
r stands for read a stands for append and w stands for write


5429
07:05:29,440 --> 07:05:34,798
the default one is r meaning we are just going to read the document


5430
07:05:34,798 --> 07:05:39,040
but the one that we could also use is a for append


5431
07:05:39,040 --> 07:05:45,360
and now i want to keep this as a file and in here now i could use file dot


5432
07:05:45,360 --> 07:05:49,920
write as an argument in here i can now


5433
07:05:49,920 --> 07:05:54,240
write some more text and just to make it a bit more visible


5434
07:05:54,240 --> 07:05:57,600
let me add a whole bunch of axes


5435
07:05:57,600 --> 07:06:00,958
so we know what we're doing if i run the code now


5436
07:06:00,958 --> 07:06:06,400
we cannot see any kind of difference that being said if i now


5437
07:06:06,400 --> 07:06:10,958
open the folder again open the document we can now see


5438
07:06:10,958 --> 07:06:17,120
the end the one we already had and then write some more text with axes around it


5439
07:06:17,120 --> 07:06:22,718
the kind of annoying thing here is at the end we don't have a line break


5440
07:06:22,718 --> 07:06:28,000
this one you would get by adding a line break character manually and now


5441
07:06:28,000 --> 07:06:32,718
if i run this again and open the folder


5442
07:06:32,718 --> 07:06:37,920
with the document we now have all of this on a whole new line


5443
07:06:37,920 --> 07:06:44,000
and you do want to be careful here because this a means append if you write


5444
07:06:44,000 --> 07:06:47,520
w you're going to write a whole new file


5445
07:06:47,520 --> 07:06:52,160
with this content here let me run it


5446
07:06:52,160 --> 07:06:56,478
if i open the folder again test file is still there but if i open


5447
07:06:56,478 --> 07:07:02,478
it we only have write some text with a line break on the first line the reason


5448
07:07:02,478 --> 07:07:08,798
here is that this w tells python to create a whole new file if there already


5449
07:07:08,798 --> 07:07:12,160
is a file python is going to write over it


5450
07:07:12,160 --> 07:07:15,360
and this you could also use to create new files


5451
07:07:15,360 --> 07:07:19,600
for example if i renamed this test to new


5452
07:07:19,600 --> 07:07:23,600
file that is terrible spelling


5453
07:07:23,600 --> 07:07:29,600
if i run this now with proper spelling and open the folder we now have new file


5454
07:07:29,600 --> 07:07:34,400
python has created a text document and that is basically all you need to


5455
07:07:34,400 --> 07:07:38,878
get started with reading and writing into text files


5456
07:07:38,878 --> 07:07:43,600
let's do an exercise i want you guys to create a new text


5457
07:07:43,600 --> 07:07:48,320
file and draw a tree in it kind of like the tree we have seen all


5458
07:07:48,320 --> 07:07:51,360
the way at the beginning of this entire series


5459
07:07:51,360 --> 07:07:56,478
so pause the video now and try to figure this one out yourself


5460
07:07:57,760 --> 07:08:01,360
i first of all want to comment out all the


5461
07:08:01,360 --> 07:08:05,520
stuff i had earlier and now i want with


5462
07:08:05,520 --> 07:08:10,718
open and let me call this tree dot txt


5463
07:08:10,718 --> 07:08:14,320
for this one to work i need w as an argument


5464
07:08:14,320 --> 07:08:19,520
and i want to call this one as let me call it the tree


5465
07:08:19,520 --> 07:08:24,160
file inside of here let me save the tree


5466
07:08:24,160 --> 07:08:28,478
inside of a string and this i want to do


5467
07:08:28,478 --> 07:08:33,280
with the triple quotation marks that are going to be assigned to the


5468
07:08:33,280 --> 07:08:37,040
tree string i have to work with white space and


5469
07:08:37,040 --> 07:08:42,160
access to create a tree so


5470
07:08:42,160 --> 07:08:47,600
three axis i hope i can still get it just right


5471
07:08:47,600 --> 07:08:53,200
something like this should be good and i realized i have one quotation mark


5472
07:08:53,200 --> 07:08:56,798
too much now that i have that i want to have my


5473
07:08:56,798 --> 07:09:00,400
tree file and i want to write in it what i want to


5474
07:09:00,400 --> 07:09:05,040
write is the tree string now i can run this


5475
07:09:05,040 --> 07:09:10,080
we don't have an error that's a good start and if i open my folder once again


5476
07:09:10,080 --> 07:09:15,520
we now have a tree file and inside of that we have a tree although i messed up


5477
07:09:15,520 --> 07:09:20,320
here a tiny bit i think if i put this x on the next line


5478
07:09:20,320 --> 07:09:25,520
run this again and open my folder run this now and


5479
07:09:25,520 --> 07:09:30,478
there we go now we have a tree or an arrow but you get the idea


5480
07:09:30,478 --> 07:09:36,478
and all right with that we have file writing and file opening for this part


5481
07:09:36,478 --> 07:09:41,040
we are going to look at deleting stuff which is something you can do but you


5482
07:09:41,040 --> 07:09:45,200
rarely need to let's talk about it the way you can delete something in


5483
07:09:45,200 --> 07:09:50,958
python is with the del keyword this one here all you have to do is


5484
07:09:50,958 --> 07:09:54,958
specify what you want to delete and python gets rid of it this would even


5485
07:09:54,958 --> 07:09:59,920
work with variables if you delete them they are going to be gone thing is


5486
07:09:59,920 --> 07:10:05,040
you basically never need it that way it hardly ever happens that you absolutely


5487
07:10:05,040 --> 07:10:10,000
have to get rid of a variable instead most of the time you only need


5488
07:10:10,000 --> 07:10:15,040
to delete values from a list and this is what i am going to focus on for this


5489
07:10:15,040 --> 07:10:17,600
part let's have a look at it


5490
07:10:17,600 --> 07:10:22,320
i want to start by just creating a basic variable let me call it a and give it a


5491
07:10:22,320 --> 07:10:26,320
value of 1. inside of my python file i want to


5492
07:10:26,320 --> 07:10:30,798
create one variable let me call it a it really doesn't matter because we are


5493
07:10:30,798 --> 07:10:35,120
going to delete a if i print


5494
07:10:35,120 --> 07:10:38,878
a now hyphen is going to be unhappy because a


5495
07:10:38,878 --> 07:10:42,320
is not defined which is python's way of saying a does


5496
07:10:42,320 --> 07:10:45,600
not exist which makes sense because we just


5497
07:10:45,600 --> 07:10:50,638
deleted a that's kind of all you need here


5498
07:10:50,638 --> 07:10:55,920
the thing is this kind of operation you basically never do there just isn't a


5499
07:10:55,920 --> 07:10:59,280
need for it although if you are going to learn other


5500
07:10:59,280 --> 07:11:03,920
languages they are much more aggressive about clearing memory after you used


5501
07:11:03,920 --> 07:11:07,120
something so you might see something there


5502
07:11:07,120 --> 07:11:11,280
but in python all you ever really are going to do is


5503
07:11:11,280 --> 07:11:14,400
remove items from a


5504
07:11:14,400 --> 07:11:18,478
list i guess let me reuse a and i want to


5505
07:11:18,478 --> 07:11:23,280
assign it one two and three and i want to delete


5506
07:11:23,280 --> 07:11:28,478
individual values from this one here delete is where you are going to


5507
07:11:28,478 --> 07:11:35,040
see it the most it removes an item by index


5508
07:11:35,040 --> 07:11:40,478
so for example i could write delete a and then the index 1.


5509
07:11:40,478 --> 07:11:44,558
if i now print a we are getting an error message because


5510
07:11:44,558 --> 07:11:49,600
up here we still have the problem if i comment this one out run this again we


5511
07:11:49,600 --> 07:11:54,958
now can see one and three the reason we can't see two anymore


5512
07:11:54,958 --> 07:12:01,520
is because we deleted the item with the index 1. inside of a we have index 0


5513
07:12:01,520 --> 07:12:06,478
index 1 and index 2 and we have told python to delete the 1


5514
07:12:06,478 --> 07:12:11,440
with the index 1. that's all that happened here what you could also do let


5515
07:12:11,440 --> 07:12:17,840
me comment this one out you can remove an item by value and this


5516
07:12:17,840 --> 07:12:23,440
should be a comment so let's say in this list


5517
07:12:23,440 --> 07:12:28,718
you want to get rid of any value that has a free but you don't know what index


5518
07:12:28,718 --> 07:12:33,520
that three is on for that python or while a list has to


5519
07:12:33,520 --> 07:12:38,160
remove method all you need is a dot remove and then


5520
07:12:38,160 --> 07:12:42,718
specify what you want to get rid of in my case a free


5521
07:12:42,718 --> 07:12:48,400
if i now print the list we only get one and two the three has


5522
07:12:48,400 --> 07:12:53,200
disappeared besides that let me comment this one out


5523
07:12:53,200 --> 07:12:57,120
you can also use the pop method


5524
07:12:57,120 --> 07:13:02,958
what this one does is it removes an item again by index although the default


5525
07:13:02,958 --> 07:13:09,680
value here is negative one after i have run this i can print my list again


5526
07:13:09,680 --> 07:13:13,760
and we again get rid of the three all the way at the end


5527
07:13:13,760 --> 07:13:18,958
the difference between pop and remove is that pop pops out the value we have


5528
07:13:18,958 --> 07:13:23,280
deleted meaning we could print this one as well


5529
07:13:23,280 --> 07:13:28,478
so if i run all of this i get free the value that was deleted and then the list


5530
07:13:28,478 --> 07:13:32,160
itself with this line here and finally


5531
07:13:32,160 --> 07:13:38,798
you can just clear the entire list and this i think we have actually


5532
07:13:38,798 --> 07:13:44,638
already seen all you need is a dot clear and if you then print the list


5533
07:13:44,638 --> 07:13:48,400
it is going to be empty most of the time this is kind of


5534
07:13:48,400 --> 07:13:52,000
overkill but well it is something you can do


5535
07:13:52,000 --> 07:13:56,320
and with that you have a couple of operations to get values out of a list


5536
07:13:56,320 --> 07:14:01,520
or well remove items from a list in this tutorial we talk about objects


5537
07:14:01,520 --> 07:14:05,760
and classes and well more specifically i will talk


5538
07:14:05,760 --> 07:14:10,320
about what objects and classes are i will cover how to create and use them we


5539
07:14:10,320 --> 07:14:14,718
will cover dunder methods and also simple and complex inheritance


5540
07:14:14,718 --> 07:14:19,280
and finally i will cover how to use classes in practice and well let's get


5541
07:14:19,280 --> 07:14:23,680
started by talking about what objects are in the first place


5542
07:14:23,680 --> 07:14:29,360
and well an object is just a container for variables and functions


5543
07:14:29,360 --> 07:14:32,718
for example we could make a video game with lots of


5544
07:14:32,718 --> 07:14:38,080
monsters and i think video games are really good way to explain objects so i


5545
07:14:38,080 --> 07:14:41,120
will stick with that for this entire video


5546
07:14:41,120 --> 07:14:44,878
but basically for the monster we are going to create we want to have


5547
07:14:44,878 --> 07:14:48,878
variables and functions and in this case i want the monster to


5548
07:14:48,878 --> 07:14:54,000
have some health some energy stamina and damage and you could add whatever else


5549
07:14:54,000 --> 07:14:58,160
you want in here it's really up to you and then besides that the monster should


5550
07:14:58,160 --> 07:15:02,798
also be able to attack to move to animate and again you could add whatever


5551
07:15:02,798 --> 07:15:07,440
else you want in here and what you have to understand here is


5552
07:15:07,440 --> 07:15:14,240
that these variables and functions only exist inside of this monster object


5553
07:15:14,240 --> 07:15:20,000
it's very similar compared to the local scope of a function if we tried to get


5554
07:15:20,000 --> 07:15:24,558
this health outside of the container it wouldn't exist because this health


5555
07:15:24,558 --> 07:15:29,760
exists only inside of a monster object although in terms of naming there's one


5556
07:15:29,760 --> 07:15:34,080
minor complication and that is special names


5557
07:15:34,080 --> 07:15:37,520
all that really means is that variables inside of an object are called


5558
07:15:37,520 --> 07:15:41,200
attributes and functions in an object are called methods


5559
07:15:41,200 --> 07:15:45,680
and that is more or less the only difference


5560
07:15:45,680 --> 07:15:49,920
the only reason why this exists is so that we are a bit more specific with our


5561
07:15:49,920 --> 07:15:53,520
language for example when you talk about health


5562
07:15:53,520 --> 07:15:57,920
with somebody else for your game you really want to emphasize that you don't


5563
07:15:57,920 --> 07:16:02,080
talk about a global variable you talk about the specific attribute of one


5564
07:16:02,080 --> 07:16:06,080
object and one more thing methods


5565
07:16:06,080 --> 07:16:10,478
should actually be familiar to you because you are using methods very very


5566
07:16:10,478 --> 07:16:14,878
often in python anyway for example when you call the upper method on any kind of


5567
07:16:14,878 --> 07:16:18,878
string you are turning every letter inside of that string to an uppercase


5568
07:16:18,878 --> 07:16:24,878
letter and that is also a method and that is the same kind of method we are


5569
07:16:24,878 --> 07:16:29,920
seeing here essentially a string in python is just another object with


5570
07:16:29,920 --> 07:16:34,558
functions inside of it or methods to be more specific this also


5571
07:16:34,558 --> 07:16:39,040
applies to integers floating point numbers booleans all of that stuff is


5572
07:16:39,040 --> 07:16:43,520
basically just other kinds of objects that python creates but that's something


5573
07:16:43,520 --> 07:16:48,320
we don't have to worry about for now now another thing that is really


5574
07:16:48,320 --> 07:16:52,958
important to understand is that it is possible to have multiple objects for


5575
07:16:52,958 --> 07:16:56,638
example i could create three different monsters


5576
07:16:56,638 --> 07:17:01,200
and each of these monsters could have customized attributes


5577
07:17:01,200 --> 07:17:04,240
these red


5578
07:17:04,240 --> 07:17:08,558
pieces of text here so my first monster has 90 health 20


5579
07:17:08,558 --> 07:17:14,798
energy the next monster has 60 and 40 and the final monster has 40 and 10.


5580
07:17:14,798 --> 07:17:19,760
so when you create an object you can give it custom attributes however this


5581
07:17:19,760 --> 07:17:25,440
does not apply to methods and as you can see here monster 1


5582
07:17:25,440 --> 07:17:31,520
monster 2 and monster 3 all have the same methods


5583
07:17:31,600 --> 07:17:36,558
and these can be customized to an extent but not nearly as much as the attributes


5584
07:17:36,558 --> 07:17:39,040
that's something you do want to keep in mind


5585
07:17:39,040 --> 07:17:44,478
but still each object has its own attributes and methods


5586
07:17:44,478 --> 07:17:50,878
meaning that this attack here and this attack are not the same function or well


5587
07:17:50,878 --> 07:17:54,878
the same method they always apply to their respective


5588
07:17:54,878 --> 07:17:59,040
object and what you can also do is have objects


5589
07:17:59,040 --> 07:18:02,638
interact with each other for example


5590
07:18:02,638 --> 07:18:04,798
if monster 3


5591
07:18:04,798 --> 07:18:07,520
attacks one stat 2


5592
07:18:07,520 --> 07:18:12,840
we could run some code to reduce the health of monster 2 from 60 to let's say


5593
07:18:12,840 --> 07:18:16,798
20. and that actually brings us to a really


5594
07:18:16,798 --> 07:18:23,360
important topic and that is object oriented programming or oop in short


5595
07:18:23,360 --> 07:18:27,360
and all that really means is that you are organizing your code via different


5596
07:18:27,360 --> 07:18:30,958
objects and then you make these objects interact


5597
07:18:30,958 --> 07:18:34,398
with each other and this approach is basically how


5598
07:18:34,398 --> 07:18:39,600
almost all large projects are made in any programming language or at the very


5599
07:18:39,600 --> 07:18:43,920
least any modern programming language meaning if you don't understand classes


5600
07:18:43,920 --> 07:18:48,080
you will be very much lost and well you will have no idea what you see when you


5601
07:18:48,080 --> 07:18:53,200
look at larger examples of code here we have a couple more objects


5602
07:18:53,200 --> 07:18:58,398
we still have monster 1 and monster two but now we also have a player we have an


5603
07:18:58,398 --> 07:19:03,360
obstacle and we have a menu and all of these have slightly different


5604
07:19:03,360 --> 07:19:06,558
attributes and slightly different methods


5605
07:19:06,558 --> 07:19:10,558
and just to talk about how these different objects can interact with each


5606
07:19:10,558 --> 07:19:15,120
other the one we have already seen is that monster 2 could for example attack


5607
07:19:15,120 --> 07:19:22,080
monster 1 and then monster 1's health be reduced from 90 to 60.


5608
07:19:22,080 --> 07:19:29,600
and if monster 2 is attacking it might reduce its own energy from 40 to 20.


5609
07:19:29,600 --> 07:19:34,320
so attacking isn't free for the monster what we can also do


5610
07:19:34,320 --> 07:19:39,840
is have an object without any methods like the obstacle here and all the


5611
07:19:39,840 --> 07:19:45,360
obstacle is is well an object with a position and a size


5612
07:19:45,360 --> 07:19:50,080
and this we could use for example with the move method of any of the other


5613
07:19:50,080 --> 07:19:54,478
classes so the player and the monsters


5614
07:19:54,478 --> 07:19:59,120
all have a move method and this could interact with the obstacle


5615
07:19:59,120 --> 07:20:03,600
and let me clean this up something even more interesting if you look at the


5616
07:20:03,600 --> 07:20:10,398
player this one here and the menu those two do look very much connected


5617
07:20:10,398 --> 07:20:14,398
because the player has one method called menu


5618
07:20:14,398 --> 07:20:19,520
and what this one would do is to create or the very least open a


5619
07:20:19,520 --> 07:20:23,280
menu and then when we create the menu we are


5620
07:20:23,280 --> 07:20:28,798
passing in the player itself so this player here


5621
07:20:28,798 --> 07:20:33,920
is going to be passed in as one attribute of the menu object and this is


5622
07:20:33,920 --> 07:20:39,120
totally fine to do you can totally add a function or an object inside of another


5623
07:20:39,120 --> 07:20:42,798
object as an attribute and then


5624
07:20:42,798 --> 07:20:48,638
this select could for example change the weapon of the player


5625
07:20:48,638 --> 07:20:53,920
and we could close the menu as well and i hope this makes sense the main


5626
07:20:53,920 --> 07:20:58,478
thing you have to understand is that objects can interact with each other


5627
07:20:58,478 --> 07:21:03,360
and this is how you want to organize code it makes it very easy to work with


5628
07:21:03,360 --> 07:21:09,600
and especially for larger bits of code this approach is essentially mandatory


5629
07:21:09,600 --> 07:21:12,718
or at the very least it's the easiest way to organize it


5630
07:21:12,718 --> 07:21:17,840
and let's actually do a practical example here is zelda like game that i


5631
07:21:17,840 --> 07:21:22,398
made a while ago and basically everything you see on the screen is an


5632
07:21:22,398 --> 07:21:26,160
object for example right in the middle we have


5633
07:21:26,160 --> 07:21:30,958
the player and that's one object and we also have this raccoon here and


5634
07:21:30,958 --> 07:21:35,440
this spirit and each of those are one object


5635
07:21:35,440 --> 07:21:41,920
and beyond that each of these flames here is its own object and these are


5636
07:21:41,920 --> 07:21:46,080
only created when the player is attacking with some magic


5637
07:21:46,080 --> 07:21:50,638
and finally in the top left the


5638
07:21:50,638 --> 07:21:55,680
bottom left and the bottom right you can see some ui elements


5639
07:21:55,680 --> 07:22:02,000
and they are all part of the same object and this object is very much related to


5640
07:22:02,000 --> 07:22:06,558
the player so those two work together very closely


5641
07:22:06,558 --> 07:22:11,280
and besides that each of these pillars and trees


5642
07:22:11,280 --> 07:22:16,160
and rocks and statues they are all objects that i created just for this


5643
07:22:16,160 --> 07:22:19,440
game so i hope that illustrates how useful


5644
07:22:19,440 --> 07:22:24,320
objects are that make it really easy to group together code chunks that should


5645
07:22:24,320 --> 07:22:28,558
belong together and for a bit more detail the raccoon


5646
07:22:28,558 --> 07:22:33,280
for example has three attributes health speed and damage and the methods attack


5647
07:22:33,280 --> 07:22:36,638
and move and all the other objects would have


5648
07:22:36,638 --> 07:22:43,360
similar attributes and methods and with that we have objects now the


5649
07:22:43,360 --> 07:22:49,200
next question is what are classes and this is fairly easy to explain as


5650
07:22:49,200 --> 07:22:53,440
well the class is basically a blueprint for an object


5651
07:22:53,440 --> 07:22:58,558
meaning whenever we create an object we first have to create a class


5652
07:22:58,558 --> 07:23:03,840
and a class can also accept arguments to customize the object we are creating


5653
07:23:03,840 --> 07:23:09,440
for example this would be a class we have a class and this class has two


5654
07:23:09,440 --> 07:23:14,878
attributes health and energy and right now the value for both of these is not


5655
07:23:14,878 --> 07:23:18,558
being set this we do when we actually use this


5656
07:23:18,558 --> 07:23:23,200
class to create an object but this class also has two methods


5657
07:23:23,200 --> 07:23:26,958
attack and move and those do not change


5658
07:23:26,958 --> 07:23:32,398
and basically what we're doing is use this class to create the object


5659
07:23:32,398 --> 07:23:37,840
and in the process we are giving it the specific values for


5660
07:23:37,840 --> 07:23:42,160
health and energy so in this case the monster is going to have 90 health and


5661
07:23:42,160 --> 07:23:45,920
20 energy and this process we could do as many


5662
07:23:45,920 --> 07:23:51,040
times as we want for example earlier you have seen monster 1 we had monster 2


5663
07:23:51,040 --> 07:23:55,120
monster 3 and we could continue with monster 4 5


5664
07:23:55,120 --> 07:24:02,000
up to an unlimited number of monsters and that is essentially the main idea


5665
07:24:02,000 --> 07:24:05,600
all you really have to understand is that we always need a class to create an


5666
07:24:05,600 --> 07:24:09,760
object now what we can also do with classes is


5667
07:24:09,760 --> 07:24:14,320
that one class can inherit from another class and the resulting objects will


5668
07:24:14,320 --> 07:24:18,398
have attributes and methods from both classes


5669
07:24:18,398 --> 07:24:22,240
for example let's say we want to create a shark


5670
07:24:22,240 --> 07:24:26,958
class and this one right now only has speed for the attribute and byte for the


5671
07:24:26,958 --> 07:24:30,398
method and this class will be fairly limited


5672
07:24:30,398 --> 07:24:35,760
because we well don't have any attribute for health or for energy and we also


5673
07:24:35,760 --> 07:24:39,360
don't have any kind of method for move or attack


5674
07:24:39,360 --> 07:24:44,398
but we don't need to because what we can do is have this shark class inherit from


5675
07:24:44,398 --> 07:24:50,478
the monster class and this means this shark is going to get the health


5676
07:24:50,478 --> 07:24:54,798
and the energy from the monster parent class


5677
07:24:54,798 --> 07:24:58,798
and that is also going to get the attack and the move


5678
07:24:58,798 --> 07:25:03,440
from this class as well meaning when we actually use the shark


5679
07:25:03,440 --> 07:25:07,120
class to create a shark object we are going to


5680
07:25:07,120 --> 07:25:11,600
get health energy and speed for the attributes and attack move and byte for


5681
07:25:11,600 --> 07:25:16,080
the methods and i think i should use better colors


5682
07:25:16,080 --> 07:25:21,360
here in the shark class health and energy


5683
07:25:21,360 --> 07:25:27,840
are coming from the monster class same with attack and move


5684
07:25:27,840 --> 07:25:32,638
those two are coming from the monster class


5685
07:25:32,798 --> 07:25:38,240
and then speed and byte


5686
07:25:38,240 --> 07:25:45,040
are from the shark class and this would allow us to reuse code


5687
07:25:45,040 --> 07:25:50,798
quite extensively for example we could have a lot of different monsters we


5688
07:25:50,798 --> 07:25:56,000
could have a shark some flying enemy some armored enemies lots more and they


5689
07:25:56,000 --> 07:26:01,200
all inherit from this one monster class and with this approach


5690
07:26:01,200 --> 07:26:07,040
we would save a ton of writing in terms of code and on top of that if we change


5691
07:26:07,040 --> 07:26:11,600
the move method for example it would affect every single other class


5692
07:26:11,600 --> 07:26:15,120
as well which is very useful if you want to make


5693
07:26:15,120 --> 07:26:19,680
some changes and make it affect every single other class


5694
07:26:19,680 --> 07:26:24,240
and especially with larger projects this is just about the only way to manage


5695
07:26:24,240 --> 07:26:28,160
them and let's do an example again


5696
07:26:28,160 --> 07:26:32,558
here is the screenshot from earlier and we have a monster class we have another


5697
07:26:32,558 --> 07:26:37,120
monster class and those two have the same attributes and methods although


5698
07:26:37,120 --> 07:26:42,240
with different values and besides that we also have the player


5699
07:26:42,240 --> 07:26:45,680
and what is really important to understand here is that all of these


5700
07:26:45,680 --> 07:26:51,520
inherit from the entity parent class and this for example contains the method


5701
07:26:51,520 --> 07:26:55,360
for movement because all of the monsters and the


5702
07:26:55,360 --> 07:27:02,160
player move in the same way so they could share this method quite easily


5703
07:27:02,160 --> 07:27:06,878
and just to emphasize it i do want to go over the advantages of classes and


5704
07:27:06,878 --> 07:27:10,638
objects and the first point here is that classes


5705
07:27:10,638 --> 07:27:13,840
and objects help you organize complex code


5706
07:27:13,840 --> 07:27:18,240
and the second point is related classes and objects also help you to create a


5707
07:27:18,240 --> 07:27:24,478
reusable code and just from these two points i hope it becomes obvious that if


5708
07:27:24,478 --> 07:27:28,638
you want to create some really large projects let's say a really good looking


5709
07:27:28,638 --> 07:27:34,000
game you need objects and classes without them it's still possible but


5710
07:27:34,000 --> 07:27:38,160
significantly more difficult besides that


5711
07:27:38,160 --> 07:27:44,320
classes are also used everywhere meaning if you don't understand them you


5712
07:27:44,320 --> 07:27:49,520
will be very much lost as a matter of fact in python there are


5713
07:27:49,520 --> 07:27:54,638
quite a few modules that require you to use classes


5714
07:27:54,638 --> 07:27:59,840
for example pygame tkinter and matplotlib respectively the model you


5715
07:27:59,840 --> 07:28:04,638
use for games for guise and for data analysis they all work with classes


5716
07:28:04,638 --> 07:28:08,160
primarily so if you don't know how to use it you


5717
07:28:08,160 --> 07:28:12,320
pretty much cannot use these modules or at least you could only use a very small


5718
07:28:12,320 --> 07:28:15,440
part of them and there's one more point that i


5719
07:28:15,440 --> 07:28:19,840
haven't mentioned yet and that is that classes make it much


5720
07:28:19,840 --> 07:28:23,760
easier to work with scope i will talk about this in more detail


5721
07:28:23,760 --> 07:28:26,878
later but if you struggled so far with getting


5722
07:28:26,878 --> 07:28:31,520
information in and outside of functions you will really like classes that make


5723
07:28:31,520 --> 07:28:34,798
it very easy to work with different levels of scope


5724
07:28:34,798 --> 07:28:38,718
so these are the arguments where you would want to use classes and objects


5725
07:28:38,718 --> 07:28:42,398
however you can write code without using objects


5726
07:28:42,398 --> 07:28:47,520
at all and this is very common especially for beginners and let me


5727
07:28:47,520 --> 07:28:53,040
illustrate the problem here the yellow line is the need for classes


5728
07:28:53,040 --> 07:28:57,600
and especially when you start writing code let's say you are somewhere here


5729
07:28:57,600 --> 07:29:02,240
and your average program is something like 50 lines of code


5730
07:29:02,240 --> 07:29:06,958
in this case there really isn't any need for classes because well your code is


5731
07:29:06,958 --> 07:29:10,878
very simple and there isn't any need to organize complexity


5732
07:29:10,878 --> 07:29:16,160
however the longer and more complex your code is becoming the more you will need


5733
07:29:16,160 --> 07:29:21,760
classes and this ramps up really really fast


5734
07:29:21,760 --> 07:29:28,398
but as long as you are in this area here it well it's very tempting to never use


5735
07:29:28,398 --> 07:29:33,200
a class and ignore them entirely and this especially as a beginner you really


5736
07:29:33,200 --> 07:29:37,120
want to avoid so even though when you are here


5737
07:29:37,120 --> 07:29:41,040
i would really recommend you to use classes even though it's not strictly


5738
07:29:41,040 --> 07:29:45,760
necessary in your example just to practice for more complex code


5739
07:29:45,760 --> 07:29:49,680
because when you are an actual software developer you are never going to write


5740
07:29:49,680 --> 07:29:53,440
just 50 lines of code most of the programs you are going to work are


5741
07:29:53,440 --> 07:29:59,280
somewhere here with a few thousand lines of code let's say 2000


5742
07:29:59,280 --> 07:30:02,718
and if you are up here and you don't use classes


5743
07:30:02,718 --> 07:30:08,398
you are going to be in a lot of trouble but all right with that we have the


5744
07:30:08,398 --> 07:30:14,160
theory of objects and classes and for the next part


5745
07:30:14,160 --> 07:30:18,638
we are actually going to create and use objects


5746
07:30:18,638 --> 07:30:24,558
so let's have a look at some code here i have a completely empty sheet of


5747
07:30:24,558 --> 07:30:29,600
code and the first way i want to do is to create a class and this you do with


5748
07:30:29,600 --> 07:30:35,440
class and then the name of the class in my case i want to go with monster


5749
07:30:35,440 --> 07:30:39,920
and here already we have to cover something important and that is the


5750
07:30:39,920 --> 07:30:44,160
naming scheme so far in python what you probably have


5751
07:30:44,160 --> 07:30:50,478
written is something like monster and generally you always used the snake


5752
07:30:50,478 --> 07:30:57,200
case styling for any kind of text so why is this different here


5753
07:30:57,200 --> 07:31:02,840
and well in python by convention last names are always written in the camel


5754
07:31:02,840 --> 07:31:08,638
case so camelcase looks like this where you don't have any spaces between


5755
07:31:08,638 --> 07:31:15,200
words or well any underscores but any word starts with an uppercase letter


5756
07:31:15,200 --> 07:31:19,600
and this is different from normalpython where variables are written in snake


5757
07:31:19,600 --> 07:31:24,798
case where everything is lowercase and a space is an underscore


5758
07:31:24,798 --> 07:31:28,798
and this isn't strictly necessary you can call a class


5759
07:31:28,798 --> 07:31:34,478
monster with a lowercase m just fine this is purely convention


5760
07:31:34,478 --> 07:31:39,600
but all the other python requirements for naming still apply for example a


5761
07:31:39,600 --> 07:31:44,840
class couldn't start with a number and we also couldn't have a space in


5762
07:31:44,840 --> 07:31:49,440
between so we don't have to learn any new naming scheme now next up what you


5763
07:31:49,440 --> 07:31:52,958
have to do is a colon and now in here


5764
07:31:52,958 --> 07:31:56,798
we can work on the attributes and methods of our class


5765
07:31:56,798 --> 07:32:00,398
and for now i just want to create some basic attributes


5766
07:32:00,398 --> 07:32:04,320
let's say i want to give this monster some health and for now i want to have


5767
07:32:04,320 --> 07:32:09,680
specific numbers let's say 90 i want to have energy and this one


5768
07:32:09,680 --> 07:32:14,718
should be 40. so now we have a class


5769
07:32:14,718 --> 07:32:19,520
and what we have to do now is turn this class into an object


5770
07:32:19,520 --> 07:32:23,760
and this we do by typing the name of the class and then calling it by using


5771
07:32:23,760 --> 07:32:28,398
brackets again very similar compared to functions


5772
07:32:28,398 --> 07:32:34,160
and this is going to return the object so we have to capture that in a variable


5773
07:32:34,160 --> 07:32:38,798
and this very often is written like this


5774
07:32:38,798 --> 07:32:43,120
and here i hope you can see why we have the different naming schemes


5775
07:32:43,120 --> 07:32:47,760
to python this name here and this name here are


5776
07:32:47,760 --> 07:32:51,840
two completely different things because one starts with a lowercase the other


5777
07:32:51,840 --> 07:32:56,398
with an upper case although to us as the programmer


5778
07:32:56,398 --> 07:33:00,478
we can tell that those two are related because they basically have the same


5779
07:33:00,478 --> 07:33:03,600
name and for that reason we are usually


5780
07:33:03,600 --> 07:33:09,200
writing class names in camel case and variable names in snake case it makes it


5781
07:33:09,200 --> 07:33:14,000
very easy to connect these two and clearly indicate that they are connected


5782
07:33:14,000 --> 07:33:17,680
although you don't have to do any of this you could totally call this i don't


5783
07:33:17,680 --> 07:33:21,280
know hamster and this could be


5784
07:33:21,280 --> 07:33:26,478
lowercase it's totally fine all of this is just convention


5785
07:33:26,478 --> 07:33:30,240
although you should follow conventions they are there for a reason


5786
07:33:30,240 --> 07:33:35,520
but i can run the code now and i am not getting an error that's a good sign


5787
07:33:35,520 --> 07:33:39,360
and now what i can do i can use print and


5788
07:33:39,360 --> 07:33:43,200
monster dot let's say health


5789
07:33:43,200 --> 07:33:50,240
and now if i run this we are getting 90. and this knight here is coming from this


5790
07:33:50,240 --> 07:33:55,520
health and the same would also work for energy


5791
07:33:55,520 --> 07:33:59,280
in just the same way so we get 90 and 40.


5792
07:33:59,280 --> 07:34:04,798
now just to emphasize that both this health and this energy only exist inside


5793
07:34:04,798 --> 07:34:10,718
of this class let me print health by itself that is horrible


5794
07:34:10,718 --> 07:34:14,558
spelling health and if i run this python is going to


5795
07:34:14,558 --> 07:34:19,440
give me an error and we have name health is not defined


5796
07:34:19,440 --> 07:34:24,478
meaning python cannot find this health anywhere in the


5797
07:34:24,478 --> 07:34:28,878
global scope which makes sense because there is no health in the global scope


5798
07:34:28,878 --> 07:34:32,878
we only have health in the scope of this monster class


5799
07:34:32,878 --> 07:34:36,958
and let me add some comments here to make this a bit


5800
07:34:36,958 --> 07:34:40,558
more readable we have attributes and besides that i


5801
07:34:40,558 --> 07:34:45,600
also want to create methods and those work kind of like functions we


5802
07:34:45,600 --> 07:34:53,040
again need the define keyword or def and now we need a name for our function


5803
07:34:53,040 --> 07:34:57,360
and for that we have the exact same naming scheme for normal functions


5804
07:34:57,360 --> 07:35:01,360
for example attack would be a perfectly fine name


5805
07:35:01,360 --> 07:35:06,958
and after that you need a colon and then let's say for this attack method i want


5806
07:35:06,958 --> 07:35:13,040
to keep it simple and just print the monster has attacked


5807
07:35:13,040 --> 07:35:20,000
and now i can call monster dot attack and don't forget the brackets and now if


5808
07:35:20,000 --> 07:35:23,760
i run this we are getting an error


5809
07:35:23,760 --> 07:35:29,120
and this error says that monster.attack takes zero position


5810
07:35:29,120 --> 07:35:35,680
arguments but one was given and this is probably very confusing


5811
07:35:35,680 --> 07:35:41,840
because when we called this method here we didn't pass anything inside of it


5812
07:35:41,840 --> 07:35:48,320
and the method itself doesn't have any parameters so why is python being so


5813
07:35:48,320 --> 07:35:53,040
weird here now the reason why this is happening is


5814
07:35:53,040 --> 07:35:58,398
that whenever we call a method so a function inside of a class


5815
07:35:58,398 --> 07:36:02,638
what is going to happen is that python automatically passes a reference to the


5816
07:36:02,638 --> 07:36:08,558
object created by the class as the first argument into the method


5817
07:36:08,558 --> 07:36:14,080
in this first argument we always have to capture with some kind of parameter


5818
07:36:14,080 --> 07:36:19,440
meaning a method always needs at very least one parameter


5819
07:36:19,440 --> 07:36:22,638
for example i could just write monster in here


5820
07:36:22,638 --> 07:36:28,000
and if i run this now we get the monster has attacked


5821
07:36:28,000 --> 07:36:32,718
and let me just print what we actually get so i want to print the monster we


5822
07:36:32,718 --> 07:36:39,040
get as an argument in here and what we get is main monster object


5823
07:36:39,040 --> 07:36:45,360
at somewhere in our memory and well in my case i don't really care


5824
07:36:45,360 --> 07:36:50,398
about this monster so let me remove the print statement but i do have to keep


5825
07:36:50,398 --> 07:36:55,360
this first parameter however once we have the first parameter


5826
07:36:55,360 --> 07:36:59,040
i can add as many custom parameters as i want


5827
07:36:59,040 --> 07:37:04,638
for example i could add the amount of damage here


5828
07:37:04,638 --> 07:37:09,600
and i could let's say print the amount with an f string


5829
07:37:09,600 --> 07:37:12,798
and i want to say


5830
07:37:12,958 --> 07:37:15,840
the amount


5831
07:37:15,840 --> 07:37:19,920
of damage was dealt


5832
07:37:19,920 --> 07:37:25,440
and now when i call this method down here i can pass in any number i want


5833
07:37:25,440 --> 07:37:30,240
and i get the monster as attacked 40 of damage was dealt that does not make


5834
07:37:30,240 --> 07:37:34,000
sense in terms of grammar let's try this again but the damage was dealt that


5835
07:37:34,000 --> 07:37:37,680
feels much better what is really important to understand


5836
07:37:37,680 --> 07:37:43,840
here is that this monster or more specifically the first parameter of any


5837
07:37:43,840 --> 07:37:50,080
method always references the object created by the class so this


5838
07:37:50,080 --> 07:37:54,718
class up here creates an object and then this monster


5839
07:37:54,718 --> 07:37:59,760
is a reference to that object the monster is not a reference to the


5840
07:37:59,760 --> 07:38:03,600
class itself and this is really important because


5841
07:38:03,600 --> 07:38:08,240
that way you can create multiple objects that always work with the first


5842
07:38:08,240 --> 07:38:14,558
parameter here for example i could have monster 1 that i'm creating from the


5843
07:38:14,558 --> 07:38:21,120
same class and now call monster 1 dot attack let's say with 10


5844
07:38:21,120 --> 07:38:24,320
in here and now the first argument passed in


5845
07:38:24,320 --> 07:38:29,200
here and the first argument passed in here are different


5846
07:38:29,200 --> 07:38:32,478
essentially we are passing this monster in here


5847
07:38:32,478 --> 07:38:38,478
and this monster one in here that way this first parameter is really


5848
07:38:38,478 --> 07:38:43,280
flexible it can target any kind of object or more specifically any kind of


5849
07:38:43,280 --> 07:38:47,840
object you are using it with i don't want to do this one right now


5850
07:38:47,840 --> 07:38:52,558
but what you could also do if i add another line here you could for


5851
07:38:52,558 --> 07:38:57,920
example print monster dot energy this once again


5852
07:38:57,920 --> 07:39:01,440
would target this first parameter and then this first


5853
07:39:01,440 --> 07:39:08,240
parameter targets the object itself which in this case is going to give me


5854
07:39:08,240 --> 07:39:11,520
the energy here the one i've just drawn over


5855
07:39:11,520 --> 07:39:16,718
but if i run this we are getting 40 the 40 we have


5856
07:39:16,718 --> 07:39:20,718
seen from here and this right now is created in a class


5857
07:39:20,718 --> 07:39:25,680
but later on when we use this class to create an object every single object


5858
07:39:25,680 --> 07:39:32,160
would have this energy attribute and this is what we are referencing here


5859
07:39:32,160 --> 07:39:37,920
and what you could also do is increase this amount


5860
07:39:37,920 --> 07:39:44,240
so monster.energy minus equal 20 and if i print it now we


5861
07:39:44,240 --> 07:39:48,718
get 20. and i hope you can tell how useful this


5862
07:39:48,718 --> 07:39:53,920
can be because if you imagine that this monster here is the global scope and


5863
07:39:53,920 --> 07:40:00,478
these attributes are global variables if this attack was just a normal


5864
07:40:00,478 --> 07:40:05,360
function then this would not work


5865
07:40:05,360 --> 07:40:08,558
because you would be creating a local variable that wouldn't work with the


5866
07:40:08,558 --> 07:40:15,040
global ones but because of this first argument that the method always gets


5867
07:40:15,040 --> 07:40:20,000
we can influence variables or well attributes outside of this function


5868
07:40:20,000 --> 07:40:26,240
which is incredibly useful so i hope this kind of method here makes


5869
07:40:26,240 --> 07:40:29,840
sense as a matter of fact let's practice this


5870
07:40:29,840 --> 07:40:34,558
one i want you guys to create another method for this monster and this one


5871
07:40:34,558 --> 07:40:38,080
should be called move and it should accept one parameter


5872
07:40:38,080 --> 07:40:43,600
besides the reference to itself and that is the speed of the movement


5873
07:40:43,600 --> 07:40:48,240
and then inside of the method you should just print that the monster has moved at


5874
07:40:48,240 --> 07:40:52,320
a certain speed it doesn't really matter what you put in here as long as it is


5875
07:40:52,320 --> 07:40:57,840
working so try to figure this one out yourself


5876
07:40:59,440 --> 07:41:05,280
alright let's try together now i want to create a method called move


5877
07:41:05,280 --> 07:41:08,718
and in here i want to have speed as a parameter


5878
07:41:08,718 --> 07:41:13,120
however what we have learned from the attack method is that we always need a


5879
07:41:13,120 --> 07:41:16,718
reference to the object as the first parameter


5880
07:41:16,718 --> 07:41:19,680
meaning the first parameter here should be


5881
07:41:19,680 --> 07:41:23,760
something for the monster and it really doesn't matter what you


5882
07:41:23,760 --> 07:41:27,520
call it so i could even write something in here


5883
07:41:27,520 --> 07:41:32,718
it would still work and now in here i can print


5884
07:41:32,718 --> 07:41:35,280
the monster has


5885
07:41:35,280 --> 07:41:40,878
moved and let me add another line with an f


5886
07:41:40,878 --> 07:41:43,440
string


5887
07:41:43,760 --> 07:41:48,878
that says it has a speed of and then


5888
07:41:48,878 --> 07:41:52,878
the speed and let me fix the typo


5889
07:41:52,878 --> 07:41:59,760
and now i can call monster dot move and add let's say a 10 in here and let


5890
07:41:59,760 --> 07:42:04,320
me comment out monster.attack and let's see what we get


5891
07:42:04,320 --> 07:42:07,840
the monster has moved it has a speed of 10.


5892
07:42:07,840 --> 07:42:11,760
so all of this seems to be working very nicely


5893
07:42:11,760 --> 07:42:18,000
now obviously calling this first parameter something is a bit confusing


5894
07:42:18,000 --> 07:42:23,280
and as a consequence in python there is a convention that this first parameter


5895
07:42:23,280 --> 07:42:28,958
is always called self and this applies to all of the methods


5896
07:42:28,958 --> 07:42:33,120
meaning this is what you are going to see most of the time and what i am going


5897
07:42:33,120 --> 07:42:37,280
to use as well you don't have to do it but i think it


5898
07:42:37,280 --> 07:42:41,840
makes the most sense although i do want to emphasize that


5899
07:42:41,840 --> 07:42:47,360
this parameter here and this parameter here have no relation whatsoever they


5900
07:42:47,360 --> 07:42:53,040
are entirely separate but it is totally fine to call self here


5901
07:42:53,040 --> 07:42:56,840
and self here the names are not in conflict with each


5902
07:42:56,840 --> 07:43:04,080
other and all right with that we have the very basics of using classes and


5903
07:43:04,080 --> 07:43:08,000
objects although right now we do have a problem


5904
07:43:08,000 --> 07:43:12,558
that our monster always has the same health and the same energy


5905
07:43:12,558 --> 07:43:17,200
so even if we created multiple monsters so what i could be doing


5906
07:43:17,200 --> 07:43:22,638
is monster 1 monster 2 monster 3


5907
07:43:22,638 --> 07:43:28,080
and let me get rid of this one here all of these monsters would have the same


5908
07:43:28,080 --> 07:43:31,280
amount of health and the same amount of energy


5909
07:43:31,280 --> 07:43:34,558
and they all have the same attack and move method


5910
07:43:34,558 --> 07:43:39,120
which is fine to an extent but i do want them to have different amounts of health


5911
07:43:39,120 --> 07:43:43,680
and different amounts of energy and to implement that we need another


5912
07:43:43,680 --> 07:43:48,638
concept and that is called dunder methods so let's talk about that one and


5913
07:43:48,638 --> 07:43:54,638
the dunder here just stands for double underscore meaning we are talking about


5914
07:43:54,638 --> 07:43:59,200
a double underscore at the beginning and at the end of the method


5915
07:43:59,200 --> 07:44:05,120
but it's important here we are still talking just about methods


5916
07:44:05,120 --> 07:44:09,520
so essentially we are calling a specific kind of function


5917
07:44:09,520 --> 07:44:16,160
and let's talk about why it's special a dunder method is just another method


5918
07:44:16,160 --> 07:44:21,120
the thing that makes it special is that it is not called by the user instead it


5919
07:44:21,120 --> 07:44:24,638
is called by python when something else is happening


5920
07:44:24,638 --> 07:44:28,958
for example there is the done therein method and this one is called when the


5921
07:44:28,958 --> 07:44:34,000
object is being created another example is the lan method and this one is called


5922
07:44:34,000 --> 07:44:37,440
when the object is passed into the len function


5923
07:44:37,440 --> 07:44:41,040
and besides that we also have done the apps and this one is called when we are


5924
07:44:41,040 --> 07:44:43,760
passing the object into the apps function


5925
07:44:43,760 --> 07:44:50,398
and that is really the entire idea it honestly isn't that complicated the most


5926
07:44:50,398 --> 07:44:54,000
important dunder method you have to understand is done their init


5927
07:44:54,000 --> 07:44:57,680
this one you are going to be calling all the time


5928
07:44:57,680 --> 07:45:02,478
but let's actually do all of this in code that should make the most sense


5929
07:45:02,478 --> 07:45:06,080
all right here we have the class i created earlier


5930
07:45:06,080 --> 07:45:09,520
and what we have seen earlier as well i can


5931
07:45:09,520 --> 07:45:15,120
create monster one and that is just going to be the monster


5932
07:45:15,120 --> 07:45:21,040
and i can also have monster two and if i now print


5933
07:45:21,040 --> 07:45:24,718
monster 1 dot health


5934
07:45:24,718 --> 07:45:29,360
and monster 2 dot health we get the same number


5935
07:45:29,360 --> 07:45:34,160
because we always set health to 90. there's no way to customize it


5936
07:45:34,160 --> 07:45:39,120
and basically what i want to do is as soon as the class is being created then


5937
07:45:39,120 --> 07:45:42,160
i want to create these different attributes


5938
07:45:42,160 --> 07:45:47,520
and instead what i want to do is when this class is being created i want to


5939
07:45:47,520 --> 07:45:51,840
create this health and this energy with custom values


5940
07:45:51,840 --> 07:45:56,878
and for that to work we need to define a dunder method and


5941
07:45:56,878 --> 07:46:02,638
the one we need is called dunder init and this is just going to be another


5942
07:46:02,638 --> 07:46:07,600
method like attack and move we are just calling a method meaning the first


5943
07:46:07,600 --> 07:46:11,760
parameter here has to be a reference to the class itself


5944
07:46:11,760 --> 07:46:16,478
and for now let me just print the monster was


5945
07:46:16,478 --> 07:46:22,000
created and do pay attention i am never calling


5946
07:46:22,000 --> 07:46:26,958
the init method myself but if i run this we get the monster was created the


5947
07:46:26,958 --> 07:46:33,680
monster was created and then 90 and 90. and what that means if i minimize this a


5948
07:46:33,680 --> 07:46:36,958
bit every time we are creating a monster so


5949
07:46:36,958 --> 07:46:40,558
first here and then here


5950
07:46:40,558 --> 07:46:46,478
then we are calling this dunder method and this standard method we can also


5951
07:46:46,478 --> 07:46:50,958
give some parameters for example we could specify in here the amount of


5952
07:46:50,958 --> 07:46:57,200
health and the amount of energy we want and well i hope you can see where this


5953
07:46:57,200 --> 07:47:00,878
is going basically what we can do now is we can


5954
07:47:00,878 --> 07:47:06,160
set self.health to whatever health parameter we pass in


5955
07:47:06,160 --> 07:47:11,120
and we can do the same thing for energy and the names here might be a bit


5956
07:47:11,120 --> 07:47:15,840
confusing so let me add a bit of white space and explain


5957
07:47:15,840 --> 07:47:19,520
this self.health here is referring to


5958
07:47:19,520 --> 07:47:25,920
this self.health of the monster class whereas this health here


5959
07:47:25,920 --> 07:47:31,440
refers to this parameter and the important point here is self


5960
07:47:31,440 --> 07:47:34,878
because this one specifies where health belongs to


5961
07:47:34,878 --> 07:47:39,200
i hope this makes sense this is something you see fairly often


5962
07:47:39,200 --> 07:47:45,120
let me remove the white space again and now when i am calling the monster i


5963
07:47:45,120 --> 07:47:48,558
can either pass in arguments or named arguments


5964
07:47:48,558 --> 07:47:53,600
let's say for the first monster i want health 10 and energy 20


5965
07:47:53,600 --> 07:47:59,280
and for the second monster i could specify health being 50


5966
07:47:59,280 --> 07:48:06,878
and energy being 100. now if i run all of this we get monster


5967
07:48:06,878 --> 07:48:12,398
1 health is 10 and monster 2 health is 50.


5968
07:48:12,398 --> 07:48:21,120
and this 10 here refers to this 10 and this 50 is referring to this 50 here


5969
07:48:21,120 --> 07:48:24,718
meaning now we can have custom attributes


5970
07:48:24,718 --> 07:48:28,958
and what is even better since this self


5971
07:48:28,958 --> 07:48:34,000
is a reference to the class itself we can just create the attribute in here


5972
07:48:34,000 --> 07:48:40,080
which means we don't need those lines at all it would still work without them


5973
07:48:40,080 --> 07:48:45,360
if i run this now this is still working just fine


5974
07:48:45,360 --> 07:48:51,520
and this is what you see most of the time where the class by itself doesn't


5975
07:48:51,520 --> 07:48:56,080
have any attributes we only create attributes when we are creating the


5976
07:48:56,080 --> 07:48:59,840
class with the init method or the done therein method


5977
07:48:59,840 --> 07:49:04,080
and then inside of the other methods we are calling self all the time to refer


5978
07:49:04,080 --> 07:49:07,680
to the class and i just realized this should be


5979
07:49:07,680 --> 07:49:13,920
self instead of monster so we're capturing this self here


5980
07:49:13,920 --> 07:49:18,240
and what you are going to notice is that you are going to write self all the time


5981
07:49:18,240 --> 07:49:23,120
it is a little bit annoying but well it is manageable


5982
07:49:23,120 --> 07:49:27,520
and well with that we have the first init method


5983
07:49:27,520 --> 07:49:32,558
but there are quite a few more although those you wouldn't use that often


5984
07:49:32,558 --> 07:49:38,478
and just to keep things simple let me get rid of monster 2


5985
07:49:38,478 --> 07:49:43,520
and i don't want to print anything at all


5986
07:49:43,520 --> 07:49:49,440
another danda method i talked about in the introduction is len


5987
07:49:49,760 --> 07:49:53,840
and this one needs self and no other parameters


5988
07:49:53,840 --> 07:49:57,600
and in here we just want to return something


5989
07:49:57,600 --> 07:49:59,760
let me return


5990
07:49:59,760 --> 07:50:05,920
the number 5 and what this one is going to do


5991
07:50:05,920 --> 07:50:14,878
is if i call len and pass in monster1 in there and this len just as a quick recap


5992
07:50:14,878 --> 07:50:20,558
if i pass in any kind of string into len let's say test


5993
07:50:20,558 --> 07:50:26,558
and if i print the result i get 4


5994
07:50:26,558 --> 07:50:30,240
or the number of characters inside of the string


5995
07:50:30,240 --> 07:50:35,280
i guess i could also pass a list in here that might make a bit more sense


5996
07:50:35,280 --> 07:50:40,558
so i have a list with 5 entries and the length of it is 5.


5997
07:50:40,558 --> 07:50:45,840
but what i can do now if my monster has a len method i can pass monster 1 in


5998
07:50:45,840 --> 07:50:49,680
here and it would return 5 as well


5999
07:50:49,680 --> 07:50:53,440
and any number that is being returned here


6000
07:50:53,440 --> 07:50:56,718
is going to be passed into the length function


6001
07:50:56,718 --> 07:51:00,080
and i guess for something slightly more relevant


6002
07:51:00,080 --> 07:51:06,320
instead of returning a number i could return self.health


6003
07:51:06,320 --> 07:51:10,958
and now if i run this i'm getting 10 or the amount of health my character has


6004
07:51:10,958 --> 07:51:16,478
which is 10 right now and another example we have seen in the


6005
07:51:16,478 --> 07:51:22,558
introduction that works in the same way is abs and we need dunder on both sides


6006
07:51:22,558 --> 07:51:27,280
and in here self and again i have to return something so


6007
07:51:27,280 --> 07:51:32,558
return and for this case let's say self.energy


6008
07:51:32,558 --> 07:51:37,200
and if i copy this and pass it into absolute


6009
07:51:37,200 --> 07:51:41,920
i get 20. now usually absolute is if you have a


6010
07:51:41,920 --> 07:51:44,958
negative number and you want to make sure it's always


6011
07:51:44,958 --> 07:51:49,280
positive that's what it does but well you could theoretically do


6012
07:51:49,280 --> 07:51:52,478
whatever you want with it


6013
07:51:52,638 --> 07:51:57,920
now what you can also do is one specific function in python and


6014
07:51:57,920 --> 07:52:03,680
that is called dir short for directory i think or directory listing or something


6015
07:52:03,680 --> 07:52:07,280
like that basically what it does you pass in


6016
07:52:07,280 --> 07:52:10,958
an object and then you want to print


6017
07:52:10,958 --> 07:52:15,440
the result and what you get from that


6018
07:52:15,440 --> 07:52:19,920
is all of the dunder methods and at the end


6019
07:52:19,920 --> 07:52:25,760
the attributes and the normal methods and in here you can see


6020
07:52:25,760 --> 07:52:30,160
a lot of stuff actually and what you have to understand here is


6021
07:52:30,160 --> 07:52:34,398
every time we are creating an object python already gives it some dunder


6022
07:52:34,398 --> 07:52:38,160
methods for example here we can see the dir


6023
07:52:38,160 --> 07:52:43,680
method and this one is necessary for the ear function to work


6024
07:52:43,680 --> 07:52:48,558
it kind of works like the len method the one we have created ourselves or the abs


6025
07:52:48,558 --> 07:52:53,040
function and i guess the one we have just created


6026
07:52:53,040 --> 07:52:56,878
is the init method this is the really important one


6027
07:52:56,878 --> 07:53:01,680
and most of those you really don't want to worry about because well they're just


6028
07:53:01,680 --> 07:53:07,040
there to make the class work but we don't really have to worry about them


6029
07:53:07,040 --> 07:53:10,718
although some dunder methods in here can be very useful


6030
07:53:10,718 --> 07:53:15,760
for example dander dict is well it's kind of a dictionary but


6031
07:53:15,760 --> 07:53:20,878
not in the way you would expect basically how you would use that one


6032
07:53:20,878 --> 07:53:29,600
let me print it right after the monster i want to print monster 1 and then dot


6033
07:53:29,600 --> 07:53:32,000
dunder dict


6034
07:53:32,000 --> 07:53:36,478
and in here this is the one exception where this is not a method this is just


6035
07:53:36,478 --> 07:53:41,120
an attribute so no brackets afterwards and this one gives us all of the


6036
07:53:41,120 --> 07:53:45,280
attributes of the method inside of one dictionary


6037
07:53:45,280 --> 07:53:50,240
can be quite useful sometimes although you wouldn't be using it too often


6038
07:53:50,240 --> 07:53:55,680
now another way to get this dict here is to let me duplicate the entire line you


6039
07:53:55,680 --> 07:54:00,240
can call the varus function and pass in monster1


6040
07:54:00,240 --> 07:54:04,798
and this one is giving us the very same thing


6041
07:54:04,798 --> 07:54:10,000
although i have hardly ever used either of these most of the time you just don't


6042
07:54:10,000 --> 07:54:13,680
need them and with that you should understand


6043
07:54:13,680 --> 07:54:18,638
dunder methods reasonably well now there are quite a few dunder methods


6044
07:54:18,638 --> 07:54:23,920
that get a bit more advanced i only covered the really fundamental one some


6045
07:54:23,920 --> 07:54:29,840
other examples of thunder methods is for example dunder call


6046
07:54:29,840 --> 07:54:33,440
and in here we only need one parameter self


6047
07:54:33,440 --> 07:54:39,280
and in here we can return something else again


6048
07:54:39,280 --> 07:54:42,478
and let me dissipate dunder on both sides


6049
07:54:42,478 --> 07:54:48,558
let's say the monster was called and what this dunder call does


6050
07:54:48,558 --> 07:54:52,958
is it essentially turns our object into a function


6051
07:54:52,958 --> 07:54:59,440
meaning i can call monster1 and then add brackets afterwards and if i do that


6052
07:54:59,440 --> 07:55:03,840
we are not getting anything because i would have to print what i get


6053
07:55:03,840 --> 07:55:08,798
so i have to put brackets around it and call print and now the monster was


6054
07:55:08,798 --> 07:55:13,360
called i guess a cleaner way of doing this is


6055
07:55:13,360 --> 07:55:18,398
to return nothing and just


6056
07:55:18,398 --> 07:55:21,120
print this string


6057
07:55:21,120 --> 07:55:25,760
so now if i call monster1 we get the monster was called and


6058
07:55:25,760 --> 07:55:32,398
nothing is being returned and when you create a function in python


6059
07:55:32,398 --> 07:55:38,398
it basically behind the scenes creates an object with this standard method here


6060
07:55:38,398 --> 07:55:42,958
and this we can just create ourselves it really isn't that complicated


6061
07:55:42,958 --> 07:55:46,638
and what we can also do is to add and subtract numbers


6062
07:55:46,638 --> 07:55:51,440
and this you would for example do with dunder add


6063
07:55:51,440 --> 07:55:56,000
and in here you need two parameters first of all self as always and then you


6064
07:55:56,000 --> 07:56:01,520
need some other number and what you can do in here is return


6065
07:56:01,520 --> 07:56:06,240
something let's say i want to self.health


6066
07:56:06,240 --> 07:56:10,080
and then plus whatever other number i get


6067
07:56:10,080 --> 07:56:14,638
and now that i have that i can


6068
07:56:14,638 --> 07:56:17,920
print monster 1


6069
07:56:17,920 --> 07:56:20,160
plus 10


6070
07:56:20,160 --> 07:56:25,840
and if i run it i get 20 which is if i find it


6071
07:56:25,840 --> 07:56:32,320
so the health of my monster is 10 and i add 10 towards it so i get 20. and i


6072
07:56:32,320 --> 07:56:37,200
guess to make this a bit more understandable let's add 55 in here


6073
07:56:37,200 --> 07:56:46,000
and i get 65 which is 10 plus 55 and well that is a couple more dunder


6074
07:56:46,000 --> 07:56:49,600
methods they can be incredibly useful although


6075
07:56:49,600 --> 07:56:54,000
most of the time you are only going to use thunder init this is the one you


6076
07:56:54,000 --> 07:56:57,920
absolutely have to understand but i guess they don't really get that


6077
07:56:57,920 --> 07:57:01,600
much more complicated so it shouldn't be too hard


6078
07:57:01,600 --> 07:57:06,718
all right now for the challenge for this part i want you guys to do some research


6079
07:57:06,718 --> 07:57:10,840
because there's another dunder method that is called


6080
07:57:10,840 --> 07:57:17,440
str and i want you guys to look up online what it does and how to use it in


6081
07:57:17,440 --> 07:57:19,840
code


6082
07:57:21,600 --> 07:57:26,638
alright here we are in the official python documentation and there you can


6083
07:57:26,638 --> 07:57:32,398
see dunder string or dunder str and basically what it does it's called


6084
07:57:32,398 --> 07:57:37,520
by the str object built in function format and print to compute the informal


6085
07:57:37,520 --> 07:57:41,280
or nicely printable string presentation of the object


6086
07:57:41,280 --> 07:57:45,360
basically what it means is that this object is going to return some text so


6087
07:57:45,360 --> 07:57:50,398
let's have a look at it here we are back in the code and i only


6088
07:57:50,398 --> 07:57:55,920
need one parameter and that is and now i have to return some kind of


6089
07:57:55,920 --> 07:58:02,240
string and the string i want for this one let's say a monster


6090
07:58:02,240 --> 07:58:07,840
and what i can do with that let me get rid of this print statement and instead


6091
07:58:07,840 --> 07:58:12,958
i want to print str or monster one


6092
07:58:12,958 --> 07:58:20,398
and this is going to return a monster and we don't even need this str because


6093
07:58:20,398 --> 07:58:28,240
print is trying to find a string so let me duplicate this line and remove


6094
07:58:28,240 --> 07:58:35,840
the str and just have monster 1. if i call this now i still get a monster


6095
07:58:35,840 --> 07:58:39,920
and this can be a really nice way to look at your objects and see what they


6096
07:58:39,920 --> 07:58:43,440
are doing because if we didn't have this done


6097
07:58:43,440 --> 07:58:47,920
their method let me comment it out and run this again


6098
07:58:47,920 --> 07:58:53,760
all we get is a monster object which really isn't that useful


6099
07:58:53,760 --> 07:59:00,160
and obviously this str can return a lot more than just a simple string for


6100
07:59:00,160 --> 07:59:05,840
example we could have an f string with


6101
07:59:05,840 --> 07:59:10,958
health that says self dot health


6102
07:59:10,958 --> 07:59:13,520
and energy


6103
07:59:13,520 --> 07:59:18,558
that says self dot energy and now if i run this


6104
07:59:18,558 --> 07:59:23,440
we get quite a bit of information by just passing the monster or the object


6105
07:59:23,440 --> 07:59:29,440
into the print statement so this str can be really really useful


6106
07:59:29,680 --> 07:59:33,840
and with that we have covered quite a few dunder methods if you look online


6107
07:59:33,840 --> 07:59:39,200
you can find even more but well most of the time you are not going to need them


6108
07:59:39,200 --> 07:59:43,120
this is very often a fairly advanced topic


6109
07:59:43,120 --> 07:59:47,440
except thunder init this is the one you are going to use a lot


6110
07:59:47,440 --> 07:59:51,600
all right with that we have dunder init methods covered


6111
07:59:51,600 --> 07:59:56,718
and if you understand all of this so far you can actually understand python


6112
07:59:56,718 --> 08:00:01,920
itself quite a bit more let's talk about this one in the next part and the one


6113
08:00:01,920 --> 08:00:06,240
thing i think that confuses beginners quite a bit is that every single thing


6114
08:00:06,240 --> 08:00:12,240
in python is an object meaning every time you see a string or integers you


6115
08:00:12,240 --> 08:00:16,878
are going to see an object just like the objects that we have created so our


6116
08:00:16,878 --> 08:00:20,398
monster and this even includes functions which


6117
08:00:20,398 --> 08:00:23,920
are just objects with the called under method


6118
08:00:23,920 --> 08:00:28,160
and i'm going to show you some examples in just a second but most of what i will


6119
08:00:28,160 --> 08:00:33,360
cover here isn't really important i just want you guys to understand how it works


6120
08:00:33,360 --> 08:00:38,000
so you don't get confused later on and there's another thing that i believe


6121
08:00:38,000 --> 08:00:42,240
is very often confusing and that is the difference between a function and a


6122
08:00:42,240 --> 08:00:45,920
method and the reason why this is confusing is


6123
08:00:45,920 --> 08:00:50,798
both just execute a block of code so in terms of functionality they


6124
08:00:50,798 --> 08:00:56,320
basically do the same thing however the difference is that a method always


6125
08:00:56,320 --> 08:01:00,398
belongs to an object it doesn't matter if the object was


6126
08:01:00,398 --> 08:01:04,878
created by us or by python and a good example here would be using a


6127
08:01:04,878 --> 08:01:08,478
string so if we have a function this would be


6128
08:01:08,478 --> 08:01:14,160
len for example and we can pass a string into it this will return four


6129
08:01:14,160 --> 08:01:19,200
and a method would be something with dot and then upper for example for string


6130
08:01:19,200 --> 08:01:23,440
returns uppercase letters for this string


6131
08:01:23,440 --> 08:01:27,440
and that really is the entire difference that's the main thing you have to


6132
08:01:27,440 --> 08:01:31,680
understand and it doesn't matter if we create the method ourselves or the


6133
08:01:31,680 --> 08:01:35,040
function ourselves or if it's created by python


6134
08:01:35,040 --> 08:01:39,600
and the reason why these are different for example is that the lan method could


6135
08:01:39,600 --> 08:01:44,320
work for lots of other things as well for example you could pass in a list in


6136
08:01:44,320 --> 08:01:49,120
here you could pass in a dictionary or a tuple


6137
08:01:49,120 --> 08:01:54,080
it would still work with different data types whereas upper


6138
08:01:54,080 --> 08:01:59,840
only works for strings you couldn't add a list with upper that one would not


6139
08:01:59,840 --> 08:02:02,558
work so it makes sense in this case that


6140
08:02:02,558 --> 08:02:07,680
upper only exists as a method for strings whereas the ln should be a


6141
08:02:07,680 --> 08:02:12,160
function so you can pass in different kinds of objects in here and they would


6142
08:02:12,160 --> 08:02:15,840
all work you could perfectly find create some


6143
08:02:15,840 --> 08:02:20,398
kind of len method for test and it would work just fine although then you would


6144
08:02:20,398 --> 08:02:25,600
also have to create a lan method for lists for dictionaries for tuples for


6145
08:02:25,600 --> 08:02:28,958
all of that stuff and it would be quite labor intensive


6146
08:02:28,958 --> 08:02:32,798
so all we're doing here is to keep things more efficient


6147
08:02:32,798 --> 08:02:37,440
but all right let's have a look at some code and let's have a small deep dive


6148
08:02:37,440 --> 08:02:41,680
into python here i have a completely empty sheet of


6149
08:02:41,680 --> 08:02:47,680
code and what i want to create for now is create a test variable and this one


6150
08:02:47,680 --> 08:02:53,600
should have a string let's call it a doesn't really matter what it is


6151
08:02:53,600 --> 08:02:56,958
and what i can do now i can call my print


6152
08:02:56,958 --> 08:03:02,718
dir and pass in my test in here and if i run this now


6153
08:03:02,718 --> 08:03:07,520
i am getting a bunch of dunder methods and after they


6154
08:03:07,520 --> 08:03:12,558
are over starting from here i get a couple of methods and attributes


6155
08:03:12,558 --> 08:03:16,878
now the dir method doesn't separate between methods and attributes so we


6156
08:03:16,878 --> 08:03:19,760
just get one big list but


6157
08:03:19,760 --> 08:03:23,520
well basically what we get here is an object


6158
08:03:23,520 --> 08:03:29,920
and anything in here you could just call like upper or title or strip all of


6159
08:03:29,920 --> 08:03:35,440
these are very simple methods and along with that we have the len


6160
08:03:35,440 --> 08:03:39,680
dunder method and this is what's being called when we are passing this string


6161
08:03:39,680 --> 08:03:45,280
into the len function and besides that what you can also do


6162
08:03:45,280 --> 08:03:50,558
let me get rid of this test and instead create define test


6163
08:03:50,558 --> 08:03:54,080
and then here i let me just add pass


6164
08:03:54,080 --> 08:03:59,840
so this is a function with the name test and i'm still printing dir test so if i


6165
08:03:59,840 --> 08:04:03,760
run this i am getting another object and this


6166
08:04:03,760 --> 08:04:09,200
object is special because it has a call dunder method


6167
08:04:09,200 --> 08:04:13,600
meaning when we're adding brackets afterwards it is being executed and


6168
08:04:13,600 --> 08:04:18,000
that's basically what a function is in python it's just an object with the


6169
08:04:18,000 --> 08:04:22,320
dunder call method it really isn't much more than that although we do have a


6170
08:04:22,320 --> 08:04:29,200
couple extra things that make this a bit more special but that's the main idea


6171
08:04:29,200 --> 08:04:35,600
and if you really wanted to you could even store this function inside of a


6172
08:04:35,600 --> 08:04:39,360
variable and this works because the function is


6173
08:04:39,360 --> 08:04:43,280
an object so this is just going to be an object


6174
08:04:43,280 --> 08:04:49,280
meaning if i now print a we are getting the same outcome


6175
08:04:49,280 --> 08:04:55,280
although what we can even do now let's call it another attribute that is


6176
08:04:55,280 --> 08:04:59,120
not how you spell that and this could just be 10


6177
08:04:59,120 --> 08:05:05,760
and now if i run this our function has another attribute


6178
08:05:05,760 --> 08:05:11,200
and again this is working because functions are just objects


6179
08:05:11,200 --> 08:05:16,478
although in practice you wouldn't really do this there's no reason for it


6180
08:05:16,478 --> 08:05:20,398
but what is much more common is that you are


6181
08:05:20,398 --> 08:05:25,040
passing functions or methods into other objects


6182
08:05:25,040 --> 08:05:30,160
so what is much more common let's say for example a simple add function and


6183
08:05:30,160 --> 08:05:36,878
this one takes a and b and is going to return a plus b


6184
08:05:36,878 --> 08:05:41,040
obviously this still isn't particularly useful but i just want to illustrate


6185
08:05:41,040 --> 08:05:45,120
what it does and now i can create a class and let's


6186
08:05:45,120 --> 08:05:52,000
call it test and in here for the dunder init method


6187
08:05:52,000 --> 08:05:57,520
i want to have self and i want to add an add function


6188
08:05:57,520 --> 08:06:01,040
and now inside of this dunder init add function


6189
08:06:01,040 --> 08:06:07,120
i can set an attribute self dot add function and this should be the argument


6190
08:06:07,120 --> 08:06:11,520
we get from the parameter add function and now


6191
08:06:11,520 --> 08:06:16,878
when i create this test i have to pass in


6192
08:06:16,878 --> 08:06:21,840
one function and i want to have this add function here so i'm going to add it in


6193
08:06:21,840 --> 08:06:27,120
here and let me use a named argument so it's


6194
08:06:27,120 --> 08:06:31,920
a bit easier to see what's happening and in here it is really important that


6195
08:06:31,920 --> 08:06:36,320
you don't add brackets because we don't want to call this function we want to


6196
08:06:36,320 --> 08:06:42,000
get the function itself so the object of the function not what's being returned


6197
08:06:42,000 --> 08:06:46,798
and if i run this now this is working just fine


6198
08:06:46,798 --> 08:06:51,120
and even better what i can do i can call test dot


6199
08:06:51,120 --> 08:06:56,000
add function and i can pass in let's say one and two


6200
08:06:56,000 --> 08:07:00,000
and this is not doing anything because we're not printing anything we're just


6201
08:07:00,000 --> 08:07:02,320
returning something so


6202
08:07:02,320 --> 08:07:07,680
if i put all of this into a print statement now we are getting free


6203
08:07:07,680 --> 08:07:11,520
and i hope all of this is making sense this is a really important thing to


6204
08:07:11,520 --> 08:07:15,680
understand right now this here is creating an


6205
08:07:15,680 --> 08:07:20,000
object of a function and this object we can pass around


6206
08:07:20,000 --> 08:07:24,160
for example we could pass it inside of a class and this would work


6207
08:07:24,160 --> 08:07:29,280
just fine and then inside of the class we can store it inside of an attribute


6208
08:07:29,280 --> 08:07:33,520
and then call it from outside of the function this is working just fine


6209
08:07:33,520 --> 08:07:39,280
there's no limitations on this and this is something you really want to


6210
08:07:39,280 --> 08:07:42,718
practice because passing around functions is a really important thing to


6211
08:07:42,718 --> 08:07:47,840
understand and i guess since this is really


6212
08:07:47,840 --> 08:07:53,280
important we should practice this with a slightly larger exercise


6213
08:07:53,280 --> 08:07:56,478
and let me add some comments that should help quite a bit


6214
08:07:56,478 --> 08:08:00,638
first of all i want you guys to create a monster class with a parameter called


6215
08:08:00,638 --> 08:08:06,638
funk and this funk should be stored as a parameter that's the first step


6216
08:08:06,638 --> 08:08:10,398
after that i want you guys to create another class


6217
08:08:10,398 --> 08:08:15,520
and this one is called attacks and this has four methods we have let me put it


6218
08:08:15,520 --> 08:08:20,878
on another line we have byte strike slash and kick and


6219
08:08:20,878 --> 08:08:25,120
for each method you just print some text basically whatever you want i would


6220
08:08:25,120 --> 08:08:30,638
recommend to print kick slash strike and byte but it really doesn't matter


6221
08:08:30,638 --> 08:08:35,920
and let me add proper white space here and then for the final step


6222
08:08:35,920 --> 08:08:39,760
i want you guys to create a monster object and give it one of the attack


6223
08:08:39,760 --> 08:08:45,840
methods from the attack class and remember here that methods are


6224
08:08:45,840 --> 08:08:49,280
basically just functions the only difference is that they are part of an


6225
08:08:49,280 --> 08:08:53,760
object so this should work kind of similar compared to what you have seen


6226
08:08:53,760 --> 08:08:56,798
here but well it's going to be slightly


6227
08:08:56,798 --> 08:09:02,080
different so experiment with this and see how far you get


6228
08:09:03,440 --> 08:09:08,398
all right let's try together now first of all i want to create a monster class


6229
08:09:08,398 --> 08:09:14,798
and this i do with class monster and in here i want a dunder init method


6230
08:09:14,798 --> 08:09:20,878
that needs self and a funk and this funk i want to turn into an


6231
08:09:20,878 --> 08:09:25,920
attribute so self dot func and i want to capture the parameter or


6232
08:09:25,920 --> 08:09:31,600
the argument we get here in there and this is covering all of this


6233
08:09:31,600 --> 08:09:39,280
next up we have to create another class so class and this one is called attacks


6234
08:09:39,280 --> 08:09:45,200
and in here we don't need a donderended method instead i want to create define


6235
08:09:45,200 --> 08:09:50,398
let's start with byte and we need self as always and in here i


6236
08:09:50,398 --> 08:09:53,920
just want to print byte


6237
08:09:53,920 --> 08:09:59,440
and since we need four attack methods let me copy this


6238
08:09:59,440 --> 08:10:02,398
a few more times


6239
08:10:02,398 --> 08:10:08,958
and now besides byte i also want strike


6240
08:10:08,958 --> 08:10:12,718
then i want slash


6241
08:10:12,718 --> 08:10:18,878
and finally i want kik and i think you can already tell why


6242
08:10:18,878 --> 08:10:23,360
this might be useful it's a very neat way to organize all of your different


6243
08:10:23,360 --> 08:10:26,240
functions if you have a really large game with


6244
08:10:26,240 --> 08:10:30,320
hundreds of different attack methods this may actually be really nice to


6245
08:10:30,320 --> 08:10:33,120
organize all of this all right


6246
08:10:33,120 --> 08:10:37,280
now finally i want to create an object of my monster


6247
08:10:37,280 --> 08:10:42,558
so monster in lower case and then here i want to have my monster


6248
08:10:42,558 --> 08:10:48,878
and now we have to define a function now this you could approach in a couple


6249
08:10:48,878 --> 08:10:53,760
of different ways although there's one way that is definitely wrong and it's


6250
08:10:53,760 --> 08:10:57,920
very tempting to go this way you could write something like attacks and then


6251
08:10:57,920 --> 08:11:01,760
dot byte and if i run this code


6252
08:11:01,760 --> 08:11:09,360
we get a 3 and this 3 comes from up here so let me comment out all of this


6253
08:11:09,440 --> 08:11:13,360
and if i run this again now we can't see any difference


6254
08:11:13,360 --> 08:11:18,080
but if i run monster.funk


6255
08:11:18,080 --> 08:11:22,478
we are getting that attack.byte is missing one required positional argument


6256
08:11:22,478 --> 08:11:27,440
and that is self and this is a reasonably common error


6257
08:11:27,440 --> 08:11:32,638
the reason is that this here is not returning an actual object it's


6258
08:11:32,638 --> 08:11:37,600
returning a class and this is confusing python now an easy


6259
08:11:37,600 --> 08:11:42,558
way around this is to actually turn this class into an object by calling it so


6260
08:11:42,558 --> 08:11:46,320
adding brackets afterwards and now if i run this we are getting


6261
08:11:46,320 --> 08:11:49,920
byte and basically what is happening here


6262
08:11:49,920 --> 08:11:52,558
think of this in terms of return statements


6263
08:11:52,558 --> 08:11:57,040
when we are calling this attacks it's returning an object


6264
08:11:57,040 --> 08:12:03,280
and then inside of this object we are getting the byte method which is this


6265
08:12:03,280 --> 08:12:07,920
byte method here and if you don't like how this looks


6266
08:12:07,920 --> 08:12:12,080
what you could also do is create a separate object let's call


6267
08:12:12,080 --> 08:12:16,638
it attacks and in here i could add this attacks


6268
08:12:16,638 --> 08:12:22,080
and then call attacks.byte and we will get the same result


6269
08:12:22,080 --> 08:12:27,280
and this is something we are going to explore quite a bit more that you pass


6270
08:12:27,280 --> 08:12:30,000
different things around different classes


6271
08:12:30,000 --> 08:12:33,360
so that in this example we are taking


6272
08:12:33,360 --> 08:12:38,398
the byte method and passing it into another object


6273
08:12:38,398 --> 08:12:43,440
and this is getting incredibly powerful and really important to understand if


6274
08:12:43,440 --> 08:12:48,160
you want to understand more complex code because a key part of object oriented


6275
08:12:48,160 --> 08:12:52,320
programming is that you work with different objects and make them interact


6276
08:12:52,320 --> 08:12:58,478
with each other and this example here so this part down here is one example to


6277
08:12:58,478 --> 08:13:02,558
make classes interact with each other and i would really recommend you to


6278
08:13:02,558 --> 08:13:06,958
practice this in your own time it's really going to be helpful


6279
08:13:06,958 --> 08:13:13,120
but all right with that we have covered a really basic deep dive into python


6280
08:13:13,120 --> 08:13:17,120
although i do want to practice this a bit more and there's one important topic


6281
08:13:17,120 --> 08:13:22,718
i do want to cover and that is going to be scope in terms of objects and classes


6282
08:13:22,718 --> 08:13:27,280
let's talk about that one in the next section alright so let's talk about


6283
08:13:27,280 --> 08:13:32,320
classes and scope and this is one of the really powerful parts of objects that


6284
08:13:32,320 --> 08:13:36,638
make it really easy to work with this scope but let's talk about it


6285
08:13:36,638 --> 08:13:42,160
basically every method so every function inside of a class has a reference to


6286
08:13:42,160 --> 08:13:48,000
that class and because of that it's really easy to get and change class


6287
08:13:48,000 --> 08:13:52,398
attributes and because of that methods are much


6288
08:13:52,398 --> 08:13:55,040
easier to work with than normal functions


6289
08:13:55,040 --> 08:13:59,200
meaning they rely much less on parameters the global keyword and return


6290
08:13:59,200 --> 08:14:03,600
statements although you can still use them if you really want to and sometimes


6291
08:14:03,600 --> 08:14:07,520
that does make sense but you are going to do this much less


6292
08:14:07,520 --> 08:14:11,120
often and what is even better objects can be


6293
08:14:11,120 --> 08:14:14,398
influenced from outside of the object itself


6294
08:14:14,398 --> 08:14:18,240
and even from the local scope of a function


6295
08:14:18,240 --> 08:14:22,320
basically objects you can change wherever you want there is no limitation


6296
08:14:22,320 --> 08:14:26,958
on the scope for them which makes it even easier to work with them


6297
08:14:26,958 --> 08:14:31,520
but i guess let's have a look at all of this in code that should illustrate this


6298
08:14:31,520 --> 08:14:35,440
the best here i have a completely empty sheet of


6299
08:14:35,440 --> 08:14:39,600
code and first of all i want to illustrate the problem so let's talk


6300
08:14:39,600 --> 08:14:44,478
about scope again let me add a comment scope problem


6301
08:14:44,478 --> 08:14:49,360
and let's say i have a game and i have some kind of health that right now is


6302
08:14:49,360 --> 08:14:53,040
10. and for this health i want to have a


6303
08:14:53,040 --> 08:14:57,920
function let's call it update health and this one takes an amount


6304
08:14:57,920 --> 08:15:03,440
and what it really does is it adds that amount to the health


6305
08:15:03,440 --> 08:15:09,600
a super simple function just about the simplest function you could write


6306
08:15:09,600 --> 08:15:13,280
now what i want to do let me say i want to print health


6307
08:15:13,280 --> 08:15:19,200
then i want to update my health with 20 and then i want to print my


6308
08:15:19,200 --> 08:15:23,840
health again and if i were to run this what do you


6309
08:15:23,840 --> 08:15:26,718
think is going to happen just think about it


6310
08:15:26,718 --> 08:15:32,080
and well if i print it we are getting an error and what python is unhappy about


6311
08:15:32,080 --> 08:15:37,760
is that we have a local variable health referenced before assignment


6312
08:15:37,760 --> 08:15:41,040
and what is happening here is that this


6313
08:15:41,040 --> 08:15:46,478
health to python is a local variable let me remove the error messages they


6314
08:15:46,478 --> 08:15:49,760
are getting a bit annoying that's easier to work with


6315
08:15:49,760 --> 08:15:56,000
essentially this health only exists in the scope of this function here


6316
08:15:56,000 --> 08:15:59,120
or in other words this health here


6317
08:15:59,120 --> 08:16:05,760
and this health here to python are two completely separate things


6318
08:16:05,760 --> 08:16:10,080
and then when we are trying to update this health with some amount i even


6319
08:16:10,080 --> 08:16:14,638
cannot find any starting amount for this health as a consequence we are getting


6320
08:16:14,638 --> 08:16:18,638
an error and there are a couple of ways to get


6321
08:16:18,638 --> 08:16:23,040
around this for example we could use global health


6322
08:16:23,040 --> 08:16:27,360
that's probably the easiest one and now this would work although


6323
08:16:27,360 --> 08:16:32,718
you could also use return statements but it really isn't the cleanest way to work


6324
08:16:32,718 --> 08:16:38,958
with this so this is not great so let me comment it all out and let's


6325
08:16:38,958 --> 08:16:44,958
do the same thing with classes so let me create a class monster again


6326
08:16:44,958 --> 08:16:50,240
and in here i want to create a dander init method that needs self


6327
08:16:50,240 --> 08:16:55,120
health and energy and then as always i want to set


6328
08:16:55,120 --> 08:16:59,840
self.health equal to health and self.energy


6329
08:16:59,840 --> 08:17:06,240
is going to be energy and now let me create an object from


6330
08:17:06,240 --> 08:17:13,760
this class and let's give it a health of 100 and energy


6331
08:17:13,760 --> 08:17:18,240
50. it doesn't really matter what values you put in here


6332
08:17:18,240 --> 08:17:24,398
so now i can print monster.health and we are getting a hundred


6333
08:17:24,398 --> 08:17:30,718
so this one works just as expected and now what we can do we can just get


6334
08:17:30,718 --> 08:17:36,360
monster.health and add let's say 20 to it and if i now print


6335
08:17:36,360 --> 08:17:44,798
monster.health again we're getting 120 ie the sum of 120.


6336
08:17:44,798 --> 08:17:50,878
and what is even more powerful let me uncomment this function up here


6337
08:17:50,878 --> 08:17:55,760
and now instead of the health i want to get my monster.health and update the


6338
08:17:55,760 --> 08:17:59,440
amount and this would still work if you are


6339
08:17:59,440 --> 08:18:03,440
using an object so let me get rid of these two lines


6340
08:18:03,440 --> 08:18:07,440
here and instead call the function update health


6341
08:18:07,440 --> 08:18:11,360
and let's say i want to raise this by 20 again


6342
08:18:11,360 --> 08:18:19,920
and now if i print monster.health after calling this function i get 120


6343
08:18:19,920 --> 08:18:25,040
meaning even inside of the local scope of a function


6344
08:18:25,040 --> 08:18:30,000
you can still update anything inside of an object but the simple reason that


6345
08:18:30,000 --> 08:18:35,600
here python is very clear about what kind of object you are talking about


6346
08:18:35,600 --> 08:18:40,638
this monster is not going to become a variable in the local scope


6347
08:18:40,638 --> 08:18:44,878
and this monster could be updated anywhere it could be in the global scope


6348
08:18:44,878 --> 08:18:47,920
it could be the local scope of a function it could be in the scope of


6349
08:18:47,920 --> 08:18:53,760
another method it could even be inside of the object itself so this monster


6350
08:18:53,760 --> 08:19:00,080
python just doesn't care which makes it really easy to work with


6351
08:19:00,080 --> 08:19:05,040
so i guess one thing you do see fairly often is inside of a


6352
08:19:05,040 --> 08:19:10,398
class you have something like let's call this one update


6353
08:19:10,398 --> 08:19:14,318
energy and then here we need self and let's add


6354
08:19:14,318 --> 08:19:20,878
an amount in here as well and all i really have to do to update


6355
08:19:20,878 --> 08:19:24,398
this self.energy would be


6356
08:19:24,398 --> 08:19:30,878
to first target the attribute itself so self dot energy and then plus equal


6357
08:19:30,878 --> 08:19:33,280
amount


6358
08:19:33,520 --> 08:19:39,520
and now i could just run monster dot update energy pass in anything i want in


6359
08:19:39,520 --> 08:19:42,920
here and then print


6360
08:19:42,920 --> 08:19:47,840
monster.energy and we are getting 70.


6361
08:19:47,840 --> 08:19:53,600
and again here this is a very easy way to work with scope you don't have to


6362
08:19:53,600 --> 08:19:58,000
worry about return statements you don't have to worry about global all you do is


6363
08:19:58,000 --> 08:20:02,478
target the attribute and then you set it to a new value or update whatever you


6364
08:20:02,478 --> 08:20:06,878
want that's it it's super easy to work with


6365
08:20:06,878 --> 08:20:12,080
although if you wanted to you could use a return statement as well


6366
08:20:12,080 --> 08:20:17,280
for example if i wanted to set energy


6367
08:20:17,280 --> 08:20:23,440
and then here i want self and energy and let's say for this one i want to


6368
08:20:23,440 --> 08:20:27,920
create a new local variable that i call new energy


6369
08:20:27,920 --> 08:20:33,040
and this is going to be energy times two and then i want to return


6370
08:20:33,040 --> 08:20:38,318
this new energy and now in my init method


6371
08:20:38,318 --> 08:20:43,760
instead of setting energy straight as the attribute i want to call self.set


6372
08:20:43,760 --> 08:20:49,280
energy and pass in the energy and now let me comment out this line


6373
08:20:49,280 --> 08:20:54,000
down here to update the energy and just get the energy now we're getting 100


6374
08:20:54,000 --> 08:20:58,798
which is this 50 here


6375
08:20:58,798 --> 08:21:05,200
this 50 we are passing inside of this energy here from that energy we are


6376
08:21:05,200 --> 08:21:09,760
passing it inside of another method inside of the monster class


6377
08:21:09,760 --> 08:21:12,558
and this method


6378
08:21:12,558 --> 08:21:17,520
is down here we are getting one parameter and this we are doubling and


6379
08:21:17,520 --> 08:21:23,360
assigning it to new local variable inside of this method


6380
08:21:23,360 --> 08:21:28,878
and after that we are returning the new energy and this new energy is going to


6381
08:21:28,878 --> 08:21:32,638
become the attribute self.energy


6382
08:21:32,638 --> 08:21:36,798
kind of a roundabout way of doing it but it is possible to do


6383
08:21:36,798 --> 08:21:40,240
all i really want you to understand is that you can still use return and


6384
08:21:40,240 --> 08:21:45,200
parameters just like with any other function although most of the time you


6385
08:21:45,200 --> 08:21:49,680
don't really need it a better way for this one


6386
08:21:49,680 --> 08:21:51,840
would be to


6387
08:21:51,840 --> 08:21:57,840
remove this part entirely just call set energy and then


6388
08:21:57,840 --> 08:22:03,840
self dot energy is going to be new energy this would work in exactly the


6389
08:22:03,840 --> 08:22:08,080
same way although it is much cleaner to read so if we run this we are still


6390
08:22:08,080 --> 08:22:13,280
getting a hundred and i hope you understand why self is really really


6391
08:22:13,280 --> 08:22:16,878
powerful it essentially bypasses all of the scope


6392
08:22:16,878 --> 08:22:21,520
issues very efficiently all right let me get rid of all of this because i don't


6393
08:22:21,520 --> 08:22:26,318
really care about it and instead i want to set self.energy


6394
08:22:26,318 --> 08:22:31,440
back to energy all right now with that let's do an


6395
08:22:31,440 --> 08:22:36,000
exercise to practice this and what i want you guys to do first of


6396
08:22:36,000 --> 08:22:38,478
all create a hero


6397
08:22:38,478 --> 08:22:42,558
class with two parameters


6398
08:22:42,558 --> 08:22:46,558
one is damage and the second one is a monster


6399
08:22:46,558 --> 08:22:51,120
which is going to be this object here so this object you want


6400
08:22:51,120 --> 08:22:55,360
to pass into another class as an argument


6401
08:22:55,360 --> 08:23:00,798
and second of all the monster class


6402
08:23:00,798 --> 08:23:09,280
should have a method that lowers the health and i guess you can call it get


6403
08:23:09,280 --> 08:23:13,120
damage and this one should take an amount


6404
08:23:13,120 --> 08:23:17,360
and then this amount you would reduce from the health of the monster


6405
08:23:17,360 --> 08:23:23,120
and finally the hero class should have an


6406
08:23:23,120 --> 08:23:28,398
attack method that calls the get


6407
08:23:28,398 --> 08:23:32,878
damage method from the monster


6408
08:23:32,878 --> 08:23:38,080
and let me put this on a second line and the amount of damage


6409
08:23:38,080 --> 08:23:43,040
is hero dot damage which is going to be the damage you


6410
08:23:43,040 --> 08:23:47,040
specified up here which should be an attribute


6411
08:23:47,040 --> 08:23:51,040
so i hope all of this makes sense try to implement this yourself and see how far


6412
08:23:51,040 --> 08:23:53,440
you get


6413
08:23:53,840 --> 08:23:59,200
all right let's try together now first of all i want to create a new class and


6414
08:23:59,200 --> 08:24:05,520
this is going to be and the hero needs a dunder init method


6415
08:24:05,520 --> 08:24:11,360
and here we need self and besides that i want damage and i want a monster


6416
08:24:11,360 --> 08:24:14,718
and let me add a bit more white space there we go


6417
08:24:14,718 --> 08:24:20,958
now i want self.damage to be damaged and i want self.monster


6418
08:24:20,958 --> 08:24:24,478
to be monster and let me spell this correctly there we


6419
08:24:24,478 --> 08:24:29,040
go and this would then be step number one


6420
08:24:29,040 --> 08:24:34,718
and for step number two let me move it up a bit so it's easier to see what's


6421
08:24:34,718 --> 08:24:39,280
going on the monster class should have a method


6422
08:24:39,280 --> 08:24:42,958
that lowers the health and this i want to call get damage


6423
08:24:42,958 --> 08:24:46,958
so define get underscore damage


6424
08:24:46,958 --> 08:24:50,558
and then here i need self and i need the amount


6425
08:24:50,558 --> 08:24:55,600
and all i really want to do in here is self dot health minus equal


6426
08:24:55,600 --> 08:25:02,558
whatever amount we specify and this get damage i want to call from inside of the


6427
08:25:02,558 --> 08:25:08,878
hero and this brings us to step number three


6428
08:25:08,878 --> 08:25:13,200
and this right now we are still inside of the


6429
08:25:13,200 --> 08:25:17,360
hero class which you can see by the indentation


6430
08:25:17,360 --> 08:25:21,200
i probably should have actually mentioned that for the class we always


6431
08:25:21,200 --> 08:25:24,240
define something by one level of indentation


6432
08:25:24,240 --> 08:25:30,478
a in here i want to now create let's call it an attack method


6433
08:25:30,478 --> 08:25:35,920
and this one itself and nothing else and all i really want to do in here is


6434
08:25:35,920 --> 08:25:41,520
get myself dot monster and this self.monster is the monster we


6435
08:25:41,520 --> 08:25:47,600
specified up here and on this monster we want to call get damage


6436
08:25:47,600 --> 08:25:53,200
and all we really have to do for that is call get underscored damage


6437
08:25:53,200 --> 08:25:58,160
and now we have to specify how much damage we want to cause to the monster


6438
08:25:58,160 --> 08:26:02,318
and for that i want to get the damage of the hero


6439
08:26:02,318 --> 08:26:09,440
and all we need for that is specify self dot damage and we are done


6440
08:26:09,440 --> 08:26:14,558
and if you just read through this i hope this really illustrates why this makes a


6441
08:26:14,558 --> 08:26:18,240
ton of sense it's basically a normal sentence we want


6442
08:26:18,240 --> 08:26:22,160
to get the monster we want to cause the monster some damage and the amount of


6443
08:26:22,160 --> 08:26:26,558
damage you want is self-dot damage so the damage of the hero


6444
08:26:26,558 --> 08:26:31,200
and now with that all we have to do is to actually create the object of the


6445
08:26:31,200 --> 08:26:34,638
hero meaning i want to create a hero object


6446
08:26:34,638 --> 08:26:39,120
and this is going to be hero and in here we need damage let's say


6447
08:26:39,120 --> 08:26:44,000
damage for the hero is 15 and then we need a monster


6448
08:26:44,000 --> 08:26:49,120
and the monster is going to be the monster object we created just a


6449
08:26:49,120 --> 08:26:54,318
second ago this one here and this we're just passing in here


6450
08:26:54,318 --> 08:26:59,160
and now let me print monster.health


6451
08:26:59,360 --> 08:27:02,398
and if i run this we are getting a hundred


6452
08:27:02,398 --> 08:27:08,240
which is this 100 here but now


6453
08:27:08,240 --> 08:27:11,920
if i call hero dot attack


6454
08:27:11,920 --> 08:27:16,398
and this one doesn't need any arguments and afterwards i can print


6455
08:27:16,398 --> 08:27:18,878
monster.health again


6456
08:27:18,878 --> 08:27:26,958
and now if i run this we get 85 which is 100 minus 15. this is how this


6457
08:27:26,958 --> 08:27:31,200
85 comes about and to get to this point to lower the


6458
08:27:31,200 --> 08:27:36,878
health of the monster we just had to call one method and that's it


6459
08:27:36,878 --> 08:27:41,040
all we are really doing in here is we are passing different objects around and


6460
08:27:41,040 --> 08:27:44,958
make them interact with each other and since we don't really have to worry


6461
08:27:44,958 --> 08:27:48,638
about scope this is very easy to implement


6462
08:27:48,638 --> 08:27:53,280
and again this is something you really want to practice on your own and try to


6463
08:27:53,280 --> 08:27:56,478
work on this more to make sure you understand it


6464
08:27:56,478 --> 08:28:00,638
but right with that we have covered scope and i guess for the next part


6465
08:28:00,638 --> 08:28:04,318
let's talk about inheritance


6466
08:28:05,360 --> 08:28:09,760
and inheritance really just means that one class gets the attributes and


6467
08:28:09,760 --> 08:28:13,520
methods from another class or multiple classes


6468
08:28:13,520 --> 08:28:18,798
and i have already shown an example earlier and that was we are the monster


6469
08:28:18,798 --> 08:28:23,440
that we have already seen multiple times with health and energy


6470
08:28:23,440 --> 08:28:27,120
and this right now is called a parent class


6471
08:28:27,120 --> 08:28:31,280
and the reason why it is called the parent class is because there's a child


6472
08:28:31,280 --> 08:28:36,878
class and this one was the shark and this shark by itself only has a


6473
08:28:36,878 --> 08:28:42,160
speed and a byte method and what i want to happen is that the


6474
08:28:42,160 --> 08:28:46,398
health and the energy of the monster parent class


6475
08:28:46,398 --> 08:28:50,718
comes into the child class and the same for the method


6476
08:28:50,718 --> 08:28:56,558
so attack and move should also be available inside of the shark class


6477
08:28:56,558 --> 08:29:01,120
so that when i actually use this to create an object


6478
08:29:01,120 --> 08:29:05,760
the shark object has health energy and speed for the attributes and attack move


6479
08:29:05,760 --> 08:29:09,840
and bite meaning we are combining the monster and


6480
08:29:09,840 --> 08:29:15,040
the shark class to create the actual shark object


6481
08:29:15,040 --> 08:29:21,200
and the reason why we are doing this is this makes it very easy to reuse code


6482
08:29:21,200 --> 08:29:26,160
let's say this monster here could be the parent class to every monster in our


6483
08:29:26,160 --> 08:29:30,000
game and if we have this we never have to set


6484
08:29:30,000 --> 08:29:34,718
the attributes health for energy for any other monster they are always available


6485
08:29:34,718 --> 08:29:39,600
for every single class because they all inherit from this monster


6486
08:29:39,600 --> 08:29:43,680
and obviously this is still a very simple example in an actual game the


6487
08:29:43,680 --> 08:29:48,558
monster class might have a few hundred if not thousands of lines of code


6488
08:29:48,558 --> 08:29:53,520
and then it really makes sense to reuse code as much as we can


6489
08:29:53,520 --> 08:29:59,440
because then we don't have to create new classes all the time with all of these


6490
08:29:59,440 --> 08:30:02,638
methods that we have to type over and over again


6491
08:30:02,638 --> 08:30:06,638
and then on top of that if we wanted to make changes to how things move in the


6492
08:30:06,638 --> 08:30:11,440
game so this method here if we didn't use inheritance and we want


6493
08:30:11,440 --> 08:30:15,760
to make change how things move in the game we would have to change possibly


6494
08:30:15,760 --> 08:30:20,798
hundreds of different move methods for every single monster but if we use


6495
08:30:20,798 --> 08:30:24,478
inheritance we don't have to if we change one move method we are changing


6496
08:30:24,478 --> 08:30:30,558
how every monster in the game moves so i hope that makes sense


6497
08:30:30,558 --> 08:30:34,798
and one important concept here is that the class can inherit from an unlimited


6498
08:30:34,798 --> 08:30:39,600
number of other classes this could look like this


6499
08:30:39,600 --> 08:30:45,520
in here we could have a parent class 1 a parent class 2 and a parent class 3


6500
08:30:45,520 --> 08:30:50,958
and then the child class would have the attributes and methods of all of these


6501
08:30:50,958 --> 08:30:54,878
parent classes and you can also turn this around where


6502
08:30:54,878 --> 08:30:58,558
you have a parent class and this parent class is being inherited from by an


6503
08:30:58,558 --> 08:31:03,600
unlimited number of other classes and this would look something like this


6504
08:31:03,600 --> 08:31:08,798
you have one parent class and you have one child class a second


6505
08:31:08,798 --> 08:31:15,040
child class and a third child class and all three of those would have


6506
08:31:15,040 --> 08:31:20,000
the methods and attributes of the parent class


6507
08:31:20,000 --> 08:31:24,478
and this here for example could be the monster class


6508
08:31:24,478 --> 08:31:30,638
and then this one here maybe the shark class and let's say this one here


6509
08:31:30,638 --> 08:31:35,040
could be i don't know like a bird class or something


6510
08:31:35,040 --> 08:31:39,360
now there's one thing you do want to be aware of though and that is that


6511
08:31:39,360 --> 08:31:43,120
inheritance can get very very complex


6512
08:31:43,120 --> 08:31:48,318
up to a point where it really doesn't become fun to work with them


6513
08:31:48,318 --> 08:31:52,000
and this is also the part where beginners really start to struggle


6514
08:31:52,000 --> 08:31:56,160
because well i'm going to show you an example later on but this can get very


6515
08:31:56,160 --> 08:31:58,958
very complex and really hard to work with


6516
08:31:58,958 --> 08:32:04,000
fortunately this is fairly rare most of the time you just need simple


6517
08:32:04,000 --> 08:32:07,440
inheritance and this one is really easy to implement


6518
08:32:07,440 --> 08:32:12,318
and this one might be something like this the example we have already seen


6519
08:32:12,318 --> 08:32:16,878
and this one should be very easy to follow so for this section i just want


6520
08:32:16,878 --> 08:32:22,798
to focus on implementing this part here and i guess let's actually implement


6521
08:32:22,798 --> 08:32:26,718
this one in code and let's see how this is going to look like


6522
08:32:26,718 --> 08:32:33,280
alrighty so here once again we can see our monster class and from this monster


6523
08:32:33,280 --> 08:32:36,398
class i want to get


6524
08:32:36,398 --> 08:32:41,600
a shark class and this one should get the health the


6525
08:32:41,600 --> 08:32:46,798
energy the attack method and the move method of this monster class we want to


6526
08:32:46,798 --> 08:32:51,200
put all of this inside of the shark now


6527
08:32:51,200 --> 08:32:56,558
passing in the methods is very simple but the health and the energy are going


6528
08:32:56,558 --> 08:33:02,318
to be a bit more complicated so for now let me simplify things a tiny bit by


6529
08:33:02,318 --> 08:33:06,000
commenting out the dander init method and instead


6530
08:33:06,000 --> 08:33:10,080
setting health to something constant let's say 50


6531
08:33:10,080 --> 08:33:16,000
and energy to 100. the reason being that init is a bit more


6532
08:33:16,000 --> 08:33:20,398
complicated for inheritance so i'm going to ignore this part for now just to keep


6533
08:33:20,398 --> 08:33:24,318
things simple but we will implement this in just a bit


6534
08:33:24,318 --> 08:33:30,080
all right now for this shark i want to create an


6535
08:33:30,080 --> 08:33:34,160
init method by itself and this one needs self


6536
08:33:34,160 --> 08:33:40,520
and in here i want to set this speed and now what i want to do is


6537
08:33:40,520 --> 08:33:45,200
self.speed is going to be speed


6538
08:33:45,200 --> 08:33:48,878
and this way we are getting our attribute and besides that i also want


6539
08:33:48,878 --> 08:33:55,360
one method and that method i have called byte and in here we just need self and


6540
08:33:55,360 --> 08:33:58,958
let me print the shark


6541
08:33:58,958 --> 08:34:03,200
has bitten or whatever you want to put in here


6542
08:34:03,200 --> 08:34:07,600
and this by itself would be a functioning class but also a very


6543
08:34:07,600 --> 08:34:12,160
limited class because it only has a single attribute and one method it


6544
08:34:12,160 --> 08:34:16,798
doesn't really do all that much so how can i get all of the monster


6545
08:34:16,798 --> 08:34:20,080
attributes and methods inside of the shark


6546
08:34:20,080 --> 08:34:23,760
and to get inheritance what we have to do is


6547
08:34:23,760 --> 08:34:28,240
add brackets after the shark or the name of the shark class


6548
08:34:28,240 --> 08:34:33,120
and then here we have to pass in what class we want to inherit from in my


6549
08:34:33,120 --> 08:34:39,680
case this is monster and for start this is all you need


6550
08:34:39,680 --> 08:34:45,040
meaning now i can create my shark by calling shark


6551
08:34:45,040 --> 08:34:50,160
and i have to pass in a speed for the shark and let me just say i don't know


6552
08:34:50,160 --> 08:34:56,160
120. and now if i print my shark


6553
08:34:56,160 --> 08:35:01,680
all of this works just fine and we are getting an object but what i can do now


6554
08:35:01,680 --> 08:35:07,120
is get my shark dot health and this is the 50 we have set all the


6555
08:35:07,120 --> 08:35:12,638
way at the top here i can also get my shark speed


6556
08:35:12,638 --> 08:35:16,638
this is the 120 we set for the shark in here


6557
08:35:16,638 --> 08:35:21,920
and besides that i can also call shark dot byte


6558
08:35:21,920 --> 08:35:27,200
we get the shark as bitten and besides that i can also set shark dot


6559
08:35:27,200 --> 08:35:31,520
attack and this one needs an amount so let's say 20


6560
08:35:31,520 --> 08:35:37,600
and this is the attack method we have gotten from here so the parent class


6561
08:35:37,600 --> 08:35:42,318
and if i run this we get the monster has attacked


6562
08:35:42,318 --> 08:35:47,120
and well with that we already have super simple inheritance


6563
08:35:47,120 --> 08:35:53,520
just by adding this brackets monster we are getting all of these attributes and


6564
08:35:53,520 --> 08:35:58,240
these methods here so that's a pretty good start now


6565
08:35:58,240 --> 08:36:02,798
what you can also do let's say let me remove some white space here


6566
08:36:02,798 --> 08:36:08,558
let's say for the shark this move method here doesn't really work because for the


6567
08:36:08,558 --> 08:36:13,440
shark i want something else i want the shark to swim and for the speed i want


6568
08:36:13,440 --> 08:36:18,318
to set since i have a speed i want to use self.speed meaning i want to


6569
08:36:18,318 --> 08:36:21,760
overwrite this speed from the parent class


6570
08:36:21,760 --> 08:36:28,558
and to achieve that all you have to do is define a method with the same name in


6571
08:36:28,558 --> 08:36:33,280
the child class so in here i want self.move


6572
08:36:33,280 --> 08:36:37,040
and now i can add a print statement in here


6573
08:36:37,040 --> 08:36:43,280
the shark has moved and let's say print again


6574
08:36:43,280 --> 08:36:50,318
the speed of the shark is and then self.speed


6575
08:36:50,318 --> 08:36:57,600
and this should be an f string and now if i call shark dot move and we


6576
08:36:57,600 --> 08:37:01,440
don't need any arguments if i call this the shark has moved the speed of the


6577
08:37:01,440 --> 08:37:06,718
shark is 120. and what happens in here is we are first


6578
08:37:06,718 --> 08:37:13,280
getting the inheritance from the monster and then this move here is being


6579
08:37:13,280 --> 08:37:19,040
overwritten by this move here which means you can overwrite what you


6580
08:37:19,040 --> 08:37:23,600
get from the parent class very easily and this you could also do with


6581
08:37:23,600 --> 08:37:27,200
attributes although we actually have to talk about


6582
08:37:27,200 --> 08:37:31,840
attributes let's do it right now the problem we are facing right now


6583
08:37:31,840 --> 08:37:37,760
is that the monster has an init method let me remove this health and energy and


6584
08:37:37,760 --> 08:37:42,718
uncomment the init method essentially the problem we have right


6585
08:37:42,718 --> 08:37:49,680
now to give the monster the attributes this self.health and self.energy


6586
08:37:49,680 --> 08:37:53,840
we have to first call the init method


6587
08:37:53,840 --> 08:37:58,160
and if we don't call the init method we don't get these attributes so what we


6588
08:37:58,160 --> 08:38:04,160
have to figure out inside of the init method how to call the parent init


6589
08:38:04,160 --> 08:38:08,478
method so this would have to happen in here


6590
08:38:08,478 --> 08:38:13,440
and for that we have two ways one that is a bit outdated but still works and


6591
08:38:13,440 --> 08:38:18,160
one you actually want to use and let's cover both but you don't really need the


6592
08:38:18,160 --> 08:38:21,920
first one anymore but just in case you see it let's cover


6593
08:38:21,920 --> 08:38:27,200
it now what you can do you can call the parent class so monster


6594
08:38:27,200 --> 08:38:33,120
and then call the dunder init method and now in here


6595
08:38:33,120 --> 08:38:38,160
you have to pass all of the arguments so these ones here that you want for the


6596
08:38:38,160 --> 08:38:42,080
parent class so we need self health and energy


6597
08:38:42,080 --> 08:38:47,600
and these we have to get from arguments so when i initiate the shark besides


6598
08:38:47,600 --> 08:38:54,638
speed i also want to get health for the shark and energy for the shark


6599
08:38:54,638 --> 08:38:58,558
meaning when i actually create the object of the shark


6600
08:38:58,558 --> 08:39:02,638
besides speed i want to set health to 100


6601
08:39:02,638 --> 08:39:08,240
and energy to 80. now what i get let's go over this


6602
08:39:08,240 --> 08:39:13,200
actually the first step happens down here


6603
08:39:13,200 --> 08:39:17,920
i am calling the shark class and i'm passing in three arguments


6604
08:39:17,920 --> 08:39:23,120
i have the speed i have the health and i have the energy


6605
08:39:23,120 --> 08:39:27,760
and these three arguments are being covered in speed


6606
08:39:27,760 --> 08:39:33,600
health and energy and inside of this init method we are


6607
08:39:33,600 --> 08:39:39,440
calling the parent init method and into this init method we have to


6608
08:39:39,440 --> 08:39:42,240
pass in three arguments self


6609
08:39:42,240 --> 08:39:47,840
health and energy and self originally for the parent class


6610
08:39:47,840 --> 08:39:53,200
was the class itself so this self here which refers to this monster


6611
08:39:53,200 --> 08:39:59,440
however now the self is going to refer to this self here which is the shark


6612
08:39:59,440 --> 08:40:04,160
meaning when we are setting self.health and self.energy we don't talk about the


6613
08:40:04,160 --> 08:40:08,638
monster we are talking about the shark class


6614
08:40:08,638 --> 08:40:11,360
and this is why the self here is important


6615
08:40:11,360 --> 08:40:15,920
and then besides the self we also need health and energy and these are just


6616
08:40:15,920 --> 08:40:20,718
going to be arguments we have to pass in here so this health and this energy


6617
08:40:20,718 --> 08:40:25,200
and these two we get from these two parameters here which is health and


6618
08:40:25,200 --> 08:40:28,798
energy and those are being passed in here


6619
08:40:28,798 --> 08:40:35,040
and with the left to move method i don't care about this one instead let me print


6620
08:40:35,040 --> 08:40:40,718
shark dot let's start with speed let's actually print all of them so


6621
08:40:40,718 --> 08:40:49,200
besides speed i want health and i want energy if i run this we get 120 180


6622
08:40:49,200 --> 08:40:53,120
the numbers we have specified here and


6623
08:40:53,120 --> 08:40:59,440
well this can get a bit complicated but look at the init method here and the


6624
08:40:59,440 --> 08:41:02,000
init method here and


6625
08:41:02,000 --> 08:41:05,120
if you didn't understand what i talked about in the last part practice this


6626
08:41:05,120 --> 08:41:08,798
yourself and then go over this a couple of times


6627
08:41:08,798 --> 08:41:12,718
if you get used to this it's eventually going to become fairly easy although i


6628
08:41:12,718 --> 08:41:15,920
suppose in the beginning this can be a bit overwhelming


6629
08:41:15,920 --> 08:41:19,520
the one really important thing you have to understand is that we are calling the


6630
08:41:19,520 --> 08:41:24,240
init method and we are passing in the arguments that we want to set in this


6631
08:41:24,240 --> 08:41:29,760
case speed health and energy and then inside of this init method we


6632
08:41:29,760 --> 08:41:33,280
are right now calling the parent init method


6633
08:41:33,280 --> 08:41:37,520
and then passing health and energy so these two


6634
08:41:37,520 --> 08:41:42,240
in there as arguments so for example we first set the health


6635
08:41:42,240 --> 08:41:47,360
here when we are creating the object this health goes into this health for


6636
08:41:47,360 --> 08:41:51,280
the parameter and then this parameter goes into


6637
08:41:51,280 --> 08:41:55,360
the init method of the parent and then the init method


6638
08:41:55,360 --> 08:42:01,280
sets self.health or the actual class


6639
08:42:01,280 --> 08:42:06,958
and that way you can connect the init methods of different classes now this is


6640
08:42:06,958 --> 08:42:11,280
how python used to work and this still works but there are some downsides to


6641
08:42:11,280 --> 08:42:15,200
using it this way so this isn't really used anymore


6642
08:42:15,200 --> 08:42:20,160
instead what we use is called super and this is a function


6643
08:42:20,160 --> 08:42:24,958
and this super all it really does is it gets the parent class


6644
08:42:24,958 --> 08:42:30,638
so if we have that we can just call the init method on it as well


6645
08:42:30,638 --> 08:42:36,558
and in here we don't need self all we have to do is pass in health and energy


6646
08:42:36,558 --> 08:42:42,478
and then we are done if i run this now we are getting the very same outcome


6647
08:42:42,478 --> 08:42:47,360
meaning those two approaches here are functionally identical at least up to


6648
08:42:47,360 --> 08:42:50,638
this point when we get to multiple inheritance or


6649
08:42:50,638 --> 08:42:55,600
let's say more complex inheritance super is the much better method


6650
08:42:55,600 --> 08:42:59,520
and this is why we don't use this initial approach anymore and i guess


6651
08:42:59,520 --> 08:43:04,398
this one is also a bit easier to read it kinda is up to you but this is the one


6652
08:43:04,398 --> 08:43:09,360
you do want to use and super you can actually use for a lot


6653
08:43:09,360 --> 08:43:12,398
of other things as well for example


6654
08:43:12,398 --> 08:43:17,600
i could call super and then call the move method of the


6655
08:43:17,600 --> 08:43:21,600
parent and in here i have to pass in a speed let's say 10


6656
08:43:21,600 --> 08:43:26,878
so now when i run the code i get the monster has moved at a speed


6657
08:43:26,878 --> 08:43:30,240
of 10 meaning when we are calling the init


6658
08:43:30,240 --> 08:43:35,920
method of the shark class we are also calling the move method of the parent


6659
08:43:35,920 --> 08:43:40,000
and this way even if you overwrite a method from the parent class you can


6660
08:43:40,000 --> 08:43:43,600
still call it with super if you really want to


6661
08:43:43,600 --> 08:43:47,600
which adds even more flexibility to all of this


6662
08:43:47,600 --> 08:43:52,000
and this is simple inheritance


6663
08:43:52,000 --> 08:43:56,240
which is something you definitely want to practice this is the one kind of


6664
08:43:56,240 --> 08:44:01,680
inheritance you are going to use fairly often and the one you have to understand


6665
08:44:01,680 --> 08:44:05,760
let's practice this one and let me add comments one more time


6666
08:44:05,760 --> 08:44:11,920
let's do an exercise i want you guys to create a scorpion


6667
08:44:11,920 --> 08:44:16,080
class that inherits from the monster


6668
08:44:16,318 --> 08:44:22,240
and it should get health and energy from the parent


6669
08:44:22,240 --> 08:44:27,040
and then besides that there should also be a poison


6670
08:44:27,040 --> 08:44:32,558
damage attribute and i want you guys to overwrite


6671
08:44:32,558 --> 08:44:39,680
the damage method to show poison


6672
08:44:39,680 --> 08:44:43,600
damage kinda like what we have done for the


6673
08:44:43,600 --> 08:44:49,200
move method for the shark pause the video now and try to implement


6674
08:44:49,200 --> 08:44:53,120
this one yourself and see how far you get


6675
08:44:54,478 --> 08:45:00,000
i want to start by creating a class called scorpion that is not used for


6676
08:45:00,000 --> 08:45:05,440
scorpion there we go and this one should inherit from monster


6677
08:45:05,440 --> 08:45:10,318
and now in here i want to create a dunder init


6678
08:45:10,318 --> 08:45:16,240
method and this one itself and besides that i want poison


6679
08:45:16,240 --> 08:45:20,240
dammit and now inside of the scorpion i want to


6680
08:45:20,240 --> 08:45:25,520
set self poison damage as poison damage so we are getting an


6681
08:45:25,520 --> 08:45:29,520
attribute and then besides that


6682
08:45:29,520 --> 08:45:35,280
i want to define or well overwrite the attack method


6683
08:45:35,280 --> 08:45:40,240
let me minimize the shark class so we can see the code a bit easier and i want


6684
08:45:40,240 --> 08:45:45,840
to overwrite this attack method here and in my guess what i want i just want


6685
08:45:45,840 --> 08:45:48,958
self because i already have the poison damage


6686
08:45:48,958 --> 08:45:53,798
and all i want to do in here is print the


6687
08:45:53,798 --> 08:45:58,478
scorpion has attacked and


6688
08:45:58,478 --> 08:46:02,000
print it has


6689
08:46:02,000 --> 08:46:07,280
dealt and then we want self dot poison damage


6690
08:46:07,280 --> 08:46:13,760
and poison damage and this should be an f string


6691
08:46:13,760 --> 08:46:16,958
all right so far this should have been fairly easy


6692
08:46:16,958 --> 08:46:22,638
what i can do now let me delete all of this and let's delete a shark as well we


6693
08:46:22,638 --> 08:46:27,120
don't need him for now and what i want to do is to create an


6694
08:46:27,120 --> 08:46:33,120
instance or an object from my scorpion i am really bad at typing scorpion


6695
08:46:33,120 --> 08:46:38,318
and here i bought my scorpion and right now we have a poison damage i don't know


6696
08:46:38,318 --> 08:46:44,478
of 50. and now if i type scorpion.attack


6697
08:46:44,478 --> 08:46:48,638
this is working the scorpion has attacked it has dealt 50 poison damage


6698
08:46:48,638 --> 08:46:54,080
this shouldn't have an underscore there we go it has dealt


6699
08:46:54,080 --> 08:46:59,840
50 poison damage this looks much better meaning what we have so far we have a


6700
08:46:59,840 --> 08:47:05,040
scorpion with poison damage and we have overwritten the attack method


6701
08:47:05,040 --> 08:47:09,680
and since we are inheriting from monster we're also getting this move method here


6702
08:47:09,680 --> 08:47:16,318
meaning my scorpion can also move at a certain speed let's say 5 if i run this


6703
08:47:16,318 --> 08:47:21,200
and let's make this a bit larger we have the attack method for the


6704
08:47:21,200 --> 08:47:27,680
scorpion and we have the move method but what we don't have let me get rid of


6705
08:47:27,680 --> 08:47:31,318
those two we don't have


6706
08:47:31,318 --> 08:47:37,040
scorpion.health for example this attribute doesn't exist right now


6707
08:47:37,040 --> 08:47:39,280
because monster


6708
08:47:39,280 --> 08:47:44,398
only gets these two attributes once we're running the init method


6709
08:47:44,398 --> 08:47:48,558
so what we have to do in the scorpion called the init method of the parent


6710
08:47:48,558 --> 08:47:52,878
class which we get with super and then dunder


6711
08:47:52,878 --> 08:47:58,160
init in here and if i scroll up


6712
08:47:58,160 --> 08:48:05,200
the monster class for the init method needs two arguments health and energy


6713
08:48:05,200 --> 08:48:09,520
so let me comment those two and in the united method i want to pass in health


6714
08:48:09,520 --> 08:48:13,040
and energy now these numbers have to come from


6715
08:48:13,040 --> 08:48:16,958
somewhere although they don't necessarily have to


6716
08:48:16,958 --> 08:48:21,760
i could for example just set static numbers in here let's say 50 and 10.


6717
08:48:21,760 --> 08:48:28,160
if i run this now we get 50 for health because all we are doing here is calling


6718
08:48:28,160 --> 08:48:32,718
a function that is under init and we're just giving it different


6719
08:48:32,718 --> 08:48:35,280
arguments


6720
08:48:35,680 --> 08:48:40,478
although this lacks a lot of flexibility so i don't want to do it but we could if


6721
08:48:40,478 --> 08:48:44,160
we wanted to instead i want to get this health and


6722
08:48:44,160 --> 08:48:48,318
this energy from the init method of the scorpion


6723
08:48:48,318 --> 08:48:51,520
class and in here just to be specific about


6724
08:48:51,520 --> 08:48:56,318
what we are doing let me name this scorpion health


6725
08:48:56,318 --> 08:49:00,878
and scorpion energy and somehow my brain always wants


6726
08:49:00,878 --> 08:49:04,718
to add a tea to scorpion i have no idea why


6727
08:49:04,718 --> 08:49:10,718
and now when i call the init method for the monster my health should be my


6728
08:49:10,718 --> 08:49:16,558
scorpion health and my energy should be my scorpion energy


6729
08:49:16,558 --> 08:49:21,600
when i am creating the actual object i want to have let me use named


6730
08:49:21,600 --> 08:49:26,718
arguments that makes it a bit easier to read my poison damage should be 50


6731
08:49:26,718 --> 08:49:34,240
my scorpion health should be 20 and my scorpion energy


6732
08:49:34,240 --> 08:49:39,680
should be 10. and now if i run this we get 20 for the


6733
08:49:39,680 --> 08:49:45,360
health of the scorpion because remember we are only calling scorpion health the


6734
08:49:45,360 --> 08:49:49,200
parameter so this is scorpion health here we don't actually set this


6735
08:49:49,200 --> 08:49:52,638
parameter as an attribute instead what we do


6736
08:49:52,638 --> 08:49:57,360
we are using the health attribute of the parent class and this gets the value of


6737
08:49:57,360 --> 08:50:00,958
the scorpion health so our scorpion doesn't have scorpion


6738
08:50:00,958 --> 08:50:04,160
health as an attribute it just has health


6739
08:50:04,160 --> 08:50:11,120
and along those lines we also have energy if i run this we get 10.


6740
08:50:11,120 --> 08:50:15,520
and i hope this starts to make a bit more sense this is definitely something


6741
08:50:15,520 --> 08:50:19,920
you want to practice if you only partially followed along this is a


6742
08:50:19,920 --> 08:50:24,798
really important concept to understand and definitely something you are going


6743
08:50:24,798 --> 08:50:29,120
to see all the time and this you can actually make quite a


6744
08:50:29,120 --> 08:50:35,120
bit more complex with well more complex inheritance so let's talk about that one


6745
08:50:35,120 --> 08:50:40,318
and basically what that means so far we always had one parent class and then a


6746
08:50:40,318 --> 08:50:44,478
child class so a pretty immediate connection


6747
08:50:44,478 --> 08:50:48,638
something slightly more complex is you have a child class and two parent


6748
08:50:48,638 --> 08:50:51,760
classes this is something we are going to build


6749
08:50:51,760 --> 08:50:56,080
in this section but if you really wanted to you could do


6750
08:50:56,080 --> 08:50:59,920
something like this and it would still work


6751
08:50:59,920 --> 08:51:04,000
now maintaining something like this is going to be a ton of work


6752
08:51:04,000 --> 08:51:09,280
although once you have it this child class is incredibly powerful because it


6753
08:51:09,280 --> 08:51:12,318
gets information from a lot of parent classes


6754
08:51:12,318 --> 08:51:16,080
so especially if you create something really large this is something you do


6755
08:51:16,080 --> 08:51:20,638
want to be able to understand but for now especially if you're a beginner and


6756
08:51:20,638 --> 08:51:24,000
this is the first time you've really engaged with objects


6757
08:51:24,000 --> 08:51:28,718
i wouldn't recommend to worry about this too much because it gets overwhelming


6758
08:51:28,718 --> 08:51:33,120
very fast instead make sure to understand this


6759
08:51:33,120 --> 08:51:37,120
scheme if you understand that one you should be able to follow along with this


6760
08:51:37,120 --> 08:51:42,558
one as well but for now just practice objects in the first place and once you


6761
08:51:42,558 --> 08:51:47,840
have a better grasp of objects engage in this one so let's talk about how we


6762
08:51:47,840 --> 08:51:52,558
could create something like this and this i think is best done in actual


6763
08:51:52,558 --> 08:51:55,920
code so let's have a look how we can work with this


6764
08:51:55,920 --> 08:52:02,798
now here i have some code already i have the monster class we have seen


6765
08:52:02,798 --> 08:52:07,920
quite often by now this one i hope is familiar at this point besides that i


6766
08:52:07,920 --> 08:52:14,000
also have a fish class now and this one is a very simple class all we have is an


6767
08:52:14,000 --> 08:52:18,558
init method and this one sets a speed and has scales


6768
08:52:18,558 --> 08:52:23,040
and besides that we have a swim method and this one just prints swimming at the


6769
08:52:23,040 --> 08:52:27,040
speed of whatever the speed of the object is going to be


6770
08:52:27,040 --> 08:52:32,558
and what i want to do i want to create my shark again


6771
08:52:32,558 --> 08:52:37,760
but this time the shark is not just going to be inheriting from monster it


6772
08:52:37,760 --> 08:52:42,878
is also going to be inheriting from fish so the first thing for multiple or


6773
08:52:42,878 --> 08:52:45,600
complex inheritance is that


6774
08:52:45,600 --> 08:52:50,638
all the objects you want to inherit from should be here in the brackets after the


6775
08:52:50,638 --> 08:52:55,760
name of the class and in here you could add as many other classes you want


6776
08:52:55,760 --> 08:53:03,360
there could be class 3 class 4 class 5 as many as you want there isn't really a


6777
08:53:03,360 --> 08:53:06,958
limit and now inside of this shark i want to


6778
08:53:06,958 --> 08:53:12,718
set a dunder init method and in here we always need self this one


6779
08:53:12,718 --> 08:53:16,958
should make sense by now and besides that for the shark let's say


6780
08:53:16,958 --> 08:53:21,120
i want to set a byte strength and then


6781
08:53:21,120 --> 08:53:26,160
inside of this init method i want to self dot byte strength is going to be


6782
08:53:26,160 --> 08:53:31,040
byte strength this one should still make sense it's quite straightforward


6783
08:53:31,040 --> 08:53:38,478
but the more complex one is if i now want to call super and then dunder init


6784
08:53:38,478 --> 08:53:44,000
now we have a problem because i have no idea what to put in here


6785
08:53:44,000 --> 08:53:49,360
and the question here is what arguments should go into this inhibit method


6786
08:53:49,360 --> 08:53:55,120
should i add the arguments for the monster class or for the fish class or


6787
08:53:55,120 --> 08:54:00,318
both how would this work and there are a couple of things you


6788
08:54:00,318 --> 08:54:06,080
have to understand to solve this problem the first one is called the mro or the


6789
08:54:06,080 --> 08:54:11,520
method resolution order and what this really means is


6790
08:54:11,520 --> 08:54:15,200
let me add a comment here mro or


6791
08:54:15,200 --> 08:54:18,478
method resolution


6792
08:54:18,478 --> 08:54:22,318
order what this basically means is in what


6793
08:54:22,318 --> 08:54:25,680
order the parent init methods are being called


6794
08:54:25,680 --> 08:54:31,760
and this you can get by just printing and i want to get the


6795
08:54:31,760 --> 08:54:38,000
shark class not the object the class itself and call mro on it and this is


6796
08:54:38,000 --> 08:54:42,398
still going to work and if i call this we are getting invalid syntax because


6797
08:54:42,398 --> 08:54:47,120
the question mark here is not something python likes so let me comment it out


6798
08:54:47,120 --> 08:54:53,840
for now and now let's run this again and now we can see the mro or the resolution


6799
08:54:53,840 --> 08:54:59,120
order and basically what it means is in what order python is going to go through


6800
08:54:59,120 --> 08:55:02,958
the classes we start with the shark itself this one


6801
08:55:02,958 --> 08:55:06,798
should make sense this is the class that we actually work in so this is where we


6802
08:55:06,798 --> 08:55:10,240
want to start next up we are looking at the monster


6803
08:55:10,240 --> 08:55:13,600
class then we look at the fish and finally we


6804
08:55:13,600 --> 08:55:18,398
look at a generic object and this generic object you don't have to worry


6805
08:55:18,398 --> 08:55:22,798
about because this is something inbuilt into python it's the thing that makes


6806
08:55:22,798 --> 08:55:26,240
all of the objects work you don't have to worry about it


6807
08:55:26,240 --> 08:55:30,398
so what we have to worry about is the shark the monster and the fish


6808
08:55:30,398 --> 08:55:36,240
and how this order comes about is from the order of these arguments here


6809
08:55:36,240 --> 08:55:41,120
and basically how this works is that the leftmost item monster in this case is


6810
08:55:41,120 --> 08:55:45,360
always going to be the first in line with the class itself being the very


6811
08:55:45,360 --> 08:55:51,040
first item so shark is going to be 0 monster s1 fish is 2 and then every


6812
08:55:51,040 --> 08:55:57,120
subsequent item is going to be next meaning what i could be doing is turn


6813
08:55:57,120 --> 08:56:01,760
these two around and call fish first and then monster if


6814
08:56:01,760 --> 08:56:06,958
i run this now we are still starting on our shark but now fish is the first item


6815
08:56:06,958 --> 08:56:12,160
of inheritance then we have monster and we still have object finally but in my


6816
08:56:12,160 --> 08:56:15,440
case i do want to keep monster as the first item


6817
08:56:15,440 --> 08:56:20,080
so the first thing you do have to understand is if we are calling the


6818
08:56:20,080 --> 08:56:25,040
super dunder init method we are looking at the first item inside


6819
08:56:25,040 --> 08:56:28,558
of these arguments here so in this case monster


6820
08:56:28,558 --> 08:56:33,120
meaning for now i can minimize the fish class and just look at the monster and


6821
08:56:33,120 --> 08:56:37,360
let me minimize these methods as well so it's a bit easier to see


6822
08:56:37,360 --> 08:56:43,360
and basically what i can do now let me comment out the mro and i actually want


6823
08:56:43,360 --> 08:56:50,398
to create a shark object from my shark and this is something you should be


6824
08:56:50,398 --> 08:56:54,798
familiar with from simple inheritance right now we only have the byte strength


6825
08:56:54,798 --> 08:56:59,760
so byte strength and this we can set to whatever we want let's say 50.


6826
08:56:59,760 --> 08:57:06,080
but now for this superintendent method i need the arguments for the init method


6827
08:57:06,080 --> 08:57:11,680
of the parent class in this case health and energy these two i want to pass in


6828
08:57:11,680 --> 08:57:15,920
here now for these two i again i am going to


6829
08:57:15,920 --> 08:57:21,280
need some numbers so for the init method of the shark class i also want health


6830
08:57:21,280 --> 08:57:25,840
and energy meaning when i create the object i also


6831
08:57:25,840 --> 08:57:30,318
want health and energy and let's set those to


6832
08:57:30,318 --> 08:57:37,680
i don't know 200 and energy could be 55 and with that we are essentially back to


6833
08:57:37,680 --> 08:57:42,478
simple inheritance i first call the class itself and the first one we do


6834
08:57:42,478 --> 08:57:46,160
after calling the class we are calling the init method


6835
08:57:46,160 --> 08:57:49,840
and inside of the init method python knows


6836
08:57:49,840 --> 08:57:54,318
that the first item of inheritance is the monster class


6837
08:57:54,318 --> 08:57:58,398
and then after that python knows we have one


6838
08:57:58,398 --> 08:58:03,120
parameter for byte strength and this we're just setting as a parameter and


6839
08:58:03,120 --> 08:58:07,840
then we are done with it so this is as far as this one goes


6840
08:58:07,840 --> 08:58:11,920
besides that we also have health and energy


6841
08:58:11,920 --> 08:58:16,798
and these two we want to pass into the init method of the first parent class so


6842
08:58:16,798 --> 08:58:21,440
the monster and those we are getting up here


6843
08:58:21,440 --> 08:58:29,840
but now we have another problem and that problem is what happens to the fish


6844
08:58:29,840 --> 08:58:33,840
let me run the code and let's see what happens


6845
08:58:33,840 --> 08:58:37,360
are not getting an error that's a pretty good sign


6846
08:58:37,360 --> 08:58:40,000
now if i run shark


6847
08:58:40,000 --> 08:58:44,240
and the methods we have here could for


6848
08:58:44,240 --> 08:58:48,958
example be attack and for attack we need an amount let's


6849
08:58:48,958 --> 08:58:52,878
say 10. the monster is attacked 10 damage was


6850
08:58:52,878 --> 08:58:57,280
stealth so this attack method works just fine


6851
08:58:57,280 --> 08:59:01,600
besides that i can also print shark.health


6852
08:59:01,600 --> 08:59:06,878
and let me print this this one is working 200


6853
08:59:06,878 --> 08:59:14,000
we also get shark dot energy with 55 and we are also getting the byte strength


6854
08:59:14,000 --> 08:59:18,318
so far we have the shark itself and the monster


6855
08:59:18,318 --> 08:59:23,120
what we don't have is the fish let me minimize the monster class and open the


6856
08:59:23,120 --> 08:59:27,200
fish in here we have speed and has scales


6857
08:59:27,200 --> 08:59:31,280
and this our class doesn't have right now


6858
08:59:31,280 --> 08:59:35,600
so if i type shark and speed


6859
08:59:35,600 --> 08:59:42,080
and run the code we are getting that the shark object has no attribute speed


6860
08:59:42,080 --> 08:59:48,638
which means that the inheritance from the fish is not working right now


6861
08:59:48,638 --> 08:59:53,600
and let me reopen the monster and hide the monster methods so we can see all of


6862
08:59:53,600 --> 08:59:58,638
the classes quite easily basically what is happening


6863
08:59:58,638 --> 09:00:03,840
the mro is important here again this one here


6864
09:00:03,840 --> 09:00:07,200
essentially how you have to think about it


6865
09:00:07,200 --> 09:00:13,120
we first of all call the shark and then we call the init method of the shark


6866
09:00:13,120 --> 09:00:17,840
and then python knows the first item of inheritance is the monster


6867
09:00:17,840 --> 09:00:23,760
and since we are calling super.init we are calling this init method up here


6868
09:00:23,760 --> 09:00:29,120
and passing the arguments in there the consequence is that we have health


6869
09:00:29,120 --> 09:00:33,120
and energy for the monster and the normal inheritance still works so we


6870
09:00:33,120 --> 09:00:38,240
also have attack and move but now the problem is that the init


6871
09:00:38,240 --> 09:00:42,318
method of the fish is never called


6872
09:00:42,318 --> 09:00:47,520
and as a consequence speed and has scales doesn't exist inside of the shark


6873
09:00:47,520 --> 09:00:53,280
and what we have to figure out is how to call this init method


6874
09:00:53,280 --> 09:00:57,760
and since we still have to worry about the mro we have to figure out how to


6875
09:00:57,760 --> 09:01:01,920
call this init method with the arguments


6876
09:01:01,920 --> 09:01:08,478
from inside of the init method of the monster


6877
09:01:08,478 --> 09:01:13,360
and for that purpose we are still going to need this super


6878
09:01:13,360 --> 09:01:16,318
and then the dunder init


6879
09:01:16,318 --> 09:01:21,440
method and this function is very smart because


6880
09:01:21,440 --> 09:01:26,558
it follows the inheritance that we have set by the shark to begin with


6881
09:01:26,558 --> 09:01:30,718
meaning if we call the monster from the shark it knows it has to look at the


6882
09:01:30,718 --> 09:01:34,798
fish next in line however if you call the monster by


6883
09:01:34,798 --> 09:01:39,440
itself this init method wouldn't really do anything so this is a very


6884
09:01:39,440 --> 09:01:43,840
intelligent function in the simplest terms basically what


6885
09:01:43,840 --> 09:01:48,638
this init method has to do is to set the speed and hash scales


6886
09:01:48,638 --> 09:01:52,240
of the other class which is the fish again


6887
09:01:52,240 --> 09:01:57,520
let me set some static numbers for the speed let's go with 75 and for scales


6888
09:01:57,520 --> 09:02:04,478
this should be false and now if i run all of this again


6889
09:02:04,478 --> 09:02:11,600
i get for speed let's try this again now for speed i get 75 and for hash scales


6890
09:02:11,600 --> 09:02:16,398
i get false the arguments we have set in here


6891
09:02:16,398 --> 09:02:21,280
and this is especially if you are starting with objects probably going to


6892
09:02:21,280 --> 09:02:26,080
be really confusing but the one thing that makes all of this work is the order


6893
09:02:26,080 --> 09:02:31,040
of the indent methods we are first calling this one here this is number one


6894
09:02:31,040 --> 09:02:36,638
then we are looking at the monster which is this one here this init method


6895
09:02:36,638 --> 09:02:41,600
is number two then and then finally we are looking at the second item in the


6896
09:02:41,600 --> 09:02:46,798
inheritance which is the fish this for shear so this init method is called


6897
09:02:46,798 --> 09:02:50,318
third and we always need


6898
09:02:50,318 --> 09:02:55,280
the super init method to go to the next item


6899
09:02:55,280 --> 09:02:58,558
and what we would want to add in here as well


6900
09:02:58,558 --> 09:03:04,878
is a super and then dander init method for the fish


6901
09:03:04,878 --> 09:03:09,200
as well so if there's going to be another item in the list of inheritance


6902
09:03:09,200 --> 09:03:13,440
or in the mro we would also call that one


6903
09:03:13,440 --> 09:03:19,360
and for that reason you very often see super init in most classes because it


6904
09:03:19,360 --> 09:03:23,440
enables inheritance to work across multiple classes


6905
09:03:23,440 --> 09:03:27,600
and well i hope you can still follow along this is getting quite complicated


6906
09:03:27,600 --> 09:03:32,398
and it is just going to get worse because right now we do have one problem


6907
09:03:32,398 --> 09:03:36,878
and that is that this speed here and the hair scales


6908
09:03:36,878 --> 09:03:41,440
are constant right now but i want to be able to set them


6909
09:03:41,440 --> 09:03:47,280
dynamically when i am creating the shark meaning what i want to do when i create


6910
09:03:47,280 --> 09:03:51,520
a shark i want to set this speed


6911
09:03:51,520 --> 09:03:58,318
let's set it to 120 and i want to set has scales to


6912
09:03:58,318 --> 09:04:01,440
false and this would then be all the stuff i


6913
09:04:01,440 --> 09:04:05,840
have for the shark and i think it makes sense to put all of this on separate


6914
09:04:05,840 --> 09:04:12,638
lines to make it a bit easier to read all right but now if i run this


6915
09:04:12,638 --> 09:04:19,120
we are getting an error that shark init got unexpected keyword argument speed


6916
09:04:19,120 --> 09:04:23,440
basically what pipeline is complaining about that this speed and this has


6917
09:04:23,440 --> 09:04:26,558
scales don't exist in the parameters for the


6918
09:04:26,558 --> 09:04:32,878
init method of the shark class we can fix that by adding a speed


6919
09:04:32,878 --> 09:04:38,240
and has scales in here if i run this now this is going to work


6920
09:04:38,240 --> 09:04:42,798
but we're not doing anything with either the speed or the hass scales we are


6921
09:04:42,798 --> 09:04:46,558
still up here setting the speed and has scales as


6922
09:04:46,558 --> 09:04:51,440
constant numbers and now we kind of have a problem


6923
09:04:51,440 --> 09:04:56,878
because if i try to in this superintendent method at this speed and


6924
09:04:56,878 --> 09:05:01,520
has scales then let me fix the typo first if i run


6925
09:05:01,520 --> 09:05:04,718
this now we are getting the other problem that


6926
09:05:04,718 --> 09:05:08,318
monster.init down here is the error we're getting


6927
09:05:08,318 --> 09:05:11,440
right now monster.init takes three positional


6928
09:05:11,440 --> 09:05:14,878
arguments but three were given meaning


6929
09:05:14,878 --> 09:05:21,120
python in the monster class wants three arguments self health and energy


6930
09:05:21,120 --> 09:05:25,200
and those we do get let minimize the fish for now so we can see what's going


6931
09:05:25,200 --> 09:05:28,878
on we are getting health and energy and


6932
09:05:28,878 --> 09:05:34,638
this is what this init method wants but besides that now we are also adding


6933
09:05:34,638 --> 09:05:41,520
speed and has scales and for this the init method doesn't have any parameters


6934
09:05:41,520 --> 09:05:46,558
so python is very unhappy because it gets too many arguments and it doesn't


6935
09:05:46,558 --> 09:05:51,120
know what to do with them but this is a problem for us


6936
09:05:51,120 --> 09:05:58,878
because we need those two arguments to pass into the init method for the fish


6937
09:05:58,878 --> 09:06:03,280
but the init method of the monster doesn't have as many parameters so we


6938
09:06:03,280 --> 09:06:08,878
have a problem here and to overcome this we need one special


6939
09:06:08,878 --> 09:06:13,598
concept and that in python is called keyword unpacking


6940
09:06:13,598 --> 09:06:18,398
and basically what it means is in my monster class


6941
09:06:18,398 --> 09:06:23,278
after i have added all of the parameters i definitely know i need


6942
09:06:23,278 --> 09:06:28,640
i want to add star star and then keyword arguments


6943
09:06:28,640 --> 09:06:35,918
and that way any argument i get after the parameters i am going to store those


6944
09:06:35,918 --> 09:06:40,398
in a separate dictionary let me actually print what we get so i


6945
09:06:40,398 --> 09:06:44,480
want to print my keyword arguments without the stars


6946
09:06:44,480 --> 09:06:48,078
for now and for these double stars python is


6947
09:06:48,078 --> 09:06:53,200
expecting keyword arguments so all of the arguments for the init method here


6948
09:06:53,200 --> 09:07:00,320
need to be keyword arguments meaning health.health energy is energy


6949
09:07:00,320 --> 09:07:07,360
speed is speed and has underscore scales is has scales


6950
09:07:07,360 --> 09:07:13,278
and now if i run this we are getting a dictionary with speed


6951
09:07:13,278 --> 09:07:18,480
and has scales and this faults here we are getting from


6952
09:07:18,480 --> 09:07:23,598
printing shark has scales let me remove that and try this again now


6953
09:07:23,598 --> 09:07:29,758
so now we can focus on just a dictionary and that is something really useful


6954
09:07:29,758 --> 09:07:36,320
because this we could use in here now and essentially what you have to do is


6955
09:07:36,320 --> 09:07:42,000
call the unpacking operator again and passing in the keyword arguments


6956
09:07:42,000 --> 09:07:47,680
and now if i run this again we are still getting the same dictionary


6957
09:07:47,680 --> 09:07:53,840
so we are getting speed and we're getting hash scales


6958
09:07:53,840 --> 09:07:58,480
what happens now if we are calling this star again


6959
09:07:58,480 --> 09:08:04,160
it turns each key value pair inside of this dictionary into a named argument


6960
09:08:04,160 --> 09:08:09,040
meaning this speed under 20 is going to become a named argument


6961
09:08:09,040 --> 09:08:13,122
and then this we are passing into the init method of the next class in the


6962
09:08:13,122 --> 09:08:21,040
method resolution order and with that if i now print


6963
09:08:21,520 --> 09:08:24,160
shark dot


6964
09:08:24,160 --> 09:08:29,360
speed and actually display what we get


6965
09:08:29,360 --> 09:08:34,480
i now get 120 the one we have specified in here


6966
09:08:34,480 --> 09:08:40,640
and this is how you would work with this now for an actual example you would add


6967
09:08:40,640 --> 09:08:46,558
a lot more quarks to all of these classes for example the fish would also


6968
09:08:46,558 --> 09:08:51,040
have double star and keyword arguments and


6969
09:08:51,040 --> 09:08:55,278
then you would pass this into the init method as well so in here


6970
09:08:55,278 --> 09:08:58,160
quarks as well now in this case


6971
09:08:58,160 --> 09:09:03,360
the keyword arguments is going to be empty if i print it keyword arguments


6972
09:09:03,360 --> 09:09:07,598
and run this we're getting an empty dictionary


6973
09:09:07,598 --> 09:09:10,878
because we don't have any additional named arguments that we have to worry


6974
09:09:10,878 --> 09:09:15,758
about so this dictionary here is going to be empty well this dictionary


6975
09:09:15,758 --> 09:09:19,360
actually but if we had more named arguments they


6976
09:09:19,360 --> 09:09:24,640
would all go in there and this is then how you would deal with


6977
09:09:24,640 --> 09:09:30,480
multiple inheritance and if again you are just starting with


6978
09:09:30,480 --> 09:09:33,758
inheritance this really isn't something you want to


6979
09:09:33,758 --> 09:09:37,360
worry about too much probably if you're watching this for the


6980
09:09:37,360 --> 09:09:41,758
first time and you're still struggling with objects in general this is going to


6981
09:09:41,758 --> 09:09:46,320
be way too much i would recommend just practice objects


6982
09:09:46,320 --> 09:09:50,558
and simple inheritance for now and once you are more comfortable with


6983
09:09:50,558 --> 09:09:55,680
them come back to this this sort of inheritance is only really


6984
09:09:55,680 --> 09:09:59,200
something you are going to see once you get much more advanced


6985
09:09:59,200 --> 09:10:04,078
especially for making games or for making gui's you probably don't need any


6986
09:10:04,078 --> 09:10:08,878
of this whatsoever all of the games i have made so far have


6987
09:10:08,878 --> 09:10:13,438
never used multiple inheritance they all use simple inheritance and they worked


6988
09:10:13,438 --> 09:10:18,160
just fine but well at this point we have covered


6989
09:10:18,160 --> 09:10:24,000
all the main parts of classes i guess at this point there is some more


6990
09:10:24,000 --> 09:10:28,398
smaller things i do want to cover but they're all going to be fairly simple so


6991
09:10:28,398 --> 09:10:30,640
let's talk about them in the next section


6992
09:10:30,640 --> 09:10:35,680
alright for this part i want to talk about some extra parts for classes and


6993
09:10:35,680 --> 09:10:39,918
those are things i couldn't really fit in in any of the other sections but


6994
09:10:39,918 --> 09:10:43,520
they're all fairly simple but they can be quite useful


6995
09:10:43,520 --> 09:10:46,398
and well let's do all of this straight in


6996
09:10:46,398 --> 09:10:49,758
code i think that's going to be the easiest


6997
09:10:49,758 --> 09:10:56,398
all right once more we have the monster class and this is just something i want


6998
09:10:56,398 --> 09:11:00,160
to use to illustrate what we are going to do


6999
09:11:00,160 --> 09:11:05,598
and let me create an instance of this monster with monster and for the health


7000
09:11:05,598 --> 09:11:10,160
i want 20 for the energy i want 10. it really doesn't matter what number we go


7001
09:11:10,160 --> 09:11:14,160
with here and now there are three things i want to


7002
09:11:14,160 --> 09:11:19,918
cover the first one is private attributes


7003
09:11:19,918 --> 09:11:26,558
the second one is has utter and set utter


7004
09:11:26,558 --> 09:11:32,718
and the third one is going to be the dog string


7005
09:11:32,718 --> 09:11:36,320
and once we have those we are basically done with classes


7006
09:11:36,320 --> 09:11:41,598
and the first one is going to be private attributes which is just going to be an


7007
09:11:41,598 --> 09:11:46,878
attribute inside of a class that cannot be influenced from outside of the class


7008
09:11:46,878 --> 09:11:50,800
which may be something like an id number that you really want to make sure of


7009
09:11:50,800 --> 09:11:56,000
cannot be changed from outside of the class to be sure that it doesn't mess


7010
09:11:56,000 --> 09:11:59,598
with some other code and this actually isn't possible in


7011
09:11:59,598 --> 09:12:04,398
python we are always able to change the attribute of a class


7012
09:12:04,398 --> 09:12:08,160
so python developers came up with something else


7013
09:12:08,160 --> 09:12:14,238
and this let me copy this comment here and in the init method of the monster


7014
09:12:14,238 --> 09:12:17,122
class i want to create


7015
09:12:17,122 --> 09:12:21,758
a private attribute and how you would do this is first add


7016
09:12:21,758 --> 09:12:26,078
an underscore and then the name of the attribute let's say in this case i want


7017
09:12:26,078 --> 09:12:29,438
to have an id and the number i want here could be 5


7018
09:12:29,438 --> 09:12:33,278
but it could be anything it really doesn't matter


7019
09:12:33,278 --> 09:12:39,278
and now this id by convention is not supposed to be changed


7020
09:12:39,278 --> 09:12:44,800
but this is just a convention basically what you do with this format


7021
09:12:44,800 --> 09:12:50,160
is you tell other developers that this attribute should not be worked on but


7022
09:12:50,160 --> 09:12:55,520
you totally could work on it for example what i can do i can print


7023
09:12:55,520 --> 09:13:01,200
monster and then underscore id and i get 5


7024
09:13:01,200 --> 09:13:05,598
meaning you can work with it but there's a very clear indicator that you


7025
09:13:05,598 --> 09:13:09,438
shouldn't so if you ever work with somebody else and they added something


7026
09:13:09,438 --> 09:13:13,278
like this you probably should not change it


7027
09:13:13,278 --> 09:13:17,680
and well that is all you need to know about private attributes you could do


7028
09:13:17,680 --> 09:13:21,520
the same thing for methods you are essentially following a naming scheme so


7029
09:13:21,520 --> 09:13:25,360
this works with both attributes and methods


7030
09:13:25,360 --> 09:13:32,000
all right next up we have has utter and set utter and what those two are doing


7031
09:13:32,000 --> 09:13:36,320
is they allow us to check if a class has an attribute and we can also use it to


7032
09:13:36,320 --> 09:13:40,800
set an attribute and the first one is going to be has


7033
09:13:40,800 --> 09:13:45,200
utter and that is just going to be a normal python function


7034
09:13:45,200 --> 09:13:50,878
and this one wants two arguments it first of all wants to have an object


7035
09:13:50,878 --> 09:13:57,200
and besides that it wants a string with an attribute name


7036
09:13:57,200 --> 09:14:01,122
and let's try this one i want to look at my monster


7037
09:14:01,122 --> 09:14:07,122
and for my monster i want to check if the monster has health


7038
09:14:07,122 --> 09:14:13,200
and this is then going to return a boolean that either says true or false


7039
09:14:13,200 --> 09:14:18,718
meaning i can print all of this and i get true so this monster has the


7040
09:14:18,718 --> 09:14:21,840
attribute health if i check for something that doesn't


7041
09:14:21,840 --> 09:14:26,238
exist let's say a weapon i get faults because the monster doesn't have a


7042
09:14:26,238 --> 09:14:29,278
weapon and


7043
09:14:29,278 --> 09:14:35,438
this you could then use an if statement for example if has utter monster health


7044
09:14:35,438 --> 09:14:41,200
and if it has health i want to print the monster has


7045
09:14:41,200 --> 09:14:46,558
and i guess then we can use an f string monster dot health


7046
09:14:46,558 --> 09:14:51,520
and that is terrible spelling and let's turn this into an f string


7047
09:14:51,520 --> 09:14:54,480
and add health at the end


7048
09:14:54,480 --> 09:15:00,480
and now we run this the monster has 20 health and that is what we have set here


7049
09:15:00,480 --> 09:15:06,238
and this is has utter it's a really useful way to check if a certain class


7050
09:15:06,238 --> 09:15:10,078
has an attribute you are going to use this fairly often actually it's a really


7051
09:15:10,078 --> 09:15:15,758
useful function and besides that set utter works in kind


7052
09:15:15,758 --> 09:15:20,000
of the same way so let me call it set utter


7053
09:15:20,000 --> 09:15:25,200
and in here we need three arguments first of all we need an object


7054
09:15:25,200 --> 09:15:31,122
then we need a string of an attribute name let's call it attribute again


7055
09:15:31,122 --> 09:15:35,122
and then we have to set a new value and this could be a string it could be a


7056
09:15:35,122 --> 09:15:40,718
number it's really up to you i guess let's say again i want to look


7057
09:15:40,718 --> 09:15:46,160
at my monster the attribute i want to set is a weapon


7058
09:15:46,160 --> 09:15:50,800
and for the value let's give the monster a sword


7059
09:15:50,800 --> 09:15:54,558
and now i can print monster.web


7060
09:15:54,558 --> 09:15:58,558
pin and i get sword


7061
09:15:58,558 --> 09:16:05,758
and this set utter is basically the same thing as calling monster dot weapon


7062
09:16:05,758 --> 09:16:11,438
and setting this to sword these two things essentially do the same


7063
09:16:11,438 --> 09:16:15,840
thing and now you might be wondering why do we


7064
09:16:15,840 --> 09:16:19,278
have this kind of redundancy that this is


7065
09:16:19,278 --> 09:16:23,520
kind of pointless at least seemingly that we have this entire function that


7066
09:16:23,520 --> 09:16:28,480
does something very obvious but the reason for it that this allows


7067
09:16:28,480 --> 09:16:32,640
us to very efficiently create new attributes


7068
09:16:32,640 --> 09:16:35,840
for example what we could be doing let me


7069
09:16:35,840 --> 09:16:40,718
comment those two out and i could run a for loop


7070
09:16:40,718 --> 09:16:48,000
and let me add a let's call it new ad reviews


7071
09:16:48,000 --> 09:16:51,758
and this is going to be a tuple with lists


7072
09:16:51,758 --> 09:16:56,558
i want to have for example a weapon and there i can have an x


7073
09:16:56,558 --> 09:17:02,160
besides that i want to have another list with let's say


7074
09:17:02,160 --> 09:17:07,758
armor and the armor could be a shield


7075
09:17:07,758 --> 09:17:11,840
and finally i want to have one more list and this could be


7076
09:17:11,840 --> 09:17:15,680
potion i could set something like mana or


7077
09:17:15,680 --> 09:17:20,078
whatever you want to go for and now


7078
09:17:20,078 --> 09:17:23,360
i can use that as a for loop so


7079
09:17:23,360 --> 09:17:27,200
for attribute and


7080
09:17:27,200 --> 09:17:33,680
value in new attributes i can call set utter


7081
09:17:33,680 --> 09:17:39,122
i can pass in my monster in here and then i want my attribute


7082
09:17:39,122 --> 09:17:44,000
and my value and if i run this


7083
09:17:44,000 --> 09:17:50,878
we are not getting an error which is a good sign and now i can print


7084
09:17:50,878 --> 09:17:54,640
my vars for the monster


7085
09:17:54,640 --> 09:17:59,680
and i get the new weapon the new armor and the new potion


7086
09:17:59,680 --> 09:18:04,558
and this way you can set a lot of new attributes and


7087
09:18:04,558 --> 09:18:09,918
values for class by using this if you just used monster.weapon this one


7088
09:18:09,918 --> 09:18:16,078
here this would not be possible and this is why set utter exists


7089
09:18:16,078 --> 09:18:20,960
although you probably would want to create all of these attributes when you


7090
09:18:20,960 --> 09:18:25,360
actually create the object itself so this isn't something you want to do too


7091
09:18:25,360 --> 09:18:30,000
often although in some situations it can be really useful


7092
09:18:30,000 --> 09:18:35,200
alright with that we have set utter and has utter


7093
09:18:35,200 --> 09:18:38,718
and finally we have doc


7094
09:18:38,718 --> 09:18:43,278
and doc is just there to explain what your object does


7095
09:18:43,278 --> 09:18:48,238
that's really just about it you are getting doc or the doc's string


7096
09:18:48,238 --> 09:18:53,040
to be more specific by calling monster and then dunder dock


7097
09:18:53,040 --> 09:18:56,960
and in this case if i run this we get none


7098
09:18:56,960 --> 09:19:02,800
for the simple reason that we have to create a dock string for our object


7099
09:19:02,800 --> 09:19:06,800
and this you do first thing in the object and all you do


7100
09:19:06,800 --> 09:19:12,800
in here is you set a triple quotation mark like this


7101
09:19:12,800 --> 09:19:17,520
and then in there you are setting what you want for the monster for example i


7102
09:19:17,520 --> 09:19:22,000
could write in here a monster that has some


7103
09:19:22,000 --> 09:19:25,840
attributes and i am really bad at spelling monster


7104
09:19:25,840 --> 09:19:30,480
for some reason and now if i run this print again


7105
09:19:30,480 --> 09:19:34,080
and now i get a monster that has some attributes


7106
09:19:34,080 --> 09:19:39,360
and this you could make significantly longer depending on what kind of class


7107
09:19:39,360 --> 09:19:43,756
you have but this is usually what you want to set to explain your code to


7108
09:19:43,756 --> 09:19:47,680
other people and especially if you work in a team


7109
09:19:47,680 --> 09:19:52,480
with much larger projects it's really helpful to set something like this


7110
09:19:52,480 --> 09:19:56,400
because well somebody else might have no idea what you're talking about


7111
09:19:56,400 --> 09:20:00,800
what you can also do is let me comment out this print


7112
09:20:00,800 --> 09:20:05,916
statement here and instead call help and i want to look at my monster


7113
09:20:05,916 --> 09:20:10,560
if i run this i am getting a long list of different


7114
09:20:10,560 --> 09:20:13,840
things and in here i can see lots of useful


7115
09:20:13,840 --> 09:20:17,436
things for example i can see


7116
09:20:17,436 --> 09:20:22,480
monster and its parameters i can see the dog string


7117
09:20:22,480 --> 09:20:26,800
and i can see all of the methods inside of it


7118
09:20:26,800 --> 09:20:31,120
and if you just find a new object you don't really know much about the help


7119
09:20:31,120 --> 09:20:35,276
function is really useful as a matter of fact


7120
09:20:35,276 --> 09:20:39,756
you can also pass normal python code in here for example


7121
09:20:39,756 --> 09:20:45,840
what i could pass in here is just str for string and now python gives me the


7122
09:20:45,840 --> 09:20:51,040
help function for strings and if i go all the way to the top


7123
09:20:51,040 --> 09:20:55,680
there you can see basically that we have another object


7124
09:20:55,680 --> 09:21:00,000
and the object takes one argument which is going to be a string


7125
09:21:00,000 --> 09:21:05,120
then we have the dog string and this one explains what this object does


7126
09:21:05,120 --> 09:21:09,276
and afterwards we have all of the methods and there are quite a few


7127
09:21:09,276 --> 09:21:13,840
because strings are very complex objects


7128
09:21:14,000 --> 09:21:19,200
and with that we have covered objects and classes i hope that wasn't too


7129
09:21:19,200 --> 09:21:23,916
difficult but this is definitely something you do want to practice


7130
09:21:23,916 --> 09:21:28,880
so hope that was helpful and i will see you around in this part we are going to


7131
09:21:28,880 --> 09:21:34,000
be talking about modules this is the part where python really becomes


7132
09:21:34,000 --> 09:21:39,360
powerful so let's talk about it essentially modules are just extra parts


7133
09:21:39,360 --> 09:21:44,880
that we can attach to our programs for example if we wanted random numbers


7134
09:21:44,880 --> 09:21:48,720
we would add the random module that's basically what it is


7135
09:21:48,720 --> 09:21:52,960
there are quite a few modules that we can use that come with python by default


7136
09:21:52,960 --> 09:21:57,040
and random is the one you are probably going to use the most but i will cover a


7137
09:21:57,040 --> 09:22:02,320
few more in just a bit besides that we can also create our own


7138
09:22:02,320 --> 09:22:07,520
modules to make our code more organized and each module would be in a separate


7139
09:22:07,520 --> 09:22:11,520
file which makes it really easy to organize larger programs which is


7140
09:22:11,520 --> 09:22:14,160
something we're also going to cover in just a bit


7141
09:22:14,160 --> 09:22:19,520
but the much more important part is to use modules for extra functionality and


7142
09:22:19,520 --> 09:22:24,400
let's start with that one and in here we have two different


7143
09:22:24,400 --> 09:22:27,520
options we can either import from the python


7144
09:22:27,520 --> 09:22:32,560
standard library all this really means is that these modules come with python


7145
09:22:32,560 --> 09:22:37,360
when we install python so we can just import them and then work with them it's


7146
09:22:37,360 --> 09:22:42,240
super easy besides that we can also import additional modules


7147
09:22:42,240 --> 09:22:47,840
made by other people but those we have to install on our computer first


7148
09:22:47,840 --> 09:22:53,276
these modules here can become incredibly important for example if we want to make


7149
09:22:53,276 --> 09:22:58,720
games or work with machine learning or do data analysis or run databases


7150
09:22:58,720 --> 09:23:03,276
we would basically install additional modules to make all of this work


7151
09:23:03,276 --> 09:23:08,880
but let's not get ahead of ourselves and let's start with the python standard


7152
09:23:08,880 --> 09:23:12,560
library and by just talking about basic modules


7153
09:23:12,560 --> 09:23:17,436
here we once again have a completely empty python file and what i want to


7154
09:23:17,436 --> 09:23:23,916
create is a random number the problem we have is that there's no


7155
09:23:23,916 --> 09:23:30,960
way so far to create random numbers but we can do it by importing a module and


7156
09:23:30,960 --> 09:23:36,160
this we do with the import command and then the name of the module and the


7157
09:23:36,160 --> 09:23:41,680
module we want here is called random and this one is giving us random numbers i


7158
09:23:41,680 --> 09:23:46,240
think the name makes sense here and random has lots of different sub modules


7159
09:23:46,240 --> 09:23:50,480
that we could be using and the way you would access them is


7160
09:23:50,480 --> 09:23:56,400
first the name of the module and then the methods inside of it and one here


7161
09:23:56,400 --> 09:24:01,200
is called randint which is standing for random integer and


7162
09:24:01,200 --> 09:24:06,560
this is just a method we can call it although this one is expecting two


7163
09:24:06,560 --> 09:24:12,960
arguments a minimum and a maximum number but once i have those two i can print


7164
09:24:12,960 --> 09:24:18,320
the random number and now if i run this i get different


7165
09:24:18,320 --> 09:24:23,756
random numbers every time i'm executing this code and now you might be wondering


7166
09:24:23,756 --> 09:24:28,080
how do you know what else is inside of the random module and that's a really


7167
09:24:28,080 --> 09:24:31,756
good question usually what you do is you just google


7168
09:24:31,756 --> 09:24:36,640
the module and then you find lots of information for example for random


7169
09:24:36,640 --> 09:24:42,800
we have a whole documentation that is actually incredibly extensive so all of


7170
09:24:42,800 --> 09:24:48,080
the stuff in here would be part of the random module


7171
09:24:49,916 --> 09:24:54,000
the one we have seen already is random.rentend


7172
09:24:54,000 --> 09:25:00,400
and all it does is it creates a random integer between two numbers and this is


7173
09:25:00,400 --> 09:25:04,480
a function you are using all the time it is really popular


7174
09:25:04,480 --> 09:25:08,800
another one that you are seeing fairly often is choice


7175
09:25:08,800 --> 09:25:12,720
and this one picks a random item from some kind of sequence this could be a


7176
09:25:12,720 --> 09:25:17,200
list it could be a dictionary something like that and let's actually implement


7177
09:25:17,200 --> 09:25:24,880
this one here i'm back in the code and i want to create a test list


7178
09:25:24,880 --> 09:25:28,640
and for this test list i just want to have a couple of numbers it really


7179
09:25:28,640 --> 09:25:32,320
doesn't matter i guess let me put the print on top and


7180
09:25:32,320 --> 09:25:36,480
now i want to select one item from this list


7181
09:25:36,480 --> 09:25:42,720
and for that i would get my random again and i would add choice


7182
09:25:42,720 --> 09:25:47,520
and now this choice is expecting one argument and that is the list so test


7183
09:25:47,520 --> 09:25:51,916
list in here and now all i have to do is print the


7184
09:25:51,916 --> 09:25:56,000
result and let me comment out this stuff up


7185
09:25:56,000 --> 09:26:02,000
here so we're not getting confused and if i run this we get different items


7186
09:26:02,000 --> 09:26:06,560
from this list i guess to make it a bit more visually


7187
09:26:06,560 --> 09:26:09,840
appealing let's add a few different data types in


7188
09:26:09,840 --> 09:26:14,480
here this one is looking better so now if i


7189
09:26:14,480 --> 09:26:18,560
run this we get all of the different values


7190
09:26:18,560 --> 09:26:24,080
and that is in the most basic sense how you would be using modules


7191
09:26:24,080 --> 09:26:29,040
and there are a lot of different modules that come with python already


7192
09:26:29,040 --> 09:26:33,120
if you look this up online you are going to find this list calling the python


7193
09:26:33,120 --> 09:26:36,640
standard library and those are all of the modules that


7194
09:26:36,640 --> 09:26:41,680
come with python and in here we have a lot of different


7195
09:26:41,680 --> 09:26:45,756
options that we could be working with for example the one i'm seeing right now


7196
09:26:45,756 --> 09:26:50,160
is called tkinter and this is the most common way to create guise or graphical


7197
09:26:50,160 --> 09:26:54,480
user interface in python it basically gives you buttons


7198
09:26:54,480 --> 09:26:59,840
besides that we also have a ton of modules that work with the internet


7199
09:26:59,840 --> 09:27:05,360
and if i go up a bit more we can see i hope i find it there should


7200
09:27:05,360 --> 09:27:09,200
be random in here somewhere


7201
09:27:09,360 --> 09:27:13,756
there we go there is random and there are quite a few more modules that we


7202
09:27:13,756 --> 09:27:18,400
could use with numbers chances are you are only ever going to


7203
09:27:18,400 --> 09:27:21,916
see a very small part of all of these modules


7204
09:27:21,916 --> 09:27:25,916
even i have only ever used a very small part of them


7205
09:27:25,916 --> 09:27:31,276
for example i have no idea what rl completer is i have never used it even


7206
09:27:31,276 --> 09:27:35,360
once but some modules in here are incredibly


7207
09:27:35,360 --> 09:27:38,720
useful and you do want to have a basic awareness of them


7208
09:27:38,720 --> 09:27:42,640
and you basically learn all of them by just using python and then discovering


7209
09:27:42,640 --> 09:27:48,400
more and more of them now if you want to import multiple modules you can do it in


7210
09:27:48,400 --> 09:27:51,840
two ways you could either on another line import


7211
09:27:51,840 --> 09:27:54,960
something again let's say what i could also import is


7212
09:27:54,960 --> 09:27:59,840
the string module and what this one does let me comment


7213
09:27:59,840 --> 09:28:04,480
this one out i could for example print string and in


7214
09:28:04,480 --> 09:28:09,520
here i could print the s key underscore lowercase


7215
09:28:09,520 --> 09:28:14,400
and be aware this is not a method this is just an attribute and if i run this


7216
09:28:14,400 --> 09:28:19,680
i get all the lowercase letters of the alphabet that's really it string is a


7217
09:28:19,680 --> 09:28:23,840
very simple module if you are importing two modules just


7218
09:28:23,840 --> 09:28:28,640
like that to save a bit of space you can put all of this on the same line like


7219
09:28:28,640 --> 09:28:30,560
this and


7220
09:28:30,560 --> 09:28:34,800
then i can get rid of the second line run all of this again and we get the


7221
09:28:34,800 --> 09:28:38,960
same output the random module would still work just fine


7222
09:28:38,960 --> 09:28:43,276
i guess one more module that we could be looking at that you do see fairly often


7223
09:28:43,276 --> 09:28:48,880
is called math and this one is giving us a few more advanced math functions


7224
09:28:48,880 --> 09:28:54,880
for example what we could do in here is print math dot sign curve


7225
09:28:54,880 --> 09:29:00,720
and add like a 1 in here and if you have no idea what this means don't worry too


7226
09:29:00,720 --> 09:29:05,120
much about it it's just a sine curve not something you use too often unless you


7227
09:29:05,120 --> 09:29:10,240
are doing some fairly specific tasks i suppose a more common operation for math


7228
09:29:10,240 --> 09:29:14,560
would be floor and this one gives us the floor of an


7229
09:29:14,560 --> 09:29:17,360
integer meaning if i have


7230
09:29:17,360 --> 09:29:21,520
4.9 this one is giving me 4.


7231
09:29:21,520 --> 09:29:25,596
we are basically just rounding down that's all that's happening in here and


7232
09:29:25,596 --> 09:29:30,640
with that we have a couple more modules now there are a few more things you can


7233
09:29:30,640 --> 09:29:35,360
do with the import statement and those are mostly to be more specific in terms


7234
09:29:35,360 --> 09:29:39,040
of what you import for example for my math


7235
09:29:39,040 --> 09:29:44,480
i only want to import math.floor and nothing else


7236
09:29:44,480 --> 09:29:48,840
and if that is the case you can just type from math


7237
09:29:48,840 --> 09:29:53,840
import floor and this way we are only importing floor


7238
09:29:53,840 --> 09:29:57,680
and we don't have to worry about the math part in front of it


7239
09:29:57,680 --> 09:30:02,640
meaning now when i'm calling it down here i can remove it and call floor like


7240
09:30:02,640 --> 09:30:06,880
any other function oh and let me get rid of the comma all the way up here that


7241
09:30:06,880 --> 09:30:10,240
shouldn't be there now if i run this


7242
09:30:10,240 --> 09:30:15,680
we get the same outcome and this flow now works like any other python function


7243
09:30:15,680 --> 09:30:20,320
if you really wanted to you could also rename this floor


7244
09:30:20,320 --> 09:30:24,960
function and this you would do by adding s and then the name


7245
09:30:24,960 --> 09:30:30,400
and you could name this any valid python name i could for example call it get


7246
09:30:30,400 --> 09:30:34,160
floor and then this one here would be get


7247
09:30:34,160 --> 09:30:38,560
underscore floor and there we go same outcome


7248
09:30:38,560 --> 09:30:43,520
i guess what you would mostly do in here is to shorten method names if they get


7249
09:30:43,520 --> 09:30:47,596
too long for example i could shorten this to f


7250
09:30:47,596 --> 09:30:52,080
and this would then save me quite a bit of writing


7251
09:30:52,080 --> 09:30:56,800
and some modules do get very long so this isn't actually as rare as you would


7252
09:30:56,800 --> 09:31:00,160
think it is and finally there's one more thing that


7253
09:31:00,160 --> 09:31:05,680
we can do let's say for this random here i want to


7254
09:31:05,680 --> 09:31:09,916
use all of the methods but i don't really want to write this random at the


7255
09:31:09,916 --> 09:31:15,436
beginning every single time and to achieve that we would use from


7256
09:31:15,436 --> 09:31:19,120
random again but now when we import individual


7257
09:31:19,120 --> 09:31:24,480
modules we are typing a star and this tells python we want to import


7258
09:31:24,480 --> 09:31:28,800
every single method and function from the random module and then use it in our


7259
09:31:28,800 --> 09:31:33,360
code and this allows us to use all of them without writing random first


7260
09:31:33,360 --> 09:31:37,596
really now i can run this and i still get the same outcome although this you


7261
09:31:37,596 --> 09:31:43,200
really don't want to overdo because if you import all of it you are well


7262
09:31:43,200 --> 09:31:47,756
importing all of it and this could add a ton of functions and methods and


7263
09:31:47,756 --> 09:31:52,400
variables that you don't want to use and that could clutter up your program but


7264
09:31:52,400 --> 09:31:57,840
alright with that we have covered the basics of modules and let's do an


7265
09:31:57,840 --> 09:32:01,040
exercise and this is going to involve a bit of


7266
09:32:01,040 --> 09:32:05,040
research on your part what i want you guys to do is to get the current time


7267
09:32:05,040 --> 09:32:09,680
from the date time module so do some google research and try to


7268
09:32:09,680 --> 09:32:14,560
figure out how to get this it should be doable in a single line of code


7269
09:32:14,560 --> 09:32:18,720
i guess two lines of code if you include the importing part as well but pause the


7270
09:32:18,720 --> 09:32:22,560
video now and try this one yourself


7271
09:32:23,436 --> 09:32:27,916
i suppose the best way to start this is by doing the research ourselves


7272
09:32:27,916 --> 09:32:32,480
here again we have the website with the python standard library and what i'm


7273
09:32:32,480 --> 09:32:37,840
looking for it's already in here i am looking for date time the module


7274
09:32:37,840 --> 09:32:44,400
and this i get here if i click on it i get a lot more information


7275
09:32:44,400 --> 09:32:51,200
and in here if you scroll down you can find a ton of different things


7276
09:32:51,200 --> 09:32:55,916
it's actually quite an extensive module but i'm just looking for one specific


7277
09:32:55,916 --> 09:33:00,800
thing i hope i can find it for example here we would have today


7278
09:33:00,800 --> 09:33:05,276
that is kind of useful but i want to find the current time


7279
09:33:05,276 --> 09:33:08,800
and the current time i


7280
09:33:08,800 --> 09:33:11,916
can find


7281
09:33:12,000 --> 09:33:17,276
ah in here class method daytime now this is what i was looking for and this gives


7282
09:33:17,276 --> 09:33:21,840
me the current time now you obviously didn't know that this


7283
09:33:21,840 --> 09:33:27,040
one even existed so this probably took you a bit more googling but most of the


7284
09:33:27,040 --> 09:33:31,360
time this is how you discover new modules you just google a problem then


7285
09:33:31,360 --> 09:33:35,756
you in some form find a new module and this solves most of your issues


7286
09:33:35,756 --> 09:33:39,436
that's basically how everybody learns python or any programming language in


7287
09:33:39,436 --> 09:33:42,400
general let's implement it here i'm back in the


7288
09:33:42,400 --> 09:33:49,916
code i want to import date time although day time is a bit weird because


7289
09:33:49,916 --> 09:33:56,560
what we have to do is from date time import date time


7290
09:33:56,560 --> 09:34:02,160
and what that means is inside of the date time module we have


7291
09:34:02,160 --> 09:34:06,960
one object called datetime they just happen to have the same name


7292
09:34:06,960 --> 09:34:11,520
which can be kind of confusing but well it is what it is


7293
09:34:11,520 --> 09:34:17,520
and i guess just to be a bit fancy here let's abbreviate it as dt


7294
09:34:17,520 --> 09:34:23,120
and now to get the current time i need my datetime dot now


7295
09:34:23,120 --> 09:34:26,560
and this i can just print


7296
09:34:26,560 --> 09:34:31,120
and if i run the code now i get lots of stuff let me comment out


7297
09:34:31,120 --> 09:34:36,560
all of this and now i get my current date and my current time down


7298
09:34:36,560 --> 09:34:41,276
to some nanoseconds with that we have covered all the basics


7299
09:34:41,276 --> 09:34:44,480
of modules meaning if you got so far you already


7300
09:34:44,480 --> 09:34:49,040
have a pretty good understanding although you can do quite a bit more and


7301
09:34:49,040 --> 09:34:54,560
that is going to be the next part in this part we are going to cover


7302
09:34:54,560 --> 09:35:00,080
external modules and external modules are just modules


7303
09:35:00,080 --> 09:35:05,916
that are made by other programmers and this is giving us a ton of extra


7304
09:35:05,916 --> 09:35:08,640
functionality for example


7305
09:35:08,640 --> 09:35:12,640
any kind of game development any kind of data analysis machine learning graphical


7306
09:35:12,640 --> 09:35:16,880
user interface and a lot more is essentially just a module made by


7307
09:35:16,880 --> 09:35:21,120
somebody else and we are using these functionalities and this is one of the


7308
09:35:21,120 --> 09:35:25,840
really strong parts of python there is a very active community that makes a lot


7309
09:35:25,840 --> 09:35:29,360
of extra modules that you can use for your own projects


7310
09:35:29,360 --> 09:35:33,200
almost all of them are free there are some very select ones that are being


7311
09:35:33,200 --> 09:35:36,640
paid those are usually more business oriented ones that you don't have to


7312
09:35:36,640 --> 09:35:42,000
worry about and these modules are imported like the standard modules the


7313
09:35:42,000 --> 09:35:45,916
only difference is that these modules have to be installed on your computer


7314
09:35:45,916 --> 09:35:50,880
first and this can be done in a couple of ways the most common one is in the


7315
09:35:50,880 --> 09:35:56,080
powershell or the terminal now what does that mean


7316
09:35:56,080 --> 09:36:01,360
the powershell is for windows and the terminal is for mac os and both are


7317
09:36:01,360 --> 09:36:06,560
command line interfaces and what a command line interface is is


7318
09:36:06,560 --> 09:36:11,120
simply a way to interact with your computer simply by typing text if you


7319
09:36:11,120 --> 09:36:16,080
ever watched any kind of old movies those always use command line interfaces


7320
09:36:16,080 --> 09:36:20,160
where people just write commands into computer there are no buttons no windows


7321
09:36:20,160 --> 09:36:24,480
you just write text into your computer and this is what we are doing here as


7322
09:36:24,480 --> 09:36:27,120
well and this is the way python is intended


7323
09:36:27,120 --> 09:36:31,360
to be used it's honestly the easiest way and sounds way more complicated than it


7324
09:36:31,360 --> 09:36:34,320
actually is but let's actually have a look at this


7325
09:36:34,320 --> 09:36:39,040
and let's start with windows both versions are identical bar a very minor


7326
09:36:39,040 --> 09:36:42,880
difference now for windows you just have to open


7327
09:36:42,880 --> 09:36:49,200
the start menu and type powershell and if you press enter you can see


7328
09:36:49,200 --> 09:36:52,320
something like this let me full screen it


7329
09:36:52,320 --> 09:36:55,756
and this is a command line interface for windows


7330
09:36:55,756 --> 09:37:02,480
and in here i can type a ton of commands to make windows do


7331
09:37:02,480 --> 09:37:06,640
something in my case i only want to do some very


7332
09:37:06,640 --> 09:37:10,480
specific things and what i want to do


7333
09:37:10,480 --> 09:37:14,960
is to type pip and install and then the module i want


7334
09:37:14,960 --> 09:37:20,080
to go for and pip is the python package manager


7335
09:37:20,080 --> 09:37:24,160
meaning this is what we are using to install any kind of external module and


7336
09:37:24,160 --> 09:37:27,200
the module i want to install now is called pi


7337
09:37:27,200 --> 09:37:31,040
auto gui and now all you have to do is press


7338
09:37:31,040 --> 09:37:36,720
enter and python is installing a bunch of different things there really isn't


7339
09:37:36,720 --> 09:37:41,276
that much we have to do ourselves but at the end you can see successfully


7340
09:37:41,276 --> 09:37:45,120
installed pi out to gui and then the version name


7341
09:37:45,120 --> 09:37:49,916
and that is basically all you have to do although i guess there are a few more


7342
09:37:49,916 --> 09:37:55,200
things i do want to cover in here one command that i found really useful


7343
09:37:55,200 --> 09:37:59,360
is called clear and this one clears the entire interface so things are a bit


7344
09:37:59,360 --> 09:38:02,480
cleaner and one more thing that can be useful is


7345
09:38:02,480 --> 09:38:06,720
called pip list and this one gives you all the modules


7346
09:38:06,720 --> 09:38:11,360
that are being installed and your list should be a good bit shorter than mine


7347
09:38:11,360 --> 09:38:15,756
but you can install a ton of different things here and finally if you want to


7348
09:38:15,756 --> 09:38:19,916
uninstall a module you will just run pip uninstall


7349
09:38:19,916 --> 09:38:25,276
and in my case i want to uninstall pi or to gui


7350
09:38:25,276 --> 09:38:27,916
then python would ask us if we want to


7351
09:38:27,916 --> 09:38:32,560
proceed i want to with yes and now it's uninstalled


7352
09:38:32,560 --> 09:38:37,756
now i can clear all of this again and since i do want to use pi to gui i


7353
09:38:37,756 --> 09:38:42,640
want to install it again and this could be a good exercise for you so install pi


7354
09:38:42,640 --> 09:38:47,680
or to gui yourself again and see how far you get


7355
09:38:48,800 --> 09:38:56,000
all we need is pip install pi or to gui if i type this we get all of this again


7356
09:38:56,000 --> 09:39:01,680
and we have installed pi or to gui and that is pretty much all we needed and


7357
09:39:01,680 --> 09:39:06,160
now that we have that let's do the same thing for mac os


7358
09:39:06,160 --> 09:39:11,756
you open all of your programs and in there you type terminal


7359
09:39:11,756 --> 09:39:16,640
once you do that you're getting a new window and let me maximize it


7360
09:39:16,640 --> 09:39:22,240
in here if you hold the apple key and plus you can increase the font size


7361
09:39:22,240 --> 09:39:25,840
which i really want to do you might not need it


7362
09:39:25,840 --> 09:39:30,320
and in here we can work with mac os using commands


7363
09:39:30,320 --> 09:39:34,640
just like in windows i could type commands here to control


7364
09:39:34,640 --> 09:39:36,720
mac os


7365
09:39:36,720 --> 09:39:39,680
obviously not like that but you get the idea


7366
09:39:39,680 --> 09:39:46,400
for example clear works just in the same way most commands do actually the one


7367
09:39:46,400 --> 09:39:51,840
minor difference here is we do not type pip install and the module


7368
09:39:51,840 --> 09:39:58,880
instead we would be writing pip 3 install and then the module


7369
09:39:58,880 --> 09:40:02,960
the only difference here is the free the rest stays identical


7370
09:40:02,960 --> 09:40:08,560
d3 here is needed because on mac os python comes pre-installed the problem


7371
09:40:08,560 --> 09:40:13,360
is the python version is really old and when we installed python on the mac we


7372
09:40:13,360 --> 09:40:18,160
installed a separate version of python and this three is to tell python that we


7373
09:40:18,160 --> 09:40:22,080
want to use the latest one which is python 3 we do not want to use the


7374
09:40:22,080 --> 09:40:26,480
original python but that is the only difference so in my


7375
09:40:26,480 --> 09:40:31,276
case i want to install pi auto gui i press enter


7376
09:40:31,276 --> 09:40:34,400
now python is doing a thing and at the end


7377
09:40:34,400 --> 09:40:38,880
we get successfully installed pi auto gui and


7378
09:40:38,880 --> 09:40:43,436
if you notice here this is the same version we have on windows


7379
09:40:43,436 --> 09:40:48,560
and with that we are good to go inside of our code editor there's not going to


7380
09:40:48,560 --> 09:40:52,640
be a single difference so let's have a look at that


7381
09:40:52,640 --> 09:40:57,680
alright here we are back in my python file and i'm using windows but this is


7382
09:40:57,680 --> 09:41:02,080
going to work both with mac and with windows the installing part was the only


7383
09:41:02,080 --> 09:41:07,596
difference between the operating systems but now i have pi out to gui so i want


7384
09:41:07,596 --> 09:41:14,480
to import it so import pi or to gui and what this module is doing is it


7385
09:41:14,480 --> 09:41:19,120
automates windows to a certain extent for example what you could be doing is


7386
09:41:19,120 --> 09:41:24,400
to move the mouse around or to write some text from your computer with python


7387
09:41:24,400 --> 09:41:28,800
and i guess let's get started with that now that we have pi out gui i just want


7388
09:41:28,800 --> 09:41:34,400
to call the entire module and then right and now and here i can tell it to write


7389
09:41:34,400 --> 09:41:39,520
some text for example this is written by a


7390
09:41:39,520 --> 09:41:44,880
computer and now if i would run this code we


7391
09:41:44,880 --> 09:41:49,680
would have this typed out although right now this would be kind of awkward


7392
09:41:49,680 --> 09:41:54,320
because i have no time to switch to another program like a text editor


7393
09:41:54,320 --> 09:41:59,276
meaning i want to import another module from the python standard library or


7394
09:41:59,276 --> 09:42:04,720
another part of a module and this is called from time import sleep


7395
09:42:04,720 --> 09:42:10,480
and all that sleep does is it pauses our code for a certain time interval


7396
09:42:10,480 --> 09:42:14,800
let's say i want to call sleep and one second


7397
09:42:14,800 --> 09:42:19,120
and now let me bring in a text editor


7398
09:42:19,120 --> 09:42:23,756
and let me run the code switch back and now we have this is written by a


7399
09:42:23,756 --> 09:42:29,596
computer the text you have just seen was just written by python not by me


7400
09:42:29,596 --> 09:42:33,120
i suppose to make the effect a bit more noticeable


7401
09:42:33,120 --> 09:42:38,480
is for this method here we can add another argument or a named


7402
09:42:38,480 --> 09:42:42,400
argument to be more specific and this is called interval


7403
09:42:42,400 --> 09:42:48,480
and in my case let's go with 0.5 probably a bit long let's say 0.25


7404
09:42:48,480 --> 09:42:52,720
and this is the interval duration between each letter that is being typed


7405
09:42:52,720 --> 09:42:58,160
out i guess let me write it again and switch back to the text editor and


7406
09:42:58,160 --> 09:43:03,916
now you can see this is written by a computer just very very slowly


7407
09:43:03,916 --> 09:43:07,276
i guess what you also could do is run the code itself


7408
09:43:07,276 --> 09:43:12,160
and now python is writing this code by itself in sublime this is also working


7409
09:43:12,160 --> 09:43:15,436
just fine prior to gui doesn't care where it's


7410
09:43:15,436 --> 09:43:18,960
writing it just starts typing these letters


7411
09:43:18,960 --> 09:43:23,200
let me get rid of them and with that we have one module


7412
09:43:23,200 --> 09:43:27,756
the only difference to standard modules is we are first installing it via pip


7413
09:43:27,756 --> 09:43:31,120
and then we're using it like any other module


7414
09:43:31,120 --> 09:43:36,320
and the main task for you is to understand what each module is doing and


7415
09:43:36,320 --> 09:43:40,160
for that you usually find documentations online


7416
09:43:40,160 --> 09:43:43,120
let's actually have a look at the one for pi auto gui


7417
09:43:43,120 --> 09:43:47,916
it is looking like this and if you scroll around here you can


7418
09:43:47,916 --> 09:43:50,560
find a ton of different things you could do


7419
09:43:50,560 --> 09:43:54,720
for example you could move your mouse you could add a click you could add a


7420
09:43:54,720 --> 09:43:58,080
double click you could write you could press a button


7421
09:43:58,080 --> 09:44:01,436
there are a ton of things you can do with pi or to gui it's a really fun


7422
09:44:01,436 --> 09:44:06,560
module and well this is then bringing us to the


7423
09:44:06,560 --> 09:44:10,560
exercise bit and what i want you guys to do is to do


7424
09:44:10,560 --> 09:44:18,240
a bit more research and what that means is create a graph


7425
09:44:18,240 --> 09:44:23,840
from any of the examples below


7426
09:44:23,840 --> 09:44:28,560
i should type these things out more but essentially here you have a link to a


7427
09:44:28,560 --> 09:44:33,916
website if i copy this and open the website


7428
09:44:33,916 --> 09:44:40,160
you can see a tutorial for pipelot in the matplotlib module and this is the


7429
09:44:40,160 --> 09:44:44,640
standard module you would use for data analysis it basically makes nice looking


7430
09:44:44,640 --> 09:44:47,916
graphs and i want you guys to look at any of


7431
09:44:47,916 --> 09:44:52,240
these examples and try to understand what is happening


7432
09:44:52,240 --> 09:44:56,160
or well you first have to install maploid lib and then you can follow any


7433
09:44:56,160 --> 09:45:00,400
of these examples so try to do that install the map.lib


7434
09:45:00,400 --> 09:45:05,436
module and try to copy or understand any of these examples it's entirely up to


7435
09:45:05,436 --> 09:45:08,560
you which one maybe go for something slightly more


7436
09:45:08,560 --> 09:45:14,520
complex this could be a really good challenge for you


7437
09:45:15,756 --> 09:45:20,640
i want to work on the simplest example here because i want to keep the video


7438
09:45:20,640 --> 09:45:23,276
short and the first thing we have to do is to


7439
09:45:23,276 --> 09:45:26,720
install matplotlib so once again


7440
09:45:26,720 --> 09:45:31,040
for windows i want the powershell let me maximize it


7441
09:45:31,040 --> 09:45:34,480
i guess let me clear this one first so it's a bit easier to read


7442
09:45:34,480 --> 09:45:39,276
and now what i have to do is pip install matte plot


7443
09:45:39,276 --> 09:45:43,520
lip and if i run this we have to install


7444
09:45:43,520 --> 09:45:47,360
quite a few different things this is going to take a second and we have


7445
09:45:47,360 --> 09:45:53,840
successfully installed map.lib 3.5.2 and if you are working on a mac this


7446
09:45:53,840 --> 09:45:59,916
would be pip 3 install matplotlib now that we have that let's return to


7447
09:45:59,916 --> 09:46:05,040
the code and in here let's comment out


7448
09:46:05,040 --> 09:46:09,520
all of this and we have to figure out how to import


7449
09:46:09,520 --> 09:46:13,120
mapp.lib and let me bring in the reference from


7450
09:46:13,120 --> 09:46:18,640
the site let's put it here this is good for reference


7451
09:46:18,640 --> 09:46:22,320
on the first line we have to import map.lib.pipelot


7452
09:46:22,320 --> 09:46:27,436
as plt when we're importing map.lib we are not importing all of it we're just


7453
09:46:27,436 --> 09:46:33,596
getting one subpart of it pipelot and we are renaming this to plt because typing


7454
09:46:33,596 --> 09:46:38,880
is hard so i want import mad plot


7455
09:46:38,880 --> 09:46:41,756
lib dot pi plot


7456
09:46:41,756 --> 09:46:46,240
as plt and now after the exercise


7457
09:46:46,240 --> 09:46:53,756
i have to create a plt dot plot and this one wants a list with a couple


7458
09:46:53,756 --> 09:46:58,480
of numbers in the example it's one two three and four


7459
09:46:58,480 --> 09:47:02,720
and once you have that you can already run this program and you're running this


7460
09:47:02,720 --> 09:47:07,360
with plt dot show meaning if i run this now


7461
09:47:07,360 --> 09:47:13,120
we are getting a graph the one you can see on the right besides the y labels


7462
09:47:13,120 --> 09:47:17,520
and in here you can change the numbers quite easily for example i could add 10


7463
09:47:17,520 --> 09:47:21,840
0 100 and if i run this again


7464
09:47:22,000 --> 09:47:26,800
we get a very different looking graph all that the plot method really wants is


7465
09:47:26,800 --> 09:47:31,276
the list of numbers and then it puts them into a line chart


7466
09:47:31,276 --> 09:47:36,400
and what we also see in the example is plt dot y


7467
09:47:36,400 --> 09:47:40,400
label and all this one really does is it adds


7468
09:47:40,400 --> 09:47:46,880
a label on the y axis so some numbers in this case on the example


7469
09:47:47,200 --> 09:47:52,480
and i guess let's copy it one to one we have some numbers


7470
09:47:52,480 --> 09:47:56,960
for the y axis to be a bit more specific


7471
09:47:56,960 --> 09:48:02,240
now if we run this we have some numbers for the y axis


7472
09:48:02,240 --> 09:48:05,916
we can also do the same thing for the x-axis if you really want to and this


7473
09:48:05,916 --> 09:48:10,320
you get with plt dot x-label and then we have some number for the


7474
09:48:10,320 --> 09:48:16,160
x-axis if i run this we can see at the bottom now we have


7475
09:48:16,160 --> 09:48:22,160
some numbers for the x-axis and that would be matplotlib or at the


7476
09:48:22,160 --> 09:48:26,080
very least a really basic introduction to map.lib


7477
09:48:26,080 --> 09:48:30,720
map.lib is a really complex module that can visualize data in a ton of different


7478
09:48:30,720 --> 09:48:35,680
ways so if you want to learn it it is going to take you quite some time


7479
09:48:35,680 --> 09:48:39,520
all right with that we have external modules so the last part for modules is


7480
09:48:39,520 --> 09:48:45,120
to create our own or at this part we are going to create our own custom modules


7481
09:48:45,120 --> 09:48:49,840
and the one question you might be having is why would you want to do that


7482
09:48:49,840 --> 09:48:56,240
and the answer primarily is organization that you are creating modules and each


7483
09:48:56,240 --> 09:49:01,276
module is in a separate file and that way you just never have too much stuff


7484
09:49:01,276 --> 09:49:05,200
in one file which really helps organizing your code


7485
09:49:05,200 --> 09:49:09,360
so far we just never really needed it but later on when we have thousands of


7486
09:49:09,360 --> 09:49:13,680
lines of code this becomes incredibly useful to not get lost on your own


7487
09:49:13,680 --> 09:49:18,400
program that being said you don't have to do it but it's a really good idea to


7488
09:49:18,400 --> 09:49:23,596
do that i guess let's implement all of this and that should explain it the best


7489
09:49:23,596 --> 09:49:28,480
all right here once again we have a completely empty python file


7490
09:49:28,480 --> 09:49:33,520
now since we are working with multiple files i want to be able to switch


7491
09:49:33,520 --> 09:49:37,520
between them and the best way for that is using tabs


7492
09:49:37,520 --> 09:49:43,200
so in sublime i'm pressing alt and then i can see all of the menu options


7493
09:49:43,200 --> 09:49:46,480
you could get the same result by pressing f11


7494
09:49:46,480 --> 09:49:50,560
and then you get this menu item here and you can select different things


7495
09:49:50,560 --> 09:49:55,200
and in my case i want to in view show tabs


7496
09:49:55,200 --> 09:49:59,596
and then i can see the different tabs i've opened right now only one


7497
09:49:59,596 --> 09:50:04,160
and let me return to full screen so it looks a bit cleaner and now this module


7498
09:50:04,160 --> 09:50:08,800
is only going to import the stuff from another module meaning i have to create


7499
09:50:08,800 --> 09:50:14,400
another python file with control n and this one i want to save so if i click on


7500
09:50:14,400 --> 09:50:20,080
save i can save this to whatever i want let's call this one my


7501
09:50:20,080 --> 09:50:23,916
module and this is still going to be a python file


7502
09:50:23,916 --> 09:50:28,080
and now i save this and now i have two files open that i can switch between


7503
09:50:28,080 --> 09:50:34,400
although right now both are completely empty and let's start in mymodule.pi


7504
09:50:34,400 --> 09:50:37,840
in here for the simplest possible example


7505
09:50:37,840 --> 09:50:43,200
i just want to create a test variable and this could have any value let's say


7506
09:50:43,200 --> 09:50:47,436
test and now this module i want to import in


7507
09:50:47,436 --> 09:50:53,200
my custom modules python file and this happens in the normal way


7508
09:50:53,200 --> 09:50:59,276
i first have to import my underscore module and this should not


7509
09:50:59,276 --> 09:51:03,360
be capitalized and if you run this and you don't get an


7510
09:51:03,360 --> 09:51:08,160
error this is looking pretty good and now that you have that you can use


7511
09:51:08,160 --> 09:51:13,436
this module like any other module for example in our case i can run my


7512
09:51:13,436 --> 09:51:17,200
module and then in my module i have a test var


7513
09:51:17,200 --> 09:51:22,080
let me copy it i can print this and i get test


7514
09:51:22,080 --> 09:51:26,960
this is also going to work with functions and with classes for example i


7515
09:51:26,960 --> 09:51:32,560
could create a test underscore function and then here we could even add some


7516
09:51:32,560 --> 09:51:37,120
parameters and let's say i just want to print


7517
09:51:37,120 --> 09:51:41,200
this is an imported


7518
09:51:41,200 --> 09:51:44,840
function with the


7519
09:51:44,840 --> 09:51:49,276
parameter and then parameter


7520
09:51:49,276 --> 09:51:56,000
and now this function i can also use inside of my main module


7521
09:51:56,080 --> 09:52:00,960
meaning i want my module dot test underscore function


7522
09:52:00,960 --> 09:52:05,596
and the argument i want to pass in here let's say is one two three


7523
09:52:05,596 --> 09:52:10,960
and if i run this now we are getting an error the name parameter is not defined


7524
09:52:10,960 --> 09:52:15,436
and oh the reason is that the parameter and this parameter here have different


7525
09:52:15,436 --> 09:52:19,756
names this one should be content


7526
09:52:19,756 --> 09:52:24,000
and now if we execute the code we get this is an imported function with the


7527
09:52:24,000 --> 09:52:29,680
parameter one two and three so this one is working just fine


7528
09:52:29,680 --> 09:52:34,000
finally what you can also do let me do it below the function


7529
09:52:34,000 --> 09:52:39,360
i can create a class called my class


7530
09:52:39,360 --> 09:52:43,756
added here you can run init


7531
09:52:43,756 --> 09:52:51,436
with self and give it a self.name let's call it my app


7532
09:52:51,436 --> 09:52:56,480
and we can call self.value i don't know 12.


7533
09:52:56,480 --> 09:53:01,360
and this can also have a method it's literally like any other class let's


7534
09:53:01,360 --> 09:53:05,756
call it do something it needs self and nothing else and then


7535
09:53:05,756 --> 09:53:12,240
here i just want to print hello so once again super simple class


7536
09:53:12,240 --> 09:53:17,520
that we now are able to import in the main file


7537
09:53:17,520 --> 09:53:21,916
actually what i can do if i hold ctrl and click on my module


7538
09:53:21,916 --> 09:53:27,040
i can see both files side by side which is quite handy


7539
09:53:27,040 --> 09:53:31,276
and while looking at this i realized that this has the wrong naming scheme


7540
09:53:31,276 --> 09:53:37,680
this should be my class in fact now looking at this this feels


7541
09:53:37,680 --> 09:53:42,000
like a really bad name let's rename it to test


7542
09:53:42,080 --> 09:53:47,840
and now i can call test and mymodule.test


7543
09:53:47,840 --> 09:53:54,080
and don't forget the brackets now i can run test dot do


7544
09:53:54,080 --> 09:53:58,960
something and if i run this we get hello


7545
09:53:58,960 --> 09:54:01,360
meaning this


7546
09:54:01,360 --> 09:54:04,160
module test here refers to


7547
09:54:04,160 --> 09:54:10,240
this class test and this do something refers to this do something here


7548
09:54:10,240 --> 09:54:14,720
and later on you are really going to appreciate having more files with less


7549
09:54:14,720 --> 09:54:18,720
code in each individual file it makes it much easier to work with


7550
09:54:18,720 --> 09:54:23,916
but i guess let's do an exercise and what i want you guys to do is to


7551
09:54:23,916 --> 09:54:28,320
create a some calculator function


7552
09:54:28,320 --> 09:54:31,756
that takes unlimited


7553
09:54:31,756 --> 09:54:39,596
arguments and returns the sum and create it here and run it


7554
09:54:39,596 --> 09:54:44,720
in the main file so pause the video now and


7555
09:54:44,720 --> 09:54:48,800
create this one function import it to the main file and then run


7556
09:54:48,800 --> 09:54:51,120
it there


7557
09:54:52,080 --> 09:54:55,596
all we have to do is create another function


7558
09:54:55,596 --> 09:55:02,880
and let's call this one sum calculator and in here i want to have one parameter


7559
09:55:02,880 --> 09:55:07,436
that i called nums but i want to be ready for unlimited


7560
09:55:07,436 --> 09:55:12,640
arguments so this i want to unpack and now inside of the function all i


7561
09:55:12,640 --> 09:55:17,040
want to do is to return the sum of these nums


7562
09:55:17,040 --> 09:55:21,916
and that is literally it now that i have that


7563
09:55:21,916 --> 09:55:28,160
i can i guess we can be a bit more fancy here let's say from my module i want to


7564
09:55:28,160 --> 09:55:35,040
import the sum cal q later and again this is working exactly the


7565
09:55:35,040 --> 09:55:38,720
same way compared to what we have seen before with the external or the python


7566
09:55:38,720 --> 09:55:43,360
standard modules and now that i have that some calculator


7567
09:55:43,360 --> 09:55:46,880
and i can add one two three four and five


7568
09:55:46,880 --> 09:55:50,560
run this and we don't get anything because we're


7569
09:55:50,560 --> 09:55:54,240
just returning something we are not printing it


7570
09:55:54,240 --> 09:55:59,436
so let's print it and there we go we get 15.


7571
09:55:59,436 --> 09:56:05,436
and with that we are pretty much good to go for modules although there is one


7572
09:56:05,436 --> 09:56:10,160
more topic we do have to cover that is going to be quite short though


7573
09:56:10,160 --> 09:56:14,160
when you are creating your own python modules there's one really important


7574
09:56:14,160 --> 09:56:18,160
concept you have to understand and that is called thunder main


7575
09:56:18,160 --> 09:56:22,560
all this one really means is when a python file is called it creates a


7576
09:56:22,560 --> 09:56:27,360
couple of internal variables and than the main is one of them it is


7577
09:56:27,360 --> 09:56:32,800
in fact the most used one essentially what it does is it gives a


7578
09:56:32,800 --> 09:56:37,436
name to the current python file and the one that we are executing is


7579
09:56:37,436 --> 09:56:42,480
always called thunder main but any imported file is called dunder


7580
09:56:42,480 --> 09:56:47,200
and then the file name and this is really useful to control


7581
09:56:47,200 --> 09:56:52,840
what code is being executed and more importantly to avoid executing code by


7582
09:56:52,840 --> 09:56:56,720
accident here is the example from the last video


7583
09:56:56,720 --> 09:57:02,960
and in my main file i want to print dunder


7584
09:57:02,960 --> 09:57:06,720
name both in my main file


7585
09:57:06,720 --> 09:57:10,800
and in the one i am importing


7586
09:57:10,800 --> 09:57:15,916
and if i run the code now i get done domain all the way at the end and all


7587
09:57:15,916 --> 09:57:21,360
the way at the top i get my module i guess let me comment out all of the


7588
09:57:21,360 --> 09:57:25,120
other print statements that is going to make it easier to read


7589
09:57:25,120 --> 09:57:32,640
now if i run this we get two print statements we have my module and main


7590
09:57:32,640 --> 09:57:36,960
and what happens internally is python first


7591
09:57:36,960 --> 09:57:42,320
runs all of this imported code here and what it gets at the end is print


7592
09:57:42,320 --> 09:57:45,360
name so it prints my module


7593
09:57:45,360 --> 09:57:49,680
and this my module is the same as the name my module up here


7594
09:57:49,680 --> 09:57:55,436
this is the name of the file and after that we are printing in the


7595
09:57:55,436 --> 09:58:00,240
main file then the name and then we are getting done domain


7596
09:58:00,240 --> 09:58:04,560
and the reason why this is called main instead of the file name we get up here


7597
09:58:04,560 --> 09:58:08,160
is that this is the file we are currently executing


7598
09:58:08,160 --> 09:58:12,960
if i just looked at my module so this one here and run this again


7599
09:58:12,960 --> 09:58:18,160
and we are getting main here because right now we are executing my module


7600
09:58:18,160 --> 09:58:24,000
which turns this one into the main file and this is being used usually with an


7601
09:58:24,000 --> 09:58:30,080
if statement and you're looking for if dunder name


7602
09:58:30,080 --> 09:58:36,080
is equal to thunder main only if that is the case let's say i


7603
09:58:36,080 --> 09:58:40,400
want to print the main file this


7604
09:58:40,400 --> 09:58:44,480
makes sure you're only running this code if this is actually the file you are


7605
09:58:44,480 --> 09:58:47,360
executing and most of the time when you have


7606
09:58:47,360 --> 09:58:52,320
multiple files like in this case all of the actual code is inside of this


7607
09:58:52,320 --> 09:58:55,756
if statement if you have other kinds of code let's


7608
09:58:55,756 --> 09:59:02,960
say for this one here for my mymodule.pi i would add the same if statement


7609
09:59:02,960 --> 09:59:06,160
this one here and then the print statement would be


7610
09:59:06,160 --> 09:59:10,640
inside of it if i executed my custom module i would


7611
09:59:10,640 --> 09:59:17,276
only get the main file this one here and inside of my module this one here


7612
09:59:17,276 --> 09:59:21,596
would not be executed and this way if you have this if


7613
09:59:21,596 --> 09:59:25,840
statement for every single file you have a lot of control about what is


7614
09:59:25,840 --> 09:59:31,916
getting executed when you are importing the file which can be incredibly handy


7615
09:59:31,916 --> 09:59:36,560
in this entire section we are going to cover some extra topics now i do want to


7616
09:59:36,560 --> 09:59:40,000
be clear here basically all of these parts are very


7617
09:59:40,000 --> 09:59:45,200
useful but not that common especially for beginners the longest video in here


7618
09:59:45,200 --> 09:59:49,916
are decorators and error handling as a beginner you are not going to encounter


7619
09:59:49,916 --> 09:59:55,040
them or use them basically at all meaning at least for now it's perfectly


7620
09:59:55,040 --> 09:59:58,880
fine to skip this entire section and return later


7621
09:59:58,880 --> 10:00:03,596
it is probably a good idea for you to practice basic python and then explore


7622
10:00:03,596 --> 10:00:08,560
these areas especially decorators can get really really complicated and if


7623
10:00:08,560 --> 10:00:11,756
you're just getting started you are not going to use them anyway so you might as


7624
10:00:11,756 --> 10:00:14,800
well skip them at the very least for the beginning


7625
10:00:14,800 --> 10:00:18,800
that being said i do want to cover them because i want to cover all of python


7626
10:00:18,800 --> 10:00:22,880
and first of all i want to cover two very simple topics that i would


7627
10:00:22,880 --> 10:00:27,276
recommend you to check out and those are called pass and input


7628
10:00:27,276 --> 10:00:31,840
all that pass really does is it tells python to not do anything


7629
10:00:31,840 --> 10:00:36,560
this does seem kind of pointless and basically you would only use it if you


7630
10:00:36,560 --> 10:00:41,040
have a function but no content yet so maybe you have a function with a good


7631
10:00:41,040 --> 10:00:46,160
name but you don't yet have good content for the function so you have to fill it


7632
10:00:46,160 --> 10:00:49,200
with something and you would use a pass for that


7633
10:00:49,200 --> 10:00:55,360
besides that we have input this is another function that can get user input


7634
10:00:55,360 --> 10:00:59,596
although you are hardly ever going to use it i'll talk about it in just a


7635
10:00:59,596 --> 10:01:04,000
second but it really isn't as useful as it sounds


7636
10:01:04,000 --> 10:01:09,596
so inside of a python file let's say i have a function that is really


7637
10:01:09,596 --> 10:01:13,916
important function


7638
10:01:13,916 --> 10:01:17,596
name with whatever parameters you have


7639
10:01:17,596 --> 10:01:22,240
and for this function you don't have content yet you don't really know what


7640
10:01:22,240 --> 10:01:26,080
to do with it or at least you're prototyping it but you do want to keep


7641
10:01:26,080 --> 10:01:30,000
the function by itself but if you're doing this without any content and run


7642
10:01:30,000 --> 10:01:34,400
the code you are going to get an error because python expected an indented


7643
10:01:34,400 --> 10:01:39,596
block after function defined on line one so python needs to have something in


7644
10:01:39,596 --> 10:01:43,596
here and for that you could just add pass and


7645
10:01:43,596 --> 10:01:48,480
now everything works just fine so pass is basically telling python to


7646
10:01:48,480 --> 10:01:52,960
not do anything and well not doing anything is something


7647
10:01:52,960 --> 10:01:57,120
you usually don't have to define though this past you hardly ever see anything


7648
10:01:57,120 --> 10:02:01,276
productive it's pretty much only there to cover some kind of content where you


7649
10:02:01,276 --> 10:02:05,040
don't have content yet it's a filler essentially


7650
10:02:05,040 --> 10:02:10,080
now besides that we have input let's say i want to get some kind of


7651
10:02:10,080 --> 10:02:14,960
user input and for that we would need input and now


7652
10:02:14,960 --> 10:02:19,756
in here we can use this kind of like print for example i could print to the


7653
10:02:19,756 --> 10:02:22,720
user press a


7654
10:02:22,720 --> 10:02:26,160
button and whatever the user is going to press


7655
10:02:26,160 --> 10:02:29,756
is going to be stored inside of this user input


7656
10:02:29,756 --> 10:02:34,160
however there is going to be a problem because if i am running all of this we


7657
10:02:34,160 --> 10:02:38,720
can see press a button however if i keep on pressing a button i keep on typing in


7658
10:02:38,720 --> 10:02:42,880
subtime the issue here is sublime does not


7659
10:02:42,880 --> 10:02:46,800
support input for that we would have to run this


7660
10:02:46,800 --> 10:02:52,080
python script inside of the powershell or the terminal and how this is going to


7661
10:02:52,080 --> 10:02:56,320
work let me print the user input at the end so we can tell


7662
10:02:56,320 --> 10:03:01,276
what's going on and really importantly do save the file


7663
10:03:01,276 --> 10:03:05,436
what i want to do now is to run this script inside of the powershell or the


7664
10:03:05,436 --> 10:03:09,360
terminal and let me put this on a separate screen


7665
10:03:09,360 --> 10:03:15,756
so here we have the powershell and here i have the folder with my python file


7666
10:03:15,756 --> 10:03:20,080
that i have just created and if you want to run this what you


7667
10:03:20,080 --> 10:03:24,640
have to do is you first have to type hyphen to run a python command


7668
10:03:24,640 --> 10:03:30,160
and then you need the file path towards this folder here let me show my mouse


7669
10:03:30,160 --> 10:03:32,400
actually


7670
10:03:32,480 --> 10:03:36,640
inside of the terminal you can add a ton of commands to navigate to folder


7671
10:03:36,640 --> 10:03:41,120
structure the thing is that's kind of complicated and you don't need it all


7672
10:03:41,120 --> 10:03:45,756
you really have to do is to drag the file in there and then you get the rest


7673
10:03:45,756 --> 10:03:50,080
automatically so this is all you really have to do just drag and drop the file


7674
10:03:50,080 --> 10:03:53,276
don't forget the python at the beginning but other than that


7675
10:03:53,276 --> 10:03:58,400
all you have to do is press enter and now you get press a button exactly


7676
10:03:58,400 --> 10:04:04,240
what we have specified inside of the python file and now i can press this is


7677
10:04:04,240 --> 10:04:06,640
my input


7678
10:04:06,640 --> 10:04:10,000
and if i now press enter i get this is my input


7679
10:04:10,000 --> 10:04:14,560
and after that the code finishes and we can add another kind of input for


7680
10:04:14,560 --> 10:04:17,840
example we could add clear in here and we are done


7681
10:04:17,840 --> 10:04:21,680
and that's really how you run files inside of the powershell or in windows


7682
10:04:21,680 --> 10:04:28,800
in general and welcome back in this part we are going to cover error handling and


7683
10:04:28,800 --> 10:04:32,320
well for this part we are going to handle some errors


7684
10:04:32,320 --> 10:04:36,160
which means obviously your code should not contain


7685
10:04:36,160 --> 10:04:40,880
any errors because that would crash your program and that would be bad


7686
10:04:40,880 --> 10:04:46,640
the issue is sometimes you can't really avoid having some errors


7687
10:04:46,640 --> 10:04:51,520
for example you might try to find a file and it just doesn't exist and you don't


7688
10:04:51,520 --> 10:04:55,520
notice in advance and as a consequence you want to have


7689
10:04:55,520 --> 10:04:58,800
the ability to anticipate and deal with errors


7690
10:04:58,800 --> 10:05:04,080
and fortunately python can deal with that quite easily there are quite a few


7691
10:05:04,080 --> 10:05:08,320
different ways to do it actually and let's jump straight into the code


7692
10:05:08,320 --> 10:05:13,756
and let's have a look at all of this alrighty here we have an empty python


7693
10:05:13,756 --> 10:05:20,720
file and let's just create an error just to get started i want to print one


7694
10:05:20,720 --> 10:05:24,640
divided by zero and if i run this we're going to get an


7695
10:05:24,640 --> 10:05:31,360
error we have a zero division error that we are dividing by zero and this is not


7696
10:05:31,360 --> 10:05:36,960
allowed because math doesn't like it so what could we do to overcome this or


7697
10:05:36,960 --> 10:05:42,000
rather how can we make python try some code snippet and then do something else


7698
10:05:42,000 --> 10:05:46,720
if we get an error and well the command is literally called


7699
10:05:46,720 --> 10:05:49,680
try and this works kind of like an if


7700
10:05:49,680 --> 10:05:55,276
statement except without any arguments we're just telling python try this line


7701
10:05:55,276 --> 10:06:01,276
of code here if it works cool if not we want to do something else and the else


7702
10:06:01,276 --> 10:06:07,276
here is called accept and inside of that i can print something


7703
10:06:07,276 --> 10:06:11,360
else let's literally write something else


7704
10:06:11,360 --> 10:06:15,840
and now if i run this we get something else


7705
10:06:15,840 --> 10:06:20,720
what happened here is that python first went with try and the code in there was


7706
10:06:20,720 --> 10:06:24,640
this print statement and this print statement included the


7707
10:06:24,640 --> 10:06:28,800
operation 1 divided by 0 which is not possible as


7708
10:06:28,800 --> 10:06:34,080
a consequence this here gave us an error and because of that


7709
10:06:34,080 --> 10:06:38,240
we are going to accept and inside of that we are printing something else


7710
10:06:38,240 --> 10:06:41,756
and this is what we got in the end as well


7711
10:06:41,756 --> 10:06:47,276
if i had valid code inside of the try statement let's say 1 divided by 1


7712
10:06:47,276 --> 10:06:53,596
we will get the result of this line of code here and accept would not be run


7713
10:06:53,596 --> 10:06:59,756
and that is the easiest way to deal with errors in python however we can both be


7714
10:06:59,756 --> 10:07:04,000
more specific and we can add more things towards this


7715
10:07:04,000 --> 10:07:09,680
and let's be more specific first and that is for this except statement we


7716
10:07:09,680 --> 10:07:13,200
can specify specific errors that we are looking for


7717
10:07:13,200 --> 10:07:18,640
for example what we are looking for right now is a zero division error


7718
10:07:18,640 --> 10:07:22,560
and if i run this we are getting the same outcome


7719
10:07:22,560 --> 10:07:27,520
however now if i add another print statement and i print a variable that


7720
10:07:27,520 --> 10:07:31,120
doesn't exist yet which if i run this


7721
10:07:31,120 --> 10:07:35,840
is giving us another kind of error specifically a name error


7722
10:07:35,840 --> 10:07:41,120
and we are right now only dealing with zero division errors so when python sees


7723
10:07:41,120 --> 10:07:44,080
a name error it doesn't know what to do with it


7724
10:07:44,080 --> 10:07:48,640
but well we can account for it by adding another except statement


7725
10:07:48,640 --> 10:07:53,360
and now we want to look for a name error and if


7726
10:07:53,360 --> 10:07:59,756
that is the case i want to print let's say does not exist


7727
10:07:59,756 --> 10:08:03,840
and now if we run this we get does not exist


7728
10:08:03,840 --> 10:08:09,680
and be aware what happens here python starts all the way at the top with try


7729
10:08:09,680 --> 10:08:14,000
and then it goes through these lines of code here and we are starting with print


7730
10:08:14,000 --> 10:08:17,360
a and this one doesn't exist and as a


7731
10:08:17,360 --> 10:08:23,200
consequence none of the stuff below is executed and we jump immediately


7732
10:08:23,200 --> 10:08:28,640
to this name error and in there we are printing does not exist which is what we


7733
10:08:28,640 --> 10:08:32,240
are getting down here now one important thing you may have


7734
10:08:32,240 --> 10:08:36,800
noticed is that let me actually get rid of it


7735
10:08:36,800 --> 10:08:40,720
this print here which should have given us


7736
10:08:40,720 --> 10:08:45,276
this accept statement is not being printed down here in the


7737
10:08:45,276 --> 10:08:48,400
console meaning that this here wasn't even


7738
10:08:48,400 --> 10:08:53,596
executed it's really important to understand as soon as try finds any


7739
10:08:53,596 --> 10:08:57,680
error any code after that is not being executed


7740
10:08:57,680 --> 10:09:02,800
which is why we only ever get one except statement or the result of one except


7741
10:09:02,800 --> 10:09:07,916
statement to be more specific and if you happen to be interested in


7742
10:09:07,916 --> 10:09:12,000
all the possible errors that could happen in python there is a whole


7743
10:09:12,000 --> 10:09:17,756
documentation online and in here you can find for example arithmetic error buffer


7744
10:09:17,756 --> 10:09:22,240
error lookup error assertion error lots of different things that could be


7745
10:09:22,240 --> 10:09:25,680
raised so if you are looking for some specific


7746
10:09:25,680 --> 10:09:30,880
errors that could come up this list here would be really useful what you want to


7747
10:09:30,880 --> 10:09:36,320
look for is build in exceptions there are two more things that we can do


7748
10:09:36,320 --> 10:09:44,080
one is else and the other is finally and let's start with else that one is


7749
10:09:44,080 --> 10:09:47,916
well it's basically an else statement that you should know from the if


7750
10:09:47,916 --> 10:09:51,916
statement let's say in here i can just print


7751
10:09:51,916 --> 10:09:58,640
let's say the else statement and if i run this right now this else


7752
10:09:58,640 --> 10:10:02,960
statement is not run because we do have an error this name error here


7753
10:10:02,960 --> 10:10:05,360
specifically but


7754
10:10:05,360 --> 10:10:09,040
if i run some code in here that does exist


7755
10:10:09,040 --> 10:10:13,680
let's say print try if i run this now


7756
10:10:13,680 --> 10:10:19,436
we get the code inside of the try statement and we are getting the else


7757
10:10:19,436 --> 10:10:23,680
statement as well but the else statement is only run


7758
10:10:23,680 --> 10:10:26,400
if the try statement doesn't have an error


7759
10:10:26,400 --> 10:10:30,960
the way you have to think about it is that this else is an else to these


7760
10:10:30,960 --> 10:10:36,560
except statements and finally we have well finally and


7761
10:10:36,560 --> 10:10:40,560
finally runs whenever all of this stuff finished and


7762
10:10:40,560 --> 10:10:45,756
it runs either way it doesn't matter if we have an exception or not


7763
10:10:45,756 --> 10:10:49,680
let me print finally


7764
10:10:49,680 --> 10:10:55,200
and if i run this now we get finally again and this is going to happen


7765
10:10:55,200 --> 10:11:01,680
let me run the zero division error again this finally even comes when we have


7766
10:11:01,680 --> 10:11:07,360
this division error here i guess i should rename these things a bit more


7767
10:11:07,360 --> 10:11:11,436
properly you cannot divide by


7768
10:11:11,436 --> 10:11:14,400
zero and now let's run this again this looks


7769
10:11:14,400 --> 10:11:18,000
better what is happening in the code right now


7770
10:11:18,000 --> 10:11:23,200
we first number one start with the try part up here


7771
10:11:23,200 --> 10:11:28,240
and inside of that on this line here we're getting an error


7772
10:11:28,240 --> 10:11:32,720
and this leads us to the exception error for zero division error


7773
10:11:32,720 --> 10:11:36,560
and in there we are printing you cannot divide by zero


7774
10:11:36,560 --> 10:11:40,960
which is this part here number two and finally


7775
10:11:40,960 --> 10:11:46,000
we are ending on finally which is number three


7776
10:11:46,000 --> 10:11:49,360
and this finally runs no matter what happens


7777
10:11:49,360 --> 10:11:53,040
and with that we have covered how to handle exceptions


7778
10:11:53,040 --> 10:11:58,080
although there's one really interesting topic and that is you can raise your own


7779
10:11:58,080 --> 10:12:01,200
error let me actually add comments here to


7780
10:12:01,200 --> 10:12:06,720
make this example a bit clearer this part here what we covered so far is


7781
10:12:06,720 --> 10:12:12,160
anticipating errors or to be more specific exceptions


7782
10:12:12,160 --> 10:12:16,840
what we can also do is raising exceptions


7783
10:12:16,840 --> 10:12:23,120
ourselves and what i want to do in here for the example is i want to create a


7784
10:12:23,120 --> 10:12:27,840
variable that must be a string


7785
10:12:27,840 --> 10:12:31,520
and for now let's give it a string let's


7786
10:12:31,520 --> 10:12:36,640
call it test string it really doesn't matter what the string here is


7787
10:12:36,640 --> 10:12:42,080
and now what i want to do is to run an if statement that if this variable


7788
10:12:42,080 --> 10:12:45,436
contains a string i want to continue as normal


7789
10:12:45,436 --> 10:12:50,160
if that is not the case i want to raise an exception or well call an error same


7790
10:12:50,160 --> 10:12:53,360
thing and for that we first of all need an if


7791
10:12:53,360 --> 10:12:57,596
statement and to check the type of a variable we


7792
10:12:57,596 --> 10:13:04,480
need is instance and in here i want to check my var must


7793
10:13:04,480 --> 10:13:09,040
be string and the second argument is the string type or the type we want to look


7794
10:13:09,040 --> 10:13:14,800
for which in my case is string and if that is the case the variable is


7795
10:13:14,800 --> 10:13:20,000
all good and let's say i want to print must be string


7796
10:13:20,000 --> 10:13:25,840
and let me comment out the earlier part and run this code and this is working


7797
10:13:25,840 --> 10:13:32,240
indeed because a var must be string is a string indeed or it contains a string


7798
10:13:32,240 --> 10:13:37,756
however now if that is not the case i want to raise an error and this you do


7799
10:13:37,756 --> 10:13:43,040
with raise and then the type of error you want to raise in my case i want a


7800
10:13:43,040 --> 10:13:47,120
type error and in here i can add a message as well


7801
10:13:47,120 --> 10:13:52,880
as the argument and in my case i want to write must be a string


7802
10:13:52,880 --> 10:13:57,756
if i run the code now nothing happens however if i change this string to


7803
10:13:57,756 --> 10:14:05,756
something else let's say an empty list now i get a type error must be a string


7804
10:14:05,756 --> 10:14:11,916
and that way with raise you can create your own errors to your heart's content


7805
10:14:11,916 --> 10:14:17,436
and along those lines there's another thing you can do to raise an exception


7806
10:14:17,436 --> 10:14:23,360
and that is called assert and assert basically means that you want


7807
10:14:23,360 --> 10:14:28,080
to make sure that your code only runs if a certain condition is true think of


7808
10:14:28,080 --> 10:14:33,436
assert as a stronger if statement that if this condition is false your entire


7809
10:14:33,436 --> 10:14:37,916
code stops with an error for example what you could do in here


7810
10:14:37,916 --> 10:14:45,436
let's do a simpler variable a is 5 and a always has to be 5. if a is not 5


7811
10:14:45,436 --> 10:14:51,200
i want to end all of the code immediately and this i do with assert


7812
10:14:51,200 --> 10:14:56,720
and in here i can just look for any kind of boolean statement meaning a is equal


7813
10:14:56,720 --> 10:15:01,840
to 5 and if i let me comment this part out


7814
10:15:01,840 --> 10:15:09,040
if i run this now we get nothing however if i change the value of a to 6


7815
10:15:09,040 --> 10:15:16,560
we are getting an assertion error and that is caused by this line here


7816
10:15:16,560 --> 10:15:20,000
and sometimes in your code you really want to make sure that a certain


7817
10:15:20,000 --> 10:15:23,276
condition is true especially if you work with something


7818
10:15:23,276 --> 10:15:26,720
more securely concerned this is something you really want to be using


7819
10:15:26,720 --> 10:15:31,360
extensively but well with that let me uncomment


7820
10:15:31,360 --> 10:15:37,840
all of this here as well if you understand these three parts you


7821
10:15:37,840 --> 10:15:42,160
basically know all you ever need to know about error handling it doesn't get that


7822
10:15:42,160 --> 10:15:46,560
much more complicated and that means we can do an exercise and


7823
10:15:46,560 --> 10:15:51,360
then call it a day and what i want you guys to do is to create a list and then


7824
10:15:51,360 --> 10:15:56,480
try to raise an index error and obviously account for this arrow as well


7825
10:15:56,480 --> 10:16:00,080
and type some kind of message with the print statement


7826
10:16:00,080 --> 10:16:04,480
also try to use else and finally and see how far you get


7827
10:16:04,480 --> 10:16:08,800
you might have to do some research online to find what an index error is


7828
10:16:08,800 --> 10:16:15,480
although i think it makes sense what it might be just try to guess


7829
10:16:16,400 --> 10:16:22,320
let me start by creating my list and in here i want to list with one two three


7830
10:16:22,320 --> 10:16:26,560
four and five the content really doesn't matter


7831
10:16:26,560 --> 10:16:31,200
and an index error basically means that you are trying to get an index that


7832
10:16:31,200 --> 10:16:36,080
doesn't exist for example i could get my list


7833
10:16:36,080 --> 10:16:40,240
and then get the index 99 which does not exist


7834
10:16:40,240 --> 10:16:45,916
i am getting a type error and the type error comes from here let me comment out


7835
10:16:45,916 --> 10:16:51,916
all of the earlier stuff so we can focus on one thing


7836
10:16:51,916 --> 10:16:56,800
now let's try this again and now we're getting an index error


7837
10:16:56,800 --> 10:17:02,000
and that is what i want to account for let me cut this one out and instead i


7838
10:17:02,000 --> 10:17:05,840
want to go with try and in here


7839
10:17:05,840 --> 10:17:11,120
i want to get my list 99 which i know does not exist right now


7840
10:17:11,120 --> 10:17:16,560
so i want to run and accept and i want to look for my index


7841
10:17:16,560 --> 10:17:21,360
error and if that is the case i want to print


7842
10:17:21,360 --> 10:17:27,436
that index does not exist and if i run this now


7843
10:17:27,436 --> 10:17:32,320
we get that index does not exist and no error message anymore


7844
10:17:32,320 --> 10:17:36,560
i guess with that we have covered the first two parts of the assignment


7845
10:17:36,560 --> 10:17:43,040
besides that i also want an else and finally let's start with else


7846
10:17:43,040 --> 10:17:49,680
and in here i just want to print that index exists


7847
10:17:49,680 --> 10:17:54,720
let's try it if i run it by itself we are getting that index does not exist


7848
10:17:54,720 --> 10:18:00,640
meaning this line here and we don't see else because else is only run if there's


7849
10:18:00,640 --> 10:18:03,360
no index error so


7850
10:18:03,360 --> 10:18:10,080
let's try to get the first index and let me print this one as well


7851
10:18:10,080 --> 10:18:16,080
now we get two and that index exists which is this print statement here and


7852
10:18:16,080 --> 10:18:22,720
this else statement and well finally we need finally and in


7853
10:18:22,720 --> 10:18:26,160
here i just want to print finished


7854
10:18:26,160 --> 10:18:30,560
and this one is the easiest it always runs we get finished either way if this


7855
10:18:30,560 --> 10:18:34,840
is working or if it is not


7856
10:18:34,840 --> 10:18:40,000
working and with that we have covered error messages it really is a fairly


7857
10:18:40,000 --> 10:18:43,200
simple topic and quite easy to cover in python


7858
10:18:43,200 --> 10:18:47,120
the main thing i suppose you have to learn is all the different types of


7859
10:18:47,120 --> 10:18:51,276
exceptions that you can have but if you play around with this a bit


7860
10:18:51,276 --> 10:18:57,680
it's getting quite natural so we are done with this one


7861
10:18:57,680 --> 10:19:02,800
hello there in this tutorial we are going to cover decorators which are is


7862
10:19:02,800 --> 10:19:08,560
somewhat more advanced topic in python so let's go over some theory first


7863
10:19:08,560 --> 10:19:13,916
in the most basic sense decorators are functions that decorate other functions


7864
10:19:13,916 --> 10:19:17,680
which does sound a bit cryptic but essentially what we do is we are


7865
10:19:17,680 --> 10:19:21,596
wrapping one function around another function


7866
10:19:21,596 --> 10:19:25,840
and let's do this a bit more visually to illustrate what's happening


7867
10:19:25,840 --> 10:19:30,240
this is a normal function and usually what you do is you just call it


7868
10:19:30,240 --> 10:19:33,200
somewhere and then you have something happening


7869
10:19:33,200 --> 10:19:37,360
what decorators do is we still have the normal function


7870
10:19:37,360 --> 10:19:41,756
but now we are putting another function around it


7871
10:19:41,756 --> 10:19:46,560
and then when we are calling all of this we are calling the decorator function


7872
10:19:46,560 --> 10:19:51,360
and inside of that decorator function we are calling the original function


7873
10:19:51,360 --> 10:19:55,680
and this is allowing us to execute code before and after the function


7874
10:19:55,680 --> 10:20:01,436
so when i'm calling this function here i could run code here and i could run code


7875
10:20:01,436 --> 10:20:05,596
here without making any changes to the original function


7876
10:20:05,596 --> 10:20:09,840
this function here would stay exactly the same all the


7877
10:20:09,840 --> 10:20:14,000
actual logic happens inside of the decorator


7878
10:20:14,000 --> 10:20:17,756
we are literally putting one function inside of another function and this


7879
10:20:17,756 --> 10:20:23,200
other function executes extra code that's the entire idea of a decorator


7880
10:20:23,200 --> 10:20:28,720
now why would you want to do this basically this way we can give extra


7881
10:20:28,720 --> 10:20:32,320
functionality to a function without changing it


7882
10:20:32,320 --> 10:20:37,200
a simple example here is we could write a decorator for a function and it makes


7883
10:20:37,200 --> 10:20:42,880
the function execute twice when called not the most useful function but we are


7884
10:20:42,880 --> 10:20:46,880
going to talk some more useful examples later on i just want to illustrate what


7885
10:20:46,880 --> 10:20:51,756
is happening now in practice you are seeing decorators in three different


7886
10:20:51,756 --> 10:20:56,960
circumstances let's go over them the most common one is you want to test


7887
10:20:56,960 --> 10:21:00,720
your code without changing it let's say you work in a team you have some really


7888
10:21:00,720 --> 10:21:04,720
complicated code and you want to test your code without making too many


7889
10:21:04,720 --> 10:21:08,720
changes a decorator would be excellent for that


7890
10:21:08,720 --> 10:21:13,040
the other example would be you are working in a team and you want to avoid


7891
10:21:13,040 --> 10:21:18,320
making unnecessary changes now those two points are pretty similar


7892
10:21:18,320 --> 10:21:21,520
you basically want to do something with your code without making too many


7893
10:21:21,520 --> 10:21:24,640
changes and both of these are also fairly


7894
10:21:24,640 --> 10:21:29,436
advanced if you are just learning python you are quite far away from either of


7895
10:21:29,436 --> 10:21:34,880
these which is why you may be struggling with decorators because you don't really


7896
10:21:34,880 --> 10:21:38,320
need them however there is a third case that you


7897
10:21:38,320 --> 10:21:42,800
probably are going to use and that is using a decorator inside of


7898
10:21:42,800 --> 10:21:48,160
a class because this allows you to run code when an attribute is accessed or


7899
10:21:48,160 --> 10:21:51,680
changed so for example let's say you have a


7900
10:21:51,680 --> 10:21:55,756
monster with health and every time that health is changed you want to run some


7901
10:21:55,756 --> 10:22:00,400
other function inside of the monster with a decorator doing this is fairly


7902
10:22:00,400 --> 10:22:06,320
easy although that being said decorators can be quite hard especially for


7903
10:22:06,320 --> 10:22:10,640
beginners because we are going to use some more advanced functionalities in


7904
10:22:10,640 --> 10:22:16,800
python that may be slightly confusing although i would really recommend you to


7905
10:22:16,800 --> 10:22:20,320
try to follow along because this is going to be really good practice to


7906
10:22:20,320 --> 10:22:23,680
understand functions and how to pass them around


7907
10:22:23,680 --> 10:22:29,200
in fact before we start with decorators we need to recap functions itself so


7908
10:22:29,200 --> 10:22:33,756
let's have a look at that here we have a completely empty sheet of


7909
10:22:33,756 --> 10:22:36,880
code and let's just get started with a really


7910
10:22:36,880 --> 10:22:41,436
basic function i want to define let's call it func


7911
10:22:41,436 --> 10:22:46,000
there are no arguments and inside of this function i just want to print


7912
10:22:46,000 --> 10:22:49,520
function just about the easiest function you can


7913
10:22:49,520 --> 10:22:54,560
write if i call this function i get function


7914
10:22:54,560 --> 10:22:59,916
so this really doesn't do all that much now there's a really important concept


7915
10:22:59,916 --> 10:23:05,520
you have to understand that right now we are calling the function here


7916
10:23:05,520 --> 10:23:10,800
and if we didn't do that so if i remove those brackets i could run this and


7917
10:23:10,800 --> 10:23:15,916
nothing would happen but what i could do is print the


7918
10:23:15,916 --> 10:23:20,960
function itself and now i get a function object


7919
10:23:20,960 --> 10:23:26,320
meaning this function here as the whole function not


7920
10:23:26,320 --> 10:23:31,436
what's being returned just the function itself and this is just going to be an


7921
10:23:31,436 --> 10:23:34,560
object if that doesn't tell you anything check


7922
10:23:34,560 --> 10:23:38,880
out my videos on object-oriented programming they should be quite helpful


7923
10:23:38,880 --> 10:23:43,040
but basically what this func is giving us is a simple


7924
10:23:43,040 --> 10:23:47,200
object that we can call and if we don't call it we are just getting a function


7925
10:23:47,200 --> 10:23:52,880
object still not particularly useful but what we can do with this function


7926
10:23:52,880 --> 10:23:58,640
object is pass it around like any other object like an integer like a string


7927
10:23:58,640 --> 10:24:03,436
like basically any other object we can pass it around for example what


7928
10:24:03,436 --> 10:24:06,720
we can do i can create another function


7929
10:24:06,720 --> 10:24:11,916
and this let's call it a wrapper because this one is supposed to take the


7930
10:24:11,916 --> 10:24:16,720
argument of the function and then i want to execute the function


7931
10:24:16,720 --> 10:24:21,680
itself meaning what i can do now i can call my wrapper function


7932
10:24:21,680 --> 10:24:25,436
and run this and i get function again


7933
10:24:25,436 --> 10:24:31,120
and what is happening in here i am calling this wrapper and i'm passing in


7934
10:24:31,120 --> 10:24:36,720
this function here what happens as a consequence


7935
10:24:36,720 --> 10:24:41,276
is this function is being passed as a parameter


7936
10:24:41,276 --> 10:24:45,120
into the wrapper function and inside of that function


7937
10:24:45,120 --> 10:24:50,320
we are calling this function and when we are calling it we are


7938
10:24:50,320 --> 10:24:55,200
printing the word function and now that we have that we could also


7939
10:24:55,200 --> 10:24:59,436
do something like print hello


7940
10:24:59,436 --> 10:25:01,840
and print


7941
10:25:01,840 --> 10:25:07,040
goodbye and if i run this now we are running the function inside of


7942
10:25:07,040 --> 10:25:11,436
another function and before and after we are calling it we are running some other


7943
10:25:11,436 --> 10:25:15,200
code and this is basically the main idea of a


7944
10:25:15,200 --> 10:25:19,436
decorator although it does get a bit more complicated


7945
10:25:19,436 --> 10:25:24,800
but we'll come to that in just a bit now there's one more thing that you can do


7946
10:25:24,800 --> 10:25:29,040
inside of a function and that is you can create a whole new


7947
10:25:29,040 --> 10:25:33,680
function so for example let me create another


7948
10:25:33,680 --> 10:25:38,720
function and let's call this one a function


7949
10:25:38,720 --> 10:25:41,916
generator and then here we have no arguments to


7950
10:25:41,916 --> 10:25:45,680
keep it simple and now inside of this function


7951
10:25:45,680 --> 10:25:49,276
generator i want to create a new function


7952
10:25:49,276 --> 10:25:53,276
and let's call this one new function i guess it's a good word


7953
10:25:53,276 --> 10:25:57,040
and in here i just want to print new


7954
10:25:57,040 --> 10:26:01,200
function and since this new function is just


7955
10:26:01,200 --> 10:26:07,040
going to be an object we can return the new function and what i can do with


7956
10:26:07,040 --> 10:26:10,640
that i can create a variable let's call it


7957
10:26:10,640 --> 10:26:16,160
new function and i want to get my function generator


7958
10:26:16,160 --> 10:26:22,080
and if i run this we can't see anything but now this new function is going to


7959
10:26:22,080 --> 10:26:28,000
have this new function in here meaning what i can do i can call my new


7960
10:26:28,000 --> 10:26:32,640
function execute it and we get new function


7961
10:26:32,640 --> 10:26:36,640
so just to go over this because it may be a bit confusing


7962
10:26:36,640 --> 10:26:40,800
this new function executes this one here


7963
10:26:40,800 --> 10:26:44,400
and what we are getting from this function generator


7964
10:26:44,400 --> 10:26:48,720
is we are defining a new function this one here


7965
10:26:48,720 --> 10:26:53,756
and at the end of the function we are returning this new function


7966
10:26:53,756 --> 10:26:57,840
and this we are capturing inside of this new function variable


7967
10:26:57,840 --> 10:27:03,360
and this new function variable now is just a function meaning we can call it


7968
10:27:03,360 --> 10:27:06,320
here and when we are calling it we are


7969
10:27:06,320 --> 10:27:10,400
getting this print statement that's really all that's happening here


7970
10:27:10,400 --> 10:27:13,680
the main thing you have to understand is we are basically passing around


7971
10:27:13,680 --> 10:27:18,640
functions with the return statement with that we have some function basics so now


7972
10:27:18,640 --> 10:27:21,436
we can actually start working on the decorator


7973
10:27:21,436 --> 10:27:26,560
and for that let me open up a new file and in here


7974
10:27:26,560 --> 10:27:32,640
i want to create an actual decorator now first of all for decorator we are


7975
10:27:32,640 --> 10:27:36,160
going to need a basic function we want to decorate


7976
10:27:36,160 --> 10:27:41,916
so for my function basics i want to copy this basic function here


7977
10:27:41,916 --> 10:27:47,680
which is just printing function by itself so if i run this we get function


7978
10:27:47,680 --> 10:27:51,120
literally the easiest function you can write more or less


7979
10:27:51,120 --> 10:27:56,080
and now for this function i want to create a decorator and this is


7980
10:27:56,080 --> 10:27:59,680
going to be another function that you can give whatever name you want let's


7981
10:27:59,680 --> 10:28:03,680
say i want to call this one decorator to keep things simple


7982
10:28:03,680 --> 10:28:08,240
and this decorator is going to accept one parameter which is going to be a


7983
10:28:08,240 --> 10:28:13,040
function so in just a bit we're going to pass this function


7984
10:28:13,040 --> 10:28:17,756
inside of this decorator what we are going to do with that inside


7985
10:28:17,756 --> 10:28:23,120
of this function we are going to create another function and let's call this one


7986
10:28:23,120 --> 10:28:27,040
the wrapper and this one right now doesn't have any


7987
10:28:27,040 --> 10:28:30,640
arguments but now inside of this function i want


7988
10:28:30,640 --> 10:28:33,840
to run the original function


7989
10:28:33,840 --> 10:28:39,840
and besides that i can do quite a few other things for example i could just


7990
10:28:39,840 --> 10:28:44,240
print the decoration


7991
10:28:44,240 --> 10:28:51,200
begins and let me write this properly and i can also write the decoration


7992
10:28:51,200 --> 10:28:57,276
ends and now after i have done that i can return this wrapper


7993
10:28:57,276 --> 10:29:01,840
and now what i can do i can create my


7994
10:29:01,840 --> 10:29:07,040
new function and this is going to be my decorator


7995
10:29:07,040 --> 10:29:11,916
and instead of this decorator i want to pass in my function


7996
10:29:11,916 --> 10:29:15,680
and once i have that i can just call my new function


7997
10:29:15,680 --> 10:29:18,880
and i get the decorator begins the function


7998
10:29:18,880 --> 10:29:22,640
and the decorator ends what is happening here let me go over


7999
10:29:22,640 --> 10:29:27,916
this this is probably a bit confusing we are starting with our basic function


8000
10:29:27,916 --> 10:29:33,120
and this function we are passing in here into the


8001
10:29:33,120 --> 10:29:37,596
decorator function and this is the one we have up here


8002
10:29:37,596 --> 10:29:42,880
and inside of this decorator function we are creating a whole new function this


8003
10:29:42,880 --> 10:29:46,560
bit here and inside of this function


8004
10:29:46,560 --> 10:29:52,320
we are calling the original function meaning this


8005
10:29:52,320 --> 10:29:56,480
one here and then around this function we are


8006
10:29:56,480 --> 10:30:02,320
doing some other stuff like we are printing these two statements here


8007
10:30:02,320 --> 10:30:05,680
and then at the end of all of this we are returning


8008
10:30:05,680 --> 10:30:10,560
this new function and this new function we are storing in the new function


8009
10:30:10,560 --> 10:30:15,520
variable and then we can just call it like any


8010
10:30:15,520 --> 10:30:18,720
other function and now we have extra functionality


8011
10:30:18,720 --> 10:30:23,360
around our original function now where this becomes really


8012
10:30:23,360 --> 10:30:26,480
interesting is let's say


8013
10:30:26,480 --> 10:30:30,400
somewhere later in the course i am running function by itself


8014
10:30:30,400 --> 10:30:34,080
which would just give me the word function


8015
10:30:34,080 --> 10:30:39,276
let me comment out these two lines here if i just run fung i get function and


8016
10:30:39,276 --> 10:30:44,400
nothing else and what i can do with decorators if i


8017
10:30:44,400 --> 10:30:49,040
uncomment those two lines and get rid of this new func


8018
10:30:49,040 --> 10:30:54,400
when i create the variable name for this i can just call it the same way like i


8019
10:30:54,400 --> 10:30:58,480
have called the original function so i can call both func


8020
10:30:58,480 --> 10:31:04,960
if i do that and run the code again i now have a new functionality for this


8021
10:31:04,960 --> 10:31:08,560
function because we are essentially overwriting


8022
10:31:08,560 --> 10:31:12,480
the original function name and that way our function


8023
10:31:12,480 --> 10:31:15,840
even with the same name has new functionality


8024
10:31:15,840 --> 10:31:20,480
and this is the basic idea of a decorator if we have this kind of system


8025
10:31:20,480 --> 10:31:25,756
we can have really complex code and still check our function without making


8026
10:31:25,756 --> 10:31:30,880
any changes to the code and since this is a reasonable common


8027
10:31:30,880 --> 10:31:37,436
operation python has a shorthand for it and let me comment out


8028
10:31:37,436 --> 10:31:41,596
this statement here and the shorthand looks like this i


8029
10:31:41,596 --> 10:31:45,276
first write an add and then the decorator function so in this case


8030
10:31:45,276 --> 10:31:48,320
decorator and now if i run all of this again


8031
10:31:48,320 --> 10:31:53,120
we are seeing the same outcome for the simple reason let me uncomment


8032
10:31:53,120 --> 10:31:57,276
it that this statement here


8033
10:31:57,276 --> 10:32:02,080
and this line here they are doing essentially the same thing


8034
10:32:02,080 --> 10:32:08,560
we are wrapping this function here inside of a decorator this one here


8035
10:32:08,560 --> 10:32:13,276
and let's go over this a bit more slowly i think that's going to be useful


8036
10:32:13,276 --> 10:32:16,400
here we have the function you have just seen


8037
10:32:16,400 --> 10:32:22,080
and you can wrap this in the traditional way by writing the function and then we


8038
10:32:22,080 --> 10:32:25,756
are putting the function inside of the decorator and then we are calling the


8039
10:32:25,756 --> 10:32:29,680
function i hope this is making sense if you're


8040
10:32:29,680 --> 10:32:33,756
confused about this i would recommend to pause the video now and just go over all


8041
10:32:33,756 --> 10:32:37,520
of these different statements and see how they connect


8042
10:32:37,520 --> 10:32:42,320
i guess i can go over it as well again we have this decorator here and inside


8043
10:32:42,320 --> 10:32:47,200
of this decorator we are passing in a function


8044
10:32:47,200 --> 10:32:50,720
and then we get this function here as a parameter


8045
10:32:50,720 --> 10:32:56,080
now inside of this function we are creating a whole new function and this


8046
10:32:56,080 --> 10:33:00,880
one is called wrapper and only inside of this function we are


8047
10:33:00,880 --> 10:33:05,756
calling the original function this one here and then around this function we


8048
10:33:05,756 --> 10:33:10,160
can do whatever we want like calling these two print statements here we could


8049
10:33:10,160 --> 10:33:14,400
also do lots of other things i'm going to cover that in just a second


8050
10:33:14,400 --> 10:33:19,436
and finally at the end what we are doing is we are returning this wrapper


8051
10:33:19,436 --> 10:33:25,276
function and this wrapper function we are storing right now in func


8052
10:33:25,276 --> 10:33:29,276
and then we can call it like any other function


8053
10:33:29,276 --> 10:33:34,560
and that way we're using the name of the function and overwrite it with this new


8054
10:33:34,560 --> 10:33:37,916
function that is being wrapped inside of the function


8055
10:33:37,916 --> 10:33:42,560
which means if i took out this line here the function would come back to its


8056
10:33:42,560 --> 10:33:46,640
original functionality and just print function


8057
10:33:46,640 --> 10:33:51,276
now the problem with that approach is that we are writing func three times one


8058
10:33:51,276 --> 10:33:57,040
two and three and if you want to call it a fourth time which is kind of annoying


8059
10:33:57,040 --> 10:34:01,276
so what python developers have done is to create a shorthand for this and this


8060
10:34:01,276 --> 10:34:06,400
is called a decorator and this one is looking like this


8061
10:34:06,400 --> 10:34:08,560
and basically


8062
10:34:08,560 --> 10:34:13,680
this line here where we have the name of the function a decorator and then the


8063
10:34:13,680 --> 10:34:19,360
function as an argument is the same as this add decorator those two lines are


8064
10:34:19,360 --> 10:34:22,480
doing the exact same thing meaning


8065
10:34:22,480 --> 10:34:26,720
when you are calling this function you have the same result


8066
10:34:26,720 --> 10:34:32,320
now obviously just printing two more statements isn't particularly useful so


8067
10:34:32,320 --> 10:34:36,160
let's actually do something more relevant to see why decorators can be


8068
10:34:36,160 --> 10:34:40,160
useful here we are back in the code and i want


8069
10:34:40,160 --> 10:34:46,080
to create another decorator and this one i want to call the duration


8070
10:34:46,080 --> 10:34:50,640
decorator and then here again as a parameter we


8071
10:34:50,640 --> 10:34:55,276
need the function and inside of that i want to create a


8072
10:34:55,276 --> 10:34:58,240
wrapper it doesn't need any arguments


8073
10:34:58,240 --> 10:35:03,436
and in here first of all i want to execute my function and then return the


8074
10:35:03,436 --> 10:35:07,756
wrapper and this is essentially a decorator that


8075
10:35:07,756 --> 10:35:12,480
doesn't do anything right now and what i want to do with it is to measure how


8076
10:35:12,480 --> 10:35:15,916
long it takes to execute this function here


8077
10:35:15,916 --> 10:35:19,596
and for that to work we need the time module


8078
10:35:19,596 --> 10:35:25,360
meaning i want to import time and now what i want to do inside of this


8079
10:35:25,360 --> 10:35:29,680
decorator i want to get my start time


8080
10:35:29,680 --> 10:35:35,200
and this i would get with time dot time and this has to run before i call the


8081
10:35:35,200 --> 10:35:38,960
function and after i have called the function


8082
10:35:38,960 --> 10:35:44,080
i want to get my duration and my duration is my time.time which is


8083
10:35:44,080 --> 10:35:47,840
my current time and from that i want to subtract my


8084
10:35:47,840 --> 10:35:52,960
start time and once i have that i can print


8085
10:35:52,960 --> 10:35:57,520
let's call it duration and this should be an f string


8086
10:35:57,520 --> 10:36:02,720
with the duration and now just to get some reasonable


8087
10:36:02,720 --> 10:36:06,800
numbers in here when i am calling the original function


8088
10:36:06,800 --> 10:36:13,520
i want to call time dot sleep and make it sleep for one second


8089
10:36:13,520 --> 10:36:19,040
and now with this duration decorator let me actually call it so duration


8090
10:36:19,040 --> 10:36:24,080
decorator i can now comment out this line here


8091
10:36:24,080 --> 10:36:29,200
and now if i run the code we get function and we get the actual duration


8092
10:36:29,200 --> 10:36:34,640
and from this line we know it took one point a tiny amount of time to execute


8093
10:36:34,640 --> 10:36:39,840
all of this and this now we could get without making


8094
10:36:39,840 --> 10:36:44,320
any changes anywhere else in the code we're just calling the function here we


8095
10:36:44,320 --> 10:36:49,120
have the wrapper up here and then we're adding this one line of code to add some


8096
10:36:49,120 --> 10:36:52,640
debugging functionality so this is something you could be doing if your


8097
10:36:52,640 --> 10:36:57,756
code is running very slow and you want to identify what is slowing it down


8098
10:36:57,756 --> 10:37:02,320
now another thing that i haven't covered yet is that you can combine different


8099
10:37:02,320 --> 10:37:06,560
decorators and this happens by just adding them with the different add


8100
10:37:06,560 --> 10:37:11,840
statements on top of each other and we already have another decorator so


8101
10:37:11,840 --> 10:37:17,596
let me call this original decorator and let's run all of this again


8102
10:37:17,596 --> 10:37:24,000
and now let me go through them i have decorator begins and decorator ends that


8103
10:37:24,000 --> 10:37:29,120
is what we are getting up here from this original decorator


8104
10:37:29,120 --> 10:37:32,640
besides that we have the duration of the decorator


8105
10:37:32,640 --> 10:37:37,276
and this is what we are getting from this print statement here


8106
10:37:37,276 --> 10:37:41,756
and the actual function so this print here


8107
10:37:41,756 --> 10:37:46,640
is this line meaning now even though we have a very


8108
10:37:46,640 --> 10:37:50,800
simple function by using decorators we can give it a ton more extra


8109
10:37:50,800 --> 10:37:54,560
functionality without making any changes to it


8110
10:37:54,560 --> 10:38:00,000
which is well the entire idea of a decorator if you understand this it can


8111
10:38:00,000 --> 10:38:04,480
be really useful in very specific circumstances although if you are a


8112
10:38:04,480 --> 10:38:09,276
beginner you probably just are going to add more stuff to this function although


8113
10:38:09,276 --> 10:38:13,040
well if you know decorators you don't have to


8114
10:38:13,040 --> 10:38:16,560
and this makes it much cleaner to work with your functions


8115
10:38:16,560 --> 10:38:19,596
but alright let's do another exercise on this


8116
10:38:19,596 --> 10:38:24,480
i want you guys to create another decorator that calls a function twice


8117
10:38:24,480 --> 10:38:28,880
and this decorator should be called with this decorator and this decorator as


8118
10:38:28,880 --> 10:38:33,680
well so that this function has three decorators in total


8119
10:38:33,680 --> 10:38:37,120
and let's see how far you get


8120
10:38:38,720 --> 10:38:44,080
again i have to create another function and let's call it the double


8121
10:38:44,080 --> 10:38:49,040
decorator and in here once more we need a function


8122
10:38:49,040 --> 10:38:53,596
and inside of this function i want to create a wrapper


8123
10:38:53,596 --> 10:38:58,400
it doesn't need any arguments again and now in here i want to call my


8124
10:38:58,400 --> 10:39:02,320
function twice which i just do by calling my function


8125
10:39:02,320 --> 10:39:05,916
twice it's very simple once it comes down to it


8126
10:39:05,916 --> 10:39:10,720
and once i have that i want to return the wrapper once more


8127
10:39:10,720 --> 10:39:14,720
oh and by the way i'm just calling this wrapper because i think it makes sense


8128
10:39:14,720 --> 10:39:18,880
you could call this whatever you want there's no naming restriction


8129
10:39:18,880 --> 10:39:24,160
and all right now what i can do i can add another decorator with the


8130
10:39:24,160 --> 10:39:28,400
double decorator and now if i run all of this we have to


8131
10:39:28,400 --> 10:39:32,160
wait a second and if i expand this


8132
10:39:32,160 --> 10:39:37,840
we have the code being executed once and then twice


8133
10:39:37,840 --> 10:39:44,400
and well this is working really nicely and here again our actual function is


8134
10:39:44,400 --> 10:39:49,520
really simple and we are just adding more and more stuff to it and that way


8135
10:39:49,520 --> 10:39:54,160
it gets more and more complex with that we have some very basic


8136
10:39:54,160 --> 10:39:58,240
decorators now there are some more things we can do


8137
10:39:58,240 --> 10:40:02,320
with them and what i want to cover for this part


8138
10:40:02,320 --> 10:40:05,916
is that you can have functions with parameters being decorated that part is


8139
10:40:05,916 --> 10:40:10,160
actually really simple and besides that decorators themselves


8140
10:40:10,160 --> 10:40:14,400
can also have parameters although implementing this gets even more


8141
10:40:14,400 --> 10:40:18,480
complicated because we are wrapping a function inside of a function inside of


8142
10:40:18,480 --> 10:40:22,400
another function so this we will have to explore in quite


8143
10:40:22,400 --> 10:40:26,800
some more detail but let's have a look at all of this


8144
10:40:26,800 --> 10:40:32,000
here i am back in a completely empty sheet of code and i want to create a new


8145
10:40:32,000 --> 10:40:36,800
function so define function and now i want to have a function


8146
10:40:36,800 --> 10:40:40,160
parameter it doesn't really matter what it is and


8147
10:40:40,160 --> 10:40:44,720
in my case i am just going to print that function parameter


8148
10:40:44,720 --> 10:40:49,840
and now once we have that i can call this function with whatever i want let's


8149
10:40:49,840 --> 10:40:54,240
say hello and if i run this i get hello a super


8150
10:40:54,240 --> 10:40:58,400
simple function and to decorate this


8151
10:40:58,400 --> 10:41:03,040
we kind of need the same thing we have done here it's not really that much more


8152
10:41:03,040 --> 10:41:06,880
complicated as a matter of fact let me actually copy


8153
10:41:06,880 --> 10:41:13,276
this decorator here and paste it in here


8154
10:41:13,596 --> 10:41:20,400
and now i want to decorate this function with the decorator


8155
10:41:20,800 --> 10:41:26,320
and just as a reminder this would be the same thing as calling


8156
10:41:26,320 --> 10:41:29,840
function is the decorator


8157
10:41:29,840 --> 10:41:35,116
with the function however now if i call this


8158
10:41:35,116 --> 10:41:41,040
i am getting the decorator takes zero position arguments but one was given


8159
10:41:41,040 --> 10:41:46,240
and this happens in this one as well as in this one


8160
10:41:46,240 --> 10:41:50,320
so we're getting the same error message that's usually a good sign at the very


8161
10:41:50,320 --> 10:41:53,436
least the problem python has is that this


8162
10:41:53,436 --> 10:41:59,200
function needs this parameter so when we are calling the function up here


8163
10:41:59,200 --> 10:42:06,880
we again need the parameter but on top of that when we call this function here


8164
10:42:06,880 --> 10:42:13,040
we are calling this wrapper and right now when we are calling hello we are


8165
10:42:13,040 --> 10:42:18,320
passing it essentially into this parameter here which doesn't exist yet


8166
10:42:18,320 --> 10:42:23,916
which is why python is so unhappy and to get around this we just have to


8167
10:42:23,916 --> 10:42:27,756
create the parameters meaning this wrapper here and this


8168
10:42:27,756 --> 10:42:31,276
function need the same parameters or well for


8169
10:42:31,276 --> 10:42:35,680
this wrapper it's a parameter for this function it's an argument


8170
10:42:35,680 --> 10:42:40,800
and let me name them properly here i want to have a wrapper parameter


8171
10:42:40,800 --> 10:42:45,116
and now if i run all of this again we should see a different error message


8172
10:42:45,116 --> 10:42:49,520
and that is that func is missing one required position argument func


8173
10:42:49,520 --> 10:42:52,400
parameter meaning


8174
10:42:52,400 --> 10:42:57,680
this one here and well i get this


8175
10:42:57,680 --> 10:43:02,080
argument from the wrapper parameter so now if i run this


8176
10:43:02,080 --> 10:43:07,756
we get hello and if i change this argument to something


8177
10:43:07,756 --> 10:43:13,116
this is still working and we could also do this the other way


8178
10:43:13,116 --> 10:43:18,320
the more traditional way and we will get the same outcome


8179
10:43:18,320 --> 10:43:22,400
and let me just go over what is happening here by using the traditional


8180
10:43:22,400 --> 10:43:28,400
style to make it a bit easier to explain we are again calling this decorator


8181
10:43:28,400 --> 10:43:32,080
function here and passing in the function itself


8182
10:43:32,080 --> 10:43:39,200
now inside of this decorator we are creating all of this here


8183
10:43:39,200 --> 10:43:45,276
and right now the wrapper has one parameter the wrapper parameter


8184
10:43:45,276 --> 10:43:50,640
and then inside of this wrapper function we are calling whatever code we want and


8185
10:43:50,640 --> 10:43:55,756
we also have the original function here and then we are passing the wrapper


8186
10:43:55,756 --> 10:43:59,436
parameter as an argument inside of this function


8187
10:43:59,436 --> 10:44:03,680
and once we have all of that at the end of the code we can just call the


8188
10:44:03,680 --> 10:44:08,160
function with something and then this something would be passed into the


8189
10:44:08,160 --> 10:44:12,160
parameter for the wrapper and then this would be passed into the


8190
10:44:12,160 --> 10:44:17,276
original function now what you see very often for the


8191
10:44:17,276 --> 10:44:22,880
rapper you don't have one specific argument instead people very often just


8192
10:44:22,880 --> 10:44:26,800
add arcs with a star and then double quarks


8193
10:44:26,800 --> 10:44:32,240
and then this you pass into whatever original function you have so if i run


8194
10:44:32,240 --> 10:44:38,480
this we get the same outcome and these are very simple unpacking operators this


8195
10:44:38,480 --> 10:44:42,800
one is for a list and this one is for dictionary or keywords


8196
10:44:42,800 --> 10:44:47,040
and the reason why these are used is because they allow


8197
10:44:47,040 --> 10:44:53,116
for this decorator to accept basically any kind of function with any kind of


8198
10:44:53,116 --> 10:44:58,000
parameter right now we only have one parameter but we could also have more


8199
10:44:58,000 --> 10:45:02,640
name parameters an unlimited amount of arguments it doesn't really matter if


8200
10:45:02,640 --> 10:45:08,800
you have this setup you can accept any number of arguments or named arguments


8201
10:45:08,800 --> 10:45:13,360
which means that this decorator works with literally any function without


8202
10:45:13,360 --> 10:45:16,480
limitation and all right with that we have basic


8203
10:45:16,480 --> 10:45:20,000
parameters what we can also do let me uncomment the


8204
10:45:20,000 --> 10:45:23,360
decorator let's try if this is working it does


8205
10:45:23,360 --> 10:45:27,916
what we can also do is create a decorator that is accepting


8206
10:45:27,916 --> 10:45:33,840
other arguments like a 10 for example but for that to work we need something


8207
10:45:33,840 --> 10:45:39,436
even more complex so let's do this in a separate file


8208
10:45:39,520 --> 10:45:45,596
all right and here once more we have an incredibly simple function if i call


8209
10:45:45,596 --> 10:45:52,640
this function we can see function and now what i want to do i want to


8210
10:45:52,640 --> 10:45:59,560
create another decorator and let's call this one a repetition


8211
10:45:59,560 --> 10:46:03,040
decorator and this one should accept one argument


8212
10:46:03,040 --> 10:46:08,640
by how many times i want to repeat this function here for example if i add a


8213
10:46:08,640 --> 10:46:13,916
five in here i want to repeat this code five times when it's being called or


8214
10:46:13,916 --> 10:46:18,480
rather i want to call it five times when it is being called


8215
10:46:18,480 --> 10:46:24,080
now for that to work we need some pretty extensive setup


8216
10:46:24,080 --> 10:46:28,240
and let me go through what this would look like i am first going to create the


8217
10:46:28,240 --> 10:46:34,320
actual decorator so repetition decorator but this one is not going to accept a


8218
10:46:34,320 --> 10:46:40,240
function instead it is going to accept this argument here so in my case i want


8219
10:46:40,240 --> 10:46:44,080
to call this the repetitions


8220
10:46:44,160 --> 10:46:48,480
and now inside of this i am creating another function and this


8221
10:46:48,480 --> 10:46:53,756
is the actual decorator and this decorator is going to accept a


8222
10:46:53,756 --> 10:46:57,520
function and now inside of this decorator


8223
10:46:57,520 --> 10:47:03,360
i want to create the actual wrapper and this one in my case has no arguments


8224
10:47:03,360 --> 10:47:08,480
and what i want to do is for let's call it r in


8225
10:47:08,480 --> 10:47:11,520
range repetitions


8226
10:47:11,520 --> 10:47:15,116
i want to run my function


8227
10:47:15,596 --> 10:47:21,360
and now what i have to do i have to inside of the decorator i want to return


8228
10:47:21,360 --> 10:47:25,596
the wrapper and then inside of the scope of this


8229
10:47:25,596 --> 10:47:29,840
repetition decorator i want to return


8230
10:47:29,840 --> 10:47:33,596
the actual deck curator


8231
10:47:33,596 --> 10:47:38,880
and now if i run this it is going to work five times and i can change this to


8232
10:47:38,880 --> 10:47:43,200
a 20 and we will call this function 20 times


8233
10:47:43,200 --> 10:47:47,436
now the question is why does this work so


8234
10:47:47,436 --> 10:47:52,640
let's go over it and let's do this in a traditional way


8235
10:47:52,640 --> 10:47:57,840
which i guess i haven't done yet but if we didn't use decorators and still


8236
10:47:57,840 --> 10:48:00,720
wanted to use this it would look like this


8237
10:48:00,720 --> 10:48:05,756
i'm still using my func variable name and now i want to call the repetition


8238
10:48:05,756 --> 10:48:09,596
decorator and now for this repetition decorator i


8239
10:48:09,596 --> 10:48:15,040
have to specify how many repetitions i want let's say 4 in this case


8240
10:48:15,040 --> 10:48:19,596
and after i have that i am calling whatever i get from this


8241
10:48:19,596 --> 10:48:25,040
and passing in my function and if i run this we get function 4


8242
10:48:25,040 --> 10:48:28,480
times now if you look at this this is probably


8243
10:48:28,480 --> 10:48:32,880
really confusing but to understand this you basically


8244
10:48:32,880 --> 10:48:38,160
have to understand the return statement and let's go through it one by one


8245
10:48:38,160 --> 10:48:42,640
first of all we are calling the repetition decorator and passing in four


8246
10:48:42,640 --> 10:48:48,960
that is this line of code here and this one by itself doesn't actually


8247
10:48:48,960 --> 10:48:56,160
do all that much all we are doing is creating a new function and returning it


8248
10:48:56,160 --> 10:49:01,116
so all we are getting from this repetition decorator with a 4 is this


8249
10:49:01,116 --> 10:49:07,116
decorator here a new function meaning this decorator here is going to


8250
10:49:07,116 --> 10:49:11,680
replace the entire decorator we have seen so far


8251
10:49:11,680 --> 10:49:16,880
and on this new decorator we are calling the new function


8252
10:49:16,880 --> 10:49:21,596
this one here meaning now we are passing this function


8253
10:49:21,596 --> 10:49:27,116
inside of here and this function is being captured inside of


8254
10:49:27,116 --> 10:49:30,480
this parameter


8255
10:49:30,480 --> 10:49:37,840
and once we have that we are basically back to a normal


8256
10:49:37,840 --> 10:49:43,276
so inside of this decorator we have a wrapper and this one just loops over the


8257
10:49:43,276 --> 10:49:47,360
range of repetitions that we get from up here


8258
10:49:47,360 --> 10:49:51,360
and then inside of that we are calling the function and then we are returning


8259
10:49:51,360 --> 10:49:55,840
the wrapper and then this wrapper is being stored


8260
10:49:55,840 --> 10:49:59,756
inside of the function and we can call this function


8261
10:49:59,756 --> 10:50:04,320
and then we are repeating it by whatever we specified in here


8262
10:50:04,320 --> 10:50:09,840
and well if i comment this out again and return to my decorator let's add four in


8263
10:50:09,840 --> 10:50:14,560
here and we still get four repetitions


8264
10:50:14,640 --> 10:50:19,116
and i would really recommend you to practice this in your own time although


8265
10:50:19,116 --> 10:50:23,116
if you're just starting don't worry too much about it just get used to functions


8266
10:50:23,116 --> 10:50:27,840
and classes by themselves and once you are a bit more comfortable start working


8267
10:50:27,840 --> 10:50:32,960
on decorators they are definitely one of the more advanced topics in python


8268
10:50:32,960 --> 10:50:37,596
although there is going to be another section and this is where you are


8269
10:50:37,596 --> 10:50:42,640
probably going to use decorators the most as a beginner and that is to use


8270
10:50:42,640 --> 10:50:48,560
decorators inside of classes so let's talk about decorators inside of


8271
10:50:48,560 --> 10:50:54,240
classes and there's one really important one it is called property


8272
10:50:54,240 --> 10:50:59,436
and what this allows us to do is it allows us to turn methods into


8273
10:50:59,436 --> 10:51:05,040
attributes and this is something we get from the property function that we can


8274
10:51:05,040 --> 10:51:08,800
use inside of python it actually comes with python


8275
10:51:08,800 --> 10:51:12,640
and i'm pretty sure all of this is going to sound really cryptic if i just


8276
10:51:12,640 --> 10:51:16,640
explain it theoretically so let's do all of this in code that


8277
10:51:16,640 --> 10:51:22,320
should be better all right here i have a completely empty python file and what i


8278
10:51:22,320 --> 10:51:27,916
want to do is to create a new class let's call it generic


8279
10:51:27,916 --> 10:51:34,400
and in here i want to create a dunder init method and this one itself and


8280
10:51:34,400 --> 10:51:38,080
nothing else and what i want to do in here is create


8281
10:51:38,080 --> 10:51:42,720
one attribute let's call it x and let's set a value for 10 it really doesn't


8282
10:51:42,720 --> 10:51:49,436
matter what it is and now i want to create an object from this class let's


8283
10:51:49,436 --> 10:51:53,360
call it generic and i just want my generic class


8284
10:51:53,360 --> 10:52:00,480
and now i can print generic dot x and i should get 10 and indeed i


8285
10:52:00,480 --> 10:52:04,560
do and now what i want to do is i want to


8286
10:52:04,560 --> 10:52:10,640
observe this x here meaning whenever i look at it so i retrieve the value or


8287
10:52:10,640 --> 10:52:16,000
when i change the value i want to run some other code and this by itself in


8288
10:52:16,000 --> 10:52:21,916
python isn't really that easy to do i guess what you could be doing is run


8289
10:52:21,916 --> 10:52:27,360
some kind of function that let's call it get x in here self


8290
10:52:27,360 --> 10:52:33,840
and in here i could return self.x and then besides that i could print some


8291
10:52:33,840 --> 10:52:37,756
other code let's say get x


8292
10:52:37,756 --> 10:52:43,436
and now inside of this print statement instead of x i want to get x


8293
10:52:43,436 --> 10:52:49,276
and don't forget to call it if i run this i get get x and the value so when i


8294
10:52:49,276 --> 10:52:55,040
get x i can run some other code and this is fine by itself but it's not


8295
10:52:55,040 --> 10:52:59,360
very elegant and again like we have seen with the


8296
10:52:59,360 --> 10:53:03,840
other decorators what happens if i already have a lot of


8297
10:53:03,840 --> 10:53:11,596
code let's say i have this generic x 10 times in my code and i don't want to


8298
10:53:11,596 --> 10:53:16,880
change all of these instances here i just want to change my class itself to


8299
10:53:16,880 --> 10:53:22,720
account for that that whenever we get x i want to run some other code and this


8300
10:53:22,720 --> 10:53:26,480
we can do but we need some special function in


8301
10:53:26,480 --> 10:53:32,160
python and this function is called property


8302
10:53:32,160 --> 10:53:38,800
and into this property function we can pass in a getter a setter and a


8303
10:53:38,800 --> 10:53:44,000
deleter and then we can assign all of this to


8304
10:53:44,000 --> 10:53:48,840
one attribute inside of our class let's say x right


8305
10:53:48,840 --> 10:53:55,040
now and then this x is what we are actually going to work with so now when


8306
10:53:55,040 --> 10:54:02,480
we are calling generic x this line here this x refers to this x here and then


8307
10:54:02,480 --> 10:54:06,080
when we are just looking at this x we are calling the getter method


8308
10:54:06,080 --> 10:54:10,160
when we are changing this x we are calling setter


8309
10:54:10,160 --> 10:54:14,320
and when we are deleting this x we are calling deleter


8310
10:54:14,320 --> 10:54:19,840
meaning now what you usually see with this the original attribute we have this


8311
10:54:19,840 --> 10:54:22,880
x here we are turning into a private method


8312
10:54:22,880 --> 10:54:28,880
with an underscore before it and now to python this x here and this x


8313
10:54:28,880 --> 10:54:34,320
are two separate variables but i as a programmer still know that


8314
10:54:34,320 --> 10:54:37,520
they're the same because of the naming convention here


8315
10:54:37,520 --> 10:54:42,560
and now basically what i'm going to do for this getter i am going to return


8316
10:54:42,560 --> 10:54:49,436
underscore x and with that we have a getter so this


8317
10:54:49,436 --> 10:54:55,840
method here is going to be this getter meaning whenever we are calling


8318
10:54:55,840 --> 10:55:00,960
this generic x we are calling this get a method


8319
10:55:00,960 --> 10:55:04,640
which is then returning this underscore x


8320
10:55:04,640 --> 10:55:09,756
and essentially what we are doing here outside of the class we are working with


8321
10:55:09,756 --> 10:55:14,960
x and this is what we are accessing but inside of the class we are using


8322
10:55:14,960 --> 10:55:20,000
underscore x and this is what actually keeps track of the value


8323
10:55:20,000 --> 10:55:26,560
and now basically what we have to do besides a getter we also need a


8324
10:55:26,560 --> 10:55:32,800
setter so let me change it and for the setter we need self and a new value


8325
10:55:32,800 --> 10:55:37,040
and when we are calling this let me run set x


8326
10:55:37,040 --> 10:55:41,116
and then self underscore x should be the value


8327
10:55:41,116 --> 10:55:48,560
and this we do not want to return and finally besides that let me copy it


8328
10:55:48,560 --> 10:55:52,720
one more time i want to have it deleter


8329
10:55:52,720 --> 10:55:58,000
this one doesn't need a value and what i want to do in here is delete


8330
10:55:58,000 --> 10:56:01,436
x and all we have to do for this one is to


8331
10:56:01,436 --> 10:56:10,480
run del and self dot underscore x and now i can run this


8332
10:56:10,480 --> 10:56:17,200
and let me make this a bit smaller now when i print generic x we get get x


8333
10:56:17,200 --> 10:56:23,436
and the value of x meaning we have run this method here


8334
10:56:23,436 --> 10:56:27,756
what i can also do before i'm printing x i can run


8335
10:56:27,756 --> 10:56:31,756
generic x is equal to 4


8336
10:56:31,756 --> 10:56:36,800
and now if i run this i am setting x and i'm getting x and


8337
10:56:36,800 --> 10:56:42,640
then i get the actual value of x and finally what i can do


8338
10:56:42,640 --> 10:56:50,880
i can also run delete and generic dot x and now if i run this i have set x get x


8339
10:56:50,880 --> 10:56:55,916
the value of x and delete x meaning now


8340
10:56:55,916 --> 10:57:00,400
whenever i for example get the value of x i can run


8341
10:57:00,400 --> 10:57:05,596
whatever other code i want and for example what i could do with


8342
10:57:05,596 --> 10:57:10,480
that i could import from date time that's not


8343
10:57:10,480 --> 10:57:14,960
how you spell that from date time import date time


8344
10:57:14,960 --> 10:57:21,116
and i want to know whenever i get x which i get by just printing


8345
10:57:21,116 --> 10:57:26,320
the date time dot now and now if i run this


8346
10:57:26,320 --> 10:57:30,960
i am getting the current time when i'm accessing x


8347
10:57:30,960 --> 10:57:35,040
and since we're just returning this underscore x you could even make changes


8348
10:57:35,040 --> 10:57:39,680
to whatever x you get depending on the time of day some other variables some


8349
10:57:39,680 --> 10:57:44,160
basically anything you want to look at which is why all of this is really


8350
10:57:44,160 --> 10:57:48,400
powerful and i would recommend to go over this in


8351
10:57:48,400 --> 10:57:52,560
your own time it's really useful but just to go over it really quickly


8352
10:57:52,560 --> 10:57:57,680
again i think that's going to be useful when we are initiating this class


8353
10:57:57,680 --> 10:58:04,000
we have underscore x this one here and this is the variable we actually


8354
10:58:04,000 --> 10:58:07,916
storing values in right now that is 10 but it really


8355
10:58:07,916 --> 10:58:13,276
doesn't matter what it is once we have that we are running this


8356
10:58:13,276 --> 10:58:18,240
line here and this one turns x into a property


8357
10:58:18,240 --> 10:58:24,400
and this property has a getter a setter and a deleter


8358
10:58:24,400 --> 10:58:28,960
and those are referring to this getter here this setter here


8359
10:58:28,960 --> 10:58:33,680
and this deleter and now from outside of the class


8360
10:58:33,680 --> 10:58:39,916
whenever we are accessing this x here we are running either of these methods


8361
10:58:39,916 --> 10:58:45,276
and these methods then influence self.x which is where we actually store


8362
10:58:45,276 --> 10:58:48,720
the value so this one here


8363
10:58:48,720 --> 10:58:53,756
and that way when we are accessing changing or deleting a value we can run


8364
10:58:53,756 --> 10:58:59,040
whatever code we want in there and i hope this is making sense this is


8365
10:58:59,040 --> 10:59:02,560
again something slightly more advanced that you probably want to practice on


8366
10:59:02,560 --> 10:59:06,800
your own time but what python developers also realized


8367
10:59:06,800 --> 10:59:11,756
is that this isn't exactly an elegant way of writing all of this


8368
10:59:11,756 --> 10:59:17,520
which is why this property works really well as a decorator


8369
10:59:17,520 --> 10:59:24,480
and let me copy the entire class to implement this as a decorator


8370
10:59:24,480 --> 10:59:31,200
and let me comment out all of this and basically how you would implement


8371
10:59:31,200 --> 10:59:35,436
all of this as a decorator for the getter


8372
10:59:35,436 --> 10:59:40,480
you would simply add the add property decorator


8373
10:59:40,480 --> 10:59:45,436
although then the getter you would rename to the name of the property which


8374
10:59:45,436 --> 10:59:50,400
in my case is this one here so i just want this to be x


8375
10:59:50,400 --> 10:59:55,360
now for the setter i want to get another decorator and this


8376
10:59:55,360 --> 11:00:00,160
one you would call with the name of the property in my case again x and now you


8377
11:00:00,160 --> 11:00:05,116
would add dot setter and then the actual method would also be


8378
11:00:05,116 --> 11:00:09,916
called x or the name of the property and finally


8379
11:00:09,916 --> 11:00:15,596
the same works for deleter so we need x dot deleter


8380
11:00:15,596 --> 11:00:19,520
and now the name of the method should also be the name of the property


8381
11:00:19,520 --> 11:00:23,520
so x in my case and now once we have that


8382
11:00:23,520 --> 11:00:28,560
i can get rid of this property here and now this code


8383
11:00:28,560 --> 11:00:33,276
does the same as this code up here meaning if i run all of this


8384
11:00:33,276 --> 11:00:40,240
we get the exact same result except now it's a bit easier to read i suppose


8385
11:00:40,240 --> 11:00:45,756
and this is something you are going to see reasonably often even as a beginner


8386
11:00:45,756 --> 11:00:50,000
because running some code when you're just changing a value or even when


8387
11:00:50,000 --> 11:00:54,000
you're just looking at the value can be really powerful


8388
11:00:54,000 --> 11:00:58,720
so understanding this here or at least being able to replicate it by yourself


8389
11:00:58,720 --> 11:01:01,916
is going to be something you do want to practice


8390
11:01:01,916 --> 11:01:06,160
but again this is all very advanced so if you're just learning python and all


8391
11:01:06,160 --> 11:01:10,720
of this is too much don't worry about it you are not going to use it for quite


8392
11:01:10,720 --> 11:01:14,240
some time and it would be much more valuable for


8393
11:01:14,240 --> 11:01:19,116
you to understand classes and functions by themselves so don't stress yourself


8394
11:01:19,116 --> 11:01:23,436
if this is too much but anyway this is all you need to know


8395
11:01:23,436 --> 11:01:27,596
to get started with decorators and i hope that was helpful


8396
11:01:27,596 --> 11:01:33,276
in this video we are going to cover eval and exec which are two fairly special


8397
11:01:33,276 --> 11:01:37,276
functions in python let's talk about them


8398
11:01:37,276 --> 11:01:41,680
both eval and exact are simply functions inside of python


8399
11:01:41,680 --> 11:01:46,080
the thing that makes them special is that both of them translate strings into


8400
11:01:46,080 --> 11:01:49,276
python code in practice this would look something


8401
11:01:49,276 --> 11:01:52,400
like this if i'm running eval


8402
11:01:52,400 --> 11:01:59,596
1 plus 1 this would return the operation 1 plus 1 which would give me a 2.


8403
11:01:59,596 --> 11:02:05,680
and notice here this one plus one originally was just a string nothing


8404
11:02:05,680 --> 11:02:11,596
else and with eval we are turning this string into an actual python operation


8405
11:02:11,596 --> 11:02:16,800
which can be incredibly powerful as a matter of fact you could even


8406
11:02:16,800 --> 11:02:22,000
create new variables from a string which i guess very occasionally can be


8407
11:02:22,000 --> 11:02:26,160
incredibly useful and while it overall gives you a ton of


8408
11:02:26,160 --> 11:02:29,916
flexibility however there's something really


8409
11:02:29,916 --> 11:02:34,640
important and that is you have to be extremely careful when


8410
11:02:34,640 --> 11:02:39,436
using exact or eval for the simple reason that if you handle


8411
11:02:39,436 --> 11:02:45,596
these functions badly it allows users to run their own code inside of your code


8412
11:02:45,596 --> 11:02:50,560
which if you for example run a database might end up with them stealing all of


8413
11:02:50,560 --> 11:02:54,160
your data for example you might have some kind of


8414
11:02:54,160 --> 11:02:59,040
input field and this field was originally designed to handle names from


8415
11:02:59,040 --> 11:03:01,840
users and then you use the eval or exec


8416
11:03:01,840 --> 11:03:05,756
function to update this kind of name to make sure there are no typos or


8417
11:03:05,756 --> 11:03:09,200
something like that a user instead of writing a name could


8418
11:03:09,200 --> 11:03:14,320
just add a ton of code and thereby accessing your database


8419
11:03:14,320 --> 11:03:18,480
and if that happens you probably are going to be in a lot of trouble


8420
11:03:18,480 --> 11:03:21,916
so be really careful when you're using these functions


8421
11:03:21,916 --> 11:03:27,040
they can end up horribly wrong but alright before we jump into code


8422
11:03:27,040 --> 11:03:29,520
let's talk about the difference between the two


8423
11:03:29,520 --> 11:03:35,436
eval is the simpler of the two functions it only evaluates code which means you


8424
11:03:35,436 --> 11:03:40,640
can run functions or simple operations but you cannot create new variables or


8425
11:03:40,640 --> 11:03:45,520
run if statements or stuff like that for that you would need exac this is the


8426
11:03:45,520 --> 11:03:49,360
more powerful one and it basically is capable of running


8427
11:03:49,360 --> 11:03:52,880
any kind of code and let's have a look at both


8428
11:03:52,880 --> 11:03:59,116
and let me start with eva i need to type eval and now in here i


8429
11:03:59,116 --> 11:04:04,160
can write any kind of simple statement for example 5 plus 10


8430
11:04:04,160 --> 11:04:09,596
and if i execute this we don't get anything because this only returns a


8431
11:04:09,596 --> 11:04:14,080
value it doesn't print it meaning i have to put all of this inside of a print


8432
11:04:14,080 --> 11:04:18,480
statement if i run this now we are getting 15.


8433
11:04:18,480 --> 11:04:23,596
and we could even run some kind of code for example what i could be doing


8434
11:04:23,596 --> 11:04:27,596
is create another string inside of the string


8435
11:04:27,596 --> 11:04:31,596
with the different quotation marks and let's call this one test


8436
11:04:31,596 --> 11:04:37,436
and on this test i can call the upper method and run this now and we are


8437
11:04:37,436 --> 11:04:42,640
getting test essentially what happens is that python just removes these quotation


8438
11:04:42,640 --> 11:04:46,880
marks and then runs all of this as normal python code


8439
11:04:46,880 --> 11:04:53,116
however there are limitations especially for eval for example what i couldn't do


8440
11:04:53,116 --> 11:05:00,640
is print eval if true then print


8441
11:05:00,640 --> 11:05:04,400
let's say test and if i run this


8442
11:05:04,400 --> 11:05:07,916
we are getting an error that we have invalid syntax


8443
11:05:07,916 --> 11:05:12,800
and the invalid syntax we are getting because if true or an if statement in


8444
11:05:12,800 --> 11:05:16,480
general cannot be run inside of eval


8445
11:05:16,480 --> 11:05:22,240
for that you would need exec if i run this now this is working just


8446
11:05:22,240 --> 11:05:27,916
fine and this is a more general theme that in eva we are quite limited in


8447
11:05:27,916 --> 11:05:32,080
terms of what we can do another example would be


8448
11:05:32,080 --> 11:05:35,360
i couldn't assign a new value to a variable


8449
11:05:35,360 --> 11:05:39,116
so in eva i couldn't do something like a equals 10


8450
11:05:39,116 --> 11:05:45,116
i would be getting a syntax error however if i use exec


8451
11:05:45,116 --> 11:05:49,360
this would work just fine and after running this code


8452
11:05:49,360 --> 11:05:53,040
we have a variable a meaning i can print a


8453
11:05:53,040 --> 11:05:57,596
and we get 10. the value of this 10 here


8454
11:05:57,596 --> 11:06:03,596
and that is the entire idea behind exec and eval


8455
11:06:03,596 --> 11:06:08,560
now most of the time especially as a beginner you are not going to use them


8456
11:06:08,560 --> 11:06:12,480
whatsoever because there are certainly more advanced things


8457
11:06:12,480 --> 11:06:18,000
however there's one good example that i think can be quite valuable


8458
11:06:18,000 --> 11:06:22,720
let me copy in four lines of code and i guess i can comment out the


8459
11:06:22,720 --> 11:06:28,240
earlier stuff what you're looking right now is i have my string and this is just


8460
11:06:28,240 --> 11:06:34,240
a string and on this string i'm running upper title lower and case fold


8461
11:06:34,240 --> 11:06:38,640
meaning if i run the code now i get all of these results


8462
11:06:38,640 --> 11:06:43,436
the issue here now is we have four lines of code for something


8463
11:06:43,436 --> 11:06:49,596
that is actually really really simple and using eval here could shorten all of


8464
11:06:49,596 --> 11:06:54,480
this quite substantially and this i think could actually be a really good


8465
11:06:54,480 --> 11:06:59,436
exercise try to express these four lines here


8466
11:06:59,436 --> 11:07:05,596
using an eval statement and if you want a tip this should happen


8467
11:07:05,596 --> 11:07:11,276
inside of a for loop try to figure this one out yourself


8468
11:07:13,040 --> 11:07:19,596
i first of all have to convert upper tidal lower and case volt into some kind


8469
11:07:19,596 --> 11:07:23,756
of string and in my case let me just copy it


8470
11:07:23,756 --> 11:07:29,040
it is looking like this and i want to cycle over this with a for


8471
11:07:29,040 --> 11:07:35,436
loop meaning i want to do for operation inside of this list


8472
11:07:35,436 --> 11:07:40,400
and now inside of this i want to run my eval function


8473
11:07:40,400 --> 11:07:46,480
and in here i need a string of my string


8474
11:07:46,480 --> 11:07:51,360
and on this i want to run each of these operations


8475
11:07:51,360 --> 11:07:57,360
and this i would do with an f string and inside of that i want curly brackets and


8476
11:07:57,360 --> 11:08:01,520
my operation and importantly we do want to call these


8477
11:08:01,520 --> 11:08:05,360
functions which means i want brackets


8478
11:08:05,360 --> 11:08:09,840
so for example we are starting with upper and this is


8479
11:08:09,840 --> 11:08:12,960
going to be inserted in here for the operation


8480
11:08:12,960 --> 11:08:17,680
which means we are ending up with my string dot upper and then we're adding


8481
11:08:17,680 --> 11:08:23,360
brackets to actually call this method and eval then basically removes the


8482
11:08:23,360 --> 11:08:28,080
quotation marks and turns all of this into valid python code


8483
11:08:28,080 --> 11:08:32,560
and the last thing we have to do is to actually print this so we can see the


8484
11:08:32,560 --> 11:08:36,400
result let me add the print statement and


8485
11:08:36,400 --> 11:08:42,160
comment out this earlier stuff and if i execute this now we get the


8486
11:08:42,160 --> 11:08:45,040
very same result and


8487
11:08:45,040 --> 11:08:49,680
this may be a bit arguable but i think this is much easier to read than these


8488
11:08:49,680 --> 11:08:53,276
four lines here but both approaches would be perfectly


8489
11:08:53,276 --> 11:09:00,200
fine and well with that we have eval and exec
